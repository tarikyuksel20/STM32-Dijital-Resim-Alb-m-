
STM32_ILI9341_EMWIN_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001088  0800bcb4  0800bcb4  0001bcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd3c  0800cd3c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd44  0800cd44  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd44  0800cd44  0001cd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800cd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038dc  2000006c  0800cdb8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003948  0800cdb8  00023948  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158f5  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028ae  00000000  00000000  0003598f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  00038d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023642  00000000  00000000  00039708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bade  00000000  00000000  0005cd4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c95d3  00000000  00000000  00068828  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fd  00000000  00000000  00131dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  00131ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bc9c 	.word	0x0800bc9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800bc9c 	.word	0x0800bc9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 80004cc:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <GUI_X_Config+0x18>)
 80004d2:	f008 fac3 	bl	8008a5c <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <GUI_X_Config+0x1c>)
 80004d8:	f007 f8f4 	bl	80076c4 <GUI_SetDefaultFont>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000088 	.word	0x20000088
 80004e4:	0800c1dc 	.word	0x0800c1dc

080004e8 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2102      	movs	r1, #2
 8000506:	480b      	ldr	r0, [pc, #44]	; (8000534 <LcdWriteReg+0x3c>)
 8000508:	f001 fd2a 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <LcdWriteReg+0x3c>)
 8000512:	f001 fd25 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 8000516:	1df9      	adds	r1, r7, #7
 8000518:	2301      	movs	r3, #1
 800051a:	2201      	movs	r2, #1
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <LcdWriteReg+0x40>)
 800051e:	f002 f9cb 	bl	80028b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2102      	movs	r1, #2
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <LcdWriteReg+0x3c>)
 8000528:	f001 fd1a 	bl	8001f60 <HAL_GPIO_WritePin>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020800 	.word	0x40020800
 8000538:	20003094 	.word	0x20003094

0800053c <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2102      	movs	r1, #2
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <LcdWriteData+0x3c>)
 800055c:	f001 fd00 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2104      	movs	r1, #4
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <LcdWriteData+0x3c>)
 8000566:	f001 fcfb 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 800056a:	1df9      	adds	r1, r7, #7
 800056c:	2301      	movs	r3, #1
 800056e:	2201      	movs	r2, #1
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <LcdWriteData+0x40>)
 8000572:	f002 f9a1 	bl	80028b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2102      	movs	r1, #2
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <LcdWriteData+0x3c>)
 800057c:	f001 fcf0 	bl	8001f60 <HAL_GPIO_WritePin>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020800 	.word	0x40020800
 800058c:	20003094 	.word	0x20003094

08000590 <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 800059a:	e011      	b.n	80005c0 <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2102      	movs	r1, #2
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LcdWriteDataMultiple+0x44>)
 80005a2:	f001 fcdd 	bl	8001f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2104      	movs	r1, #4
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <LcdWriteDataMultiple+0x44>)
 80005ac:	f001 fcd8 	bl	8001f60 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	1c4b      	adds	r3, r1, #1
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	2201      	movs	r2, #1
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <LcdWriteDataMultiple+0x48>)
 80005bc:	f002 f97c 	bl	80028b8 <HAL_SPI_Transmit>
	while (NumItems--)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	603a      	str	r2, [r7, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1e8      	bne.n	800059c <LcdWriteDataMultiple+0xc>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020800 	.word	0x40020800
 80005d8:	20003094 	.word	0x20003094

080005dc <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 80005e6:	bf00      	nop
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	603a      	str	r2, [r7, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1fa      	bne.n	80005e8 <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <LcdInit>:

void LcdInit(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2102      	movs	r1, #2
 800060a:	489a      	ldr	r0, [pc, #616]	; (8000874 <LcdInit+0x274>)
 800060c:	f001 fca8 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2104      	movs	r1, #4
 8000614:	4897      	ldr	r0, [pc, #604]	; (8000874 <LcdInit+0x274>)
 8000616:	f001 fca3 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4895      	ldr	r0, [pc, #596]	; (8000874 <LcdInit+0x274>)
 8000620:	f001 fc9e 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 8000624:	2002      	movs	r0, #2
 8000626:	f001 f9dd 	bl	80019e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	4891      	ldr	r0, [pc, #580]	; (8000874 <LcdInit+0x274>)
 8000630:	f001 fc96 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2104      	movs	r1, #4
 8000638:	488e      	ldr	r0, [pc, #568]	; (8000874 <LcdInit+0x274>)
 800063a:	f001 fc91 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2108      	movs	r1, #8
 8000642:	488c      	ldr	r0, [pc, #560]	; (8000874 <LcdInit+0x274>)
 8000644:	f001 fc8c 	bl	8001f60 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	e005      	b.n	800065a <LcdInit+0x5a>
		LcdWriteReg(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff52 	bl	80004f8 <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	3301      	adds	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d9f6      	bls.n	800064e <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	4883      	ldr	r0, [pc, #524]	; (8000874 <LcdInit+0x274>)
 8000666:	f001 fc7b 	bl	8001f60 <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff ff44 	bl	80004f8 <LcdWriteReg>
	HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f001 f9b6 	bl	80019e4 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 8000678:	20cb      	movs	r0, #203	; 0xcb
 800067a:	f7ff ff3d 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x39);
 800067e:	2039      	movs	r0, #57	; 0x39
 8000680:	f7ff ff64 	bl	800054c <LcdWriteData>
	LcdWriteData(0x2C);
 8000684:	202c      	movs	r0, #44	; 0x2c
 8000686:	f7ff ff61 	bl	800054c <LcdWriteData>
	LcdWriteData(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff5e 	bl	800054c <LcdWriteData>
	LcdWriteData(0x34);
 8000690:	2034      	movs	r0, #52	; 0x34
 8000692:	f7ff ff5b 	bl	800054c <LcdWriteData>
	LcdWriteData(0x02);
 8000696:	2002      	movs	r0, #2
 8000698:	f7ff ff58 	bl	800054c <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 800069c:	20cf      	movs	r0, #207	; 0xcf
 800069e:	f7ff ff2b 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff52 	bl	800054c <LcdWriteData>
	LcdWriteData(0xC1);
 80006a8:	20c1      	movs	r0, #193	; 0xc1
 80006aa:	f7ff ff4f 	bl	800054c <LcdWriteData>
	LcdWriteData(0x30);
 80006ae:	2030      	movs	r0, #48	; 0x30
 80006b0:	f7ff ff4c 	bl	800054c <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 80006b4:	20e8      	movs	r0, #232	; 0xe8
 80006b6:	f7ff ff1f 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x85);
 80006ba:	2085      	movs	r0, #133	; 0x85
 80006bc:	f7ff ff46 	bl	800054c <LcdWriteData>
	LcdWriteData(0x00);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ff43 	bl	800054c <LcdWriteData>
	LcdWriteData(0x78);
 80006c6:	2078      	movs	r0, #120	; 0x78
 80006c8:	f7ff ff40 	bl	800054c <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 80006cc:	20ea      	movs	r0, #234	; 0xea
 80006ce:	f7ff ff13 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x00);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f7ff ff3a 	bl	800054c <LcdWriteData>
	LcdWriteData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ff37 	bl	800054c <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 80006de:	20ed      	movs	r0, #237	; 0xed
 80006e0:	f7ff ff0a 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x64);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f7ff ff31 	bl	800054c <LcdWriteData>
	LcdWriteData(0x03);
 80006ea:	2003      	movs	r0, #3
 80006ec:	f7ff ff2e 	bl	800054c <LcdWriteData>
	LcdWriteData(0x12);
 80006f0:	2012      	movs	r0, #18
 80006f2:	f7ff ff2b 	bl	800054c <LcdWriteData>
	LcdWriteData(0x81);
 80006f6:	2081      	movs	r0, #129	; 0x81
 80006f8:	f7ff ff28 	bl	800054c <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80006fc:	20f7      	movs	r0, #247	; 0xf7
 80006fe:	f7ff fefb 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x20);
 8000702:	2020      	movs	r0, #32
 8000704:	f7ff ff22 	bl	800054c <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 8000708:	20c0      	movs	r0, #192	; 0xc0
 800070a:	f7ff fef5 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x23);
 800070e:	2023      	movs	r0, #35	; 0x23
 8000710:	f7ff ff1c 	bl	800054c <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 8000714:	20c1      	movs	r0, #193	; 0xc1
 8000716:	f7ff feef 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x10);
 800071a:	2010      	movs	r0, #16
 800071c:	f7ff ff16 	bl	800054c <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 8000720:	20c5      	movs	r0, #197	; 0xc5
 8000722:	f7ff fee9 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x3E);
 8000726:	203e      	movs	r0, #62	; 0x3e
 8000728:	f7ff ff10 	bl	800054c <LcdWriteData>
	LcdWriteData(0x28);
 800072c:	2028      	movs	r0, #40	; 0x28
 800072e:	f7ff ff0d 	bl	800054c <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 8000732:	20c7      	movs	r0, #199	; 0xc7
 8000734:	f7ff fee0 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x86);
 8000738:	2086      	movs	r0, #134	; 0x86
 800073a:	f7ff ff07 	bl	800054c <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 800073e:	2036      	movs	r0, #54	; 0x36
 8000740:	f7ff feda 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x48);
 8000744:	2048      	movs	r0, #72	; 0x48
 8000746:	f7ff ff01 	bl	800054c <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 800074a:	203a      	movs	r0, #58	; 0x3a
 800074c:	f7ff fed4 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x55);
 8000750:	2055      	movs	r0, #85	; 0x55
 8000752:	f7ff fefb 	bl	800054c <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 8000756:	20b1      	movs	r0, #177	; 0xb1
 8000758:	f7ff fece 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fef5 	bl	800054c <LcdWriteData>
	LcdWriteData(0x18);
 8000762:	2018      	movs	r0, #24
 8000764:	f7ff fef2 	bl	800054c <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 8000768:	20b6      	movs	r0, #182	; 0xb6
 800076a:	f7ff fec5 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x08);
 800076e:	2008      	movs	r0, #8
 8000770:	f7ff feec 	bl	800054c <LcdWriteData>
	LcdWriteData(0x82);
 8000774:	2082      	movs	r0, #130	; 0x82
 8000776:	f7ff fee9 	bl	800054c <LcdWriteData>
	LcdWriteData(0x27);
 800077a:	2027      	movs	r0, #39	; 0x27
 800077c:	f7ff fee6 	bl	800054c <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 8000780:	20f2      	movs	r0, #242	; 0xf2
 8000782:	f7ff feb9 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x00);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fee0 	bl	800054c <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 800078c:	2026      	movs	r0, #38	; 0x26
 800078e:	f7ff feb3 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x01);
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff feda 	bl	800054c <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 8000798:	20e0      	movs	r0, #224	; 0xe0
 800079a:	f7ff fead 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x0F);
 800079e:	200f      	movs	r0, #15
 80007a0:	f7ff fed4 	bl	800054c <LcdWriteData>
	LcdWriteData(0x31);
 80007a4:	2031      	movs	r0, #49	; 0x31
 80007a6:	f7ff fed1 	bl	800054c <LcdWriteData>
	LcdWriteData(0x2B);
 80007aa:	202b      	movs	r0, #43	; 0x2b
 80007ac:	f7ff fece 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0C);
 80007b0:	200c      	movs	r0, #12
 80007b2:	f7ff fecb 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0E);
 80007b6:	200e      	movs	r0, #14
 80007b8:	f7ff fec8 	bl	800054c <LcdWriteData>
	LcdWriteData(0x08);
 80007bc:	2008      	movs	r0, #8
 80007be:	f7ff fec5 	bl	800054c <LcdWriteData>
	LcdWriteData(0x4E);
 80007c2:	204e      	movs	r0, #78	; 0x4e
 80007c4:	f7ff fec2 	bl	800054c <LcdWriteData>
	LcdWriteData(0xF1);
 80007c8:	20f1      	movs	r0, #241	; 0xf1
 80007ca:	f7ff febf 	bl	800054c <LcdWriteData>
	LcdWriteData(0x37);
 80007ce:	2037      	movs	r0, #55	; 0x37
 80007d0:	f7ff febc 	bl	800054c <LcdWriteData>
	LcdWriteData(0x07);
 80007d4:	2007      	movs	r0, #7
 80007d6:	f7ff feb9 	bl	800054c <LcdWriteData>
	LcdWriteData(0x10);
 80007da:	2010      	movs	r0, #16
 80007dc:	f7ff feb6 	bl	800054c <LcdWriteData>
	LcdWriteData(0x03);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f7ff feb3 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0E);
 80007e6:	200e      	movs	r0, #14
 80007e8:	f7ff feb0 	bl	800054c <LcdWriteData>
	LcdWriteData(0x09);
 80007ec:	2009      	movs	r0, #9
 80007ee:	f7ff fead 	bl	800054c <LcdWriteData>
	LcdWriteData(0x00);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff feaa 	bl	800054c <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80007f8:	20e1      	movs	r0, #225	; 0xe1
 80007fa:	f7ff fe7d 	bl	80004f8 <LcdWriteReg>
	LcdWriteData(0x00);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fea4 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0E);
 8000804:	200e      	movs	r0, #14
 8000806:	f7ff fea1 	bl	800054c <LcdWriteData>
	LcdWriteData(0x14);
 800080a:	2014      	movs	r0, #20
 800080c:	f7ff fe9e 	bl	800054c <LcdWriteData>
	LcdWriteData(0x03);
 8000810:	2003      	movs	r0, #3
 8000812:	f7ff fe9b 	bl	800054c <LcdWriteData>
	LcdWriteData(0x11);
 8000816:	2011      	movs	r0, #17
 8000818:	f7ff fe98 	bl	800054c <LcdWriteData>
	LcdWriteData(0x07);
 800081c:	2007      	movs	r0, #7
 800081e:	f7ff fe95 	bl	800054c <LcdWriteData>
	LcdWriteData(0x31);
 8000822:	2031      	movs	r0, #49	; 0x31
 8000824:	f7ff fe92 	bl	800054c <LcdWriteData>
	LcdWriteData(0xC1);
 8000828:	20c1      	movs	r0, #193	; 0xc1
 800082a:	f7ff fe8f 	bl	800054c <LcdWriteData>
	LcdWriteData(0x48);
 800082e:	2048      	movs	r0, #72	; 0x48
 8000830:	f7ff fe8c 	bl	800054c <LcdWriteData>
	LcdWriteData(0x08);
 8000834:	2008      	movs	r0, #8
 8000836:	f7ff fe89 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0F);
 800083a:	200f      	movs	r0, #15
 800083c:	f7ff fe86 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0C);
 8000840:	200c      	movs	r0, #12
 8000842:	f7ff fe83 	bl	800054c <LcdWriteData>
	LcdWriteData(0x31);
 8000846:	2031      	movs	r0, #49	; 0x31
 8000848:	f7ff fe80 	bl	800054c <LcdWriteData>
	LcdWriteData(0x36);
 800084c:	2036      	movs	r0, #54	; 0x36
 800084e:	f7ff fe7d 	bl	800054c <LcdWriteData>
	LcdWriteData(0x0F);
 8000852:	200f      	movs	r0, #15
 8000854:	f7ff fe7a 	bl	800054c <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 8000858:	2011      	movs	r0, #17
 800085a:	f7ff fe4d 	bl	80004f8 <LcdWriteReg>
	HAL_Delay(120);
 800085e:	2078      	movs	r0, #120	; 0x78
 8000860:	f001 f8c0 	bl	80019e4 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 8000864:	2029      	movs	r0, #41	; 0x29
 8000866:	f7ff fe47 	bl	80004f8 <LcdWriteReg>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020800 	.word	0x40020800

08000878 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b0a0      	sub	sp, #128	; 0x80
 800087c:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800087e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2268      	movs	r2, #104	; 0x68
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f00b f9f9 	bl	800bc8c <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);//16bit color flexcolor driver
 800089a:	2300      	movs	r3, #0
 800089c:	2200      	movs	r2, #0
 800089e:	4916      	ldr	r1, [pc, #88]	; (80008f8 <LCD_X_Config+0x80>)
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <LCD_X_Config+0x84>)
 80008a2:	f006 fe91 	bl	80075c8 <GUI_DEVICE_CreateAndLink>
 80008a6:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 80008a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008ac:	21f0      	movs	r1, #240	; 0xf0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f006 fd30 	bl	8007314 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 80008b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008b8:	21f0      	movs	r1, #240	; 0xf0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f006 fd12 	bl	80072e4 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY;
 80008c0:	2304      	movs	r3, #4
 80008c2:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 80008c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008c8:	4619      	mov	r1, r3
 80008ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80008cc:	f006 fcd3 	bl	8007276 <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LCD_X_Config+0x88>)
 80008d2:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <LCD_X_Config+0x8c>)
 80008d6:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <LCD_X_Config+0x90>)
 80008da:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <LCD_X_Config+0x94>)
 80008de:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <LCD_X_Config+0x98>)
 80008e2:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 80008e4:	4639      	mov	r1, r7
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <LCD_X_Config+0x9c>)
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LCD_X_Config+0xa0>)
 80008ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80008ec:	f006 fce1 	bl	80072b2 <GUIDRV_FlexColor_SetFunc>
}
 80008f0:	bf00      	nop
 80008f2:	3780      	adds	r7, #128	; 0x80
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	0800c91c 	.word	0x0800c91c
 80008fc:	0800c8e0 	.word	0x0800c8e0
 8000900:	080004f9 	.word	0x080004f9
 8000904:	0800054d 	.word	0x0800054d
 8000908:	08000591 	.word	0x08000591
 800090c:	0800053d 	.word	0x0800053d
 8000910:	080005dd 	.word	0x080005dd
 8000914:	08006c39 	.word	0x08006c39
 8000918:	08006535 	.word	0x08006535

0800091c <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d103      	bne.n	8000936 <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 800092e:	f7ff fe67 	bl	8000600 <LcdInit>
    return 0;
 8000932:	2300      	movs	r3, #0
 8000934:	e003      	b.n	800093e <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800093c:	697b      	ldr	r3, [r7, #20]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <SELECT+0x1c>)
 8000954:	f001 fb04 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f001 f843 	bl	80019e4 <HAL_Delay>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40020400 	.word	0x40020400

08000968 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <DESELECT+0x1c>)
 8000974:	f001 faf4 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f001 f833 	bl	80019e4 <HAL_Delay>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020400 	.word	0x40020400

08000988 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000992:	bf00      	nop
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SPI_TxByte+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d1f8      	bne.n	8000994 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80009a2:	1df9      	adds	r1, r7, #7
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	2201      	movs	r2, #1
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <SPI_TxByte+0x30>)
 80009aa:	f001 ff85 	bl	80028b8 <HAL_SPI_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20002a04 	.word	0x20002a04

080009bc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009c8:	bf00      	nop
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <SPI_TxBuffer+0x30>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d1f8      	bne.n	80009ca <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <SPI_TxBuffer+0x30>)
 80009e0:	f001 ff6a 	bl	80028b8 <HAL_SPI_Transmit>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20002a04 	.word	0x20002a04

080009f0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009f6:	23ff      	movs	r3, #255	; 0xff
 80009f8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009fa:	bf00      	nop
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <SPI_RxByte+0x34>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d1f8      	bne.n	80009fc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a0a:	1dba      	adds	r2, r7, #6
 8000a0c:	1df9      	adds	r1, r7, #7
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2301      	movs	r3, #1
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <SPI_RxByte+0x34>)
 8000a16:	f002 f883 	bl	8002b20 <HAL_SPI_TransmitReceive>

	return data;
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20002a04 	.word	0x20002a04

08000a28 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000a30:	f7ff ffde 	bl	80009f0 <SPI_RxByte>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	701a      	strb	r2, [r3, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <SD_ReadyWait+0x30>)
 8000a4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a50:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000a52:	f7ff ffcd 	bl	80009f0 <SPI_RxByte>
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2bff      	cmp	r3, #255	; 0xff
 8000a5e:	d003      	beq.n	8000a68 <SD_ReadyWait+0x24>
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SD_ReadyWait+0x30>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f4      	bne.n	8000a52 <SD_ReadyWait+0xe>

	return res;
 8000a68:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20002a00 	.word	0x20002a00

08000a78 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a7e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a82:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a84:	f7ff ff70 	bl	8000968 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	e005      	b.n	8000a9a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	f7ff ff7a 	bl	8000988 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b09      	cmp	r3, #9
 8000a9e:	ddf6      	ble.n	8000a8e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000aa0:	f7ff ff52 	bl	8000948 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ab8:	2395      	movs	r3, #149	; 0x95
 8000aba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000abc:	463b      	mov	r3, r7
 8000abe:	2106      	movs	r1, #6
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff7b 	bl	80009bc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ac6:	e002      	b.n	8000ace <SD_PowerOn+0x56>
	{
		cnt--;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ace:	f7ff ff8f 	bl	80009f0 <SPI_RxByte>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <SD_PowerOn+0x66>
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f4      	bne.n	8000ac8 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ade:	f7ff ff43 	bl	8000968 <DESELECT>
	SPI_TxByte(0XFF);
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	f7ff ff50 	bl	8000988 <SPI_TxByte>

	PowerFlag = 1;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <SD_PowerOn+0x80>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20002889 	.word	0x20002889

08000afc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <SD_PowerOff+0x14>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20002889 	.word	0x20002889

08000b14 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <SD_CheckPower+0x14>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20002889 	.word	0x20002889

08000b2c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <SD_RxDataBlock+0x58>)
 8000b38:	22c8      	movs	r2, #200	; 0xc8
 8000b3a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000b3c:	f7ff ff58 	bl	80009f0 <SPI_RxByte>
 8000b40:	4603      	mov	r3, r0
 8000b42:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2bff      	cmp	r3, #255	; 0xff
 8000b48:	d103      	bne.n	8000b52 <SD_RxDataBlock+0x26>
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <SD_RxDataBlock+0x58>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f4      	bne.n	8000b3c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	2bfe      	cmp	r3, #254	; 0xfe
 8000b56:	d001      	beq.n	8000b5c <SD_RxDataBlock+0x30>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e00f      	b.n	8000b7c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff60 	bl	8000a28 <SPI_RxBytePtr>
	} while(len--);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	603a      	str	r2, [r7, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f4      	bne.n	8000b5c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b72:	f7ff ff3d 	bl	80009f0 <SPI_RxByte>
	SPI_RxByte();
 8000b76:	f7ff ff3b 	bl	80009f0 <SPI_RxByte>

	return TRUE;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20002a02 	.word	0x20002a02

08000b88 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b98:	f7ff ff54 	bl	8000a44 <SD_ReadyWait>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
 8000ba0:	d001      	beq.n	8000ba6 <SD_TxDataBlock+0x1e>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e02f      	b.n	8000c06 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff feed 	bl	8000988 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2bfd      	cmp	r3, #253	; 0xfd
 8000bb2:	d020      	beq.n	8000bf6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff feff 	bl	80009bc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000bbe:	f7ff ff17 	bl	80009f0 <SPI_RxByte>
		SPI_RxByte();
 8000bc2:	f7ff ff15 	bl	80009f0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000bc6:	e00b      	b.n	8000be0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000bc8:	f7ff ff12 	bl	80009f0 <SPI_RxByte>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	f003 031f 	and.w	r3, r3, #31
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d006      	beq.n	8000be8 <SD_TxDataBlock+0x60>
			i++;
 8000bda:	7bbb      	ldrb	r3, [r7, #14]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	2b40      	cmp	r3, #64	; 0x40
 8000be4:	d9f0      	bls.n	8000bc8 <SD_TxDataBlock+0x40>
 8000be6:	e000      	b.n	8000bea <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000be8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000bea:	bf00      	nop
 8000bec:	f7ff ff00 	bl	80009f0 <SPI_RxByte>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0fa      	beq.n	8000bec <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	2b05      	cmp	r3, #5
 8000bfe:	d101      	bne.n	8000c04 <SD_TxDataBlock+0x7c>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b084      	sub	sp, #16
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	6039      	str	r1, [r7, #0]
 8000c18:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c1a:	f7ff ff13 	bl	8000a44 <SD_ReadyWait>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2bff      	cmp	r3, #255	; 0xff
 8000c22:	d001      	beq.n	8000c28 <SD_SendCmd+0x1a>
 8000c24:	23ff      	movs	r3, #255	; 0xff
 8000c26:	e042      	b.n	8000cae <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff feac 	bl	8000988 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	0e1b      	lsrs	r3, r3, #24
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fea6 	bl	8000988 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fea0 	bl	8000988 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe9a 	bl	8000988 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe95 	bl	8000988 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b40      	cmp	r3, #64	; 0x40
 8000c62:	d102      	bne.n	8000c6a <SD_SendCmd+0x5c>
 8000c64:	2395      	movs	r3, #149	; 0x95
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e007      	b.n	8000c7a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b48      	cmp	r3, #72	; 0x48
 8000c6e:	d102      	bne.n	8000c76 <SD_SendCmd+0x68>
 8000c70:	2387      	movs	r3, #135	; 0x87
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <SD_SendCmd+0x6c>
	else crc = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe83 	bl	8000988 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b4c      	cmp	r3, #76	; 0x4c
 8000c86:	d101      	bne.n	8000c8c <SD_SendCmd+0x7e>
 8000c88:	f7ff feb2 	bl	80009f0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c90:	f7ff feae 	bl	80009f0 <SPI_RxByte>
 8000c94:	4603      	mov	r3, r0
 8000c96:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da05      	bge.n	8000cac <SD_SendCmd+0x9e>
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	73bb      	strb	r3, [r7, #14]
 8000ca6:	7bbb      	ldrb	r3, [r7, #14]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f1      	bne.n	8000c90 <SD_SendCmd+0x82>

	return res;
 8000cac:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SD_disk_initialize+0x14>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e0d1      	b.n	8000e70 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000ccc:	4b6a      	ldr	r3, [pc, #424]	; (8000e78 <SD_disk_initialize+0x1c0>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <SD_disk_initialize+0x2a>
 8000cda:	4b67      	ldr	r3, [pc, #412]	; (8000e78 <SD_disk_initialize+0x1c0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	e0c6      	b.n	8000e70 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000ce2:	f7ff fec9 	bl	8000a78 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000ce6:	f7ff fe2f 	bl	8000948 <SELECT>

	/* check disk type */
	type = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2040      	movs	r0, #64	; 0x40
 8000cf2:	f7ff ff8c 	bl	8000c0e <SD_SendCmd>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	f040 80a1 	bne.w	8000e40 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <SD_disk_initialize+0x1c4>)
 8000d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d04:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d0a:	2048      	movs	r0, #72	; 0x48
 8000d0c:	f7ff ff7f 	bl	8000c0e <SD_SendCmd>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d155      	bne.n	8000dc2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e00c      	b.n	8000d36 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000d1c:	7bfc      	ldrb	r4, [r7, #15]
 8000d1e:	f7ff fe67 	bl	80009f0 <SPI_RxByte>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4423      	add	r3, r4
 8000d2c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	3301      	adds	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d9ef      	bls.n	8000d1c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000d3c:	7abb      	ldrb	r3, [r7, #10]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d17e      	bne.n	8000e40 <SD_disk_initialize+0x188>
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	2baa      	cmp	r3, #170	; 0xaa
 8000d46:	d17b      	bne.n	8000e40 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2077      	movs	r0, #119	; 0x77
 8000d4c:	f7ff ff5f 	bl	8000c0e <SD_SendCmd>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d807      	bhi.n	8000d66 <SD_disk_initialize+0xae>
 8000d56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d5a:	2069      	movs	r0, #105	; 0x69
 8000d5c:	f7ff ff57 	bl	8000c0e <SD_SendCmd>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d66:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <SD_disk_initialize+0x1c4>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1ec      	bne.n	8000d48 <SD_disk_initialize+0x90>
 8000d6e:	e000      	b.n	8000d72 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d70:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <SD_disk_initialize+0x1c4>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d062      	beq.n	8000e40 <SD_disk_initialize+0x188>
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	207a      	movs	r0, #122	; 0x7a
 8000d7e:	f7ff ff46 	bl	8000c0e <SD_SendCmd>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d15b      	bne.n	8000e40 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e00c      	b.n	8000da8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000d8e:	7bfc      	ldrb	r4, [r7, #15]
 8000d90:	f7ff fe2e 	bl	80009f0 <SPI_RxByte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4423      	add	r3, r4
 8000d9e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d9ef      	bls.n	8000d8e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SD_disk_initialize+0x104>
 8000db8:	230c      	movs	r3, #12
 8000dba:	e000      	b.n	8000dbe <SD_disk_initialize+0x106>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	e03e      	b.n	8000e40 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2077      	movs	r0, #119	; 0x77
 8000dc6:	f7ff ff22 	bl	8000c0e <SD_SendCmd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d808      	bhi.n	8000de2 <SD_disk_initialize+0x12a>
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2069      	movs	r0, #105	; 0x69
 8000dd4:	f7ff ff1b 	bl	8000c0e <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d801      	bhi.n	8000de2 <SD_disk_initialize+0x12a>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e000      	b.n	8000de4 <SD_disk_initialize+0x12c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d10e      	bne.n	8000e0a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000dec:	2100      	movs	r1, #0
 8000dee:	2077      	movs	r0, #119	; 0x77
 8000df0:	f7ff ff0d 	bl	8000c0e <SD_SendCmd>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d80e      	bhi.n	8000e18 <SD_disk_initialize+0x160>
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2069      	movs	r0, #105	; 0x69
 8000dfe:	f7ff ff06 	bl	8000c0e <SD_SendCmd>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d107      	bne.n	8000e18 <SD_disk_initialize+0x160>
 8000e08:	e00c      	b.n	8000e24 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2041      	movs	r0, #65	; 0x41
 8000e0e:	f7ff fefe 	bl	8000c0e <SD_SendCmd>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <SD_disk_initialize+0x1c4>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e2      	bne.n	8000de6 <SD_disk_initialize+0x12e>
 8000e20:	e000      	b.n	8000e24 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e22:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <SD_disk_initialize+0x1c4>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <SD_disk_initialize+0x184>
 8000e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e30:	2050      	movs	r0, #80	; 0x50
 8000e32:	f7ff feec 	bl	8000c0e <SD_SendCmd>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SD_disk_initialize+0x188>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000e40:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <SD_disk_initialize+0x1c8>)
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000e46:	f7ff fd8f 	bl	8000968 <DESELECT>
	SPI_RxByte();
 8000e4a:	f7ff fdd1 	bl	80009f0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <SD_disk_initialize+0x1c0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SD_disk_initialize+0x1c0>)
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e001      	b.n	8000e6a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e66:	f7ff fe49 	bl	8000afc <SD_PowerOff>
	}

	return Stat;
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <SD_disk_initialize+0x1c0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20002a02 	.word	0x20002a02
 8000e80:	20002888 	.word	0x20002888

08000e84 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SD_disk_status+0x14>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e002      	b.n	8000e9e <SD_disk_status+0x1a>
	return Stat;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SD_disk_status+0x28>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000

08000eb0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <SD_disk_read+0x1c>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <SD_disk_read+0x20>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e051      	b.n	8000f74 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <SD_disk_read+0xcc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SD_disk_read+0x32>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e048      	b.n	8000f74 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <SD_disk_read+0xd0>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <SD_disk_read+0x44>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ef4:	f7ff fd28 	bl	8000948 <SELECT>

	if (count == 1)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d111      	bne.n	8000f22 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2051      	movs	r0, #81	; 0x51
 8000f02:	f7ff fe84 	bl	8000c0e <SD_SendCmd>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d129      	bne.n	8000f60 <SD_disk_read+0xb0>
 8000f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f10:	68b8      	ldr	r0, [r7, #8]
 8000f12:	f7ff fe0b 	bl	8000b2c <SD_RxDataBlock>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d021      	beq.n	8000f60 <SD_disk_read+0xb0>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	e01e      	b.n	8000f60 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	2052      	movs	r0, #82	; 0x52
 8000f26:	f7ff fe72 	bl	8000c0e <SD_SendCmd>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d117      	bne.n	8000f60 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff fdf9 	bl	8000b2c <SD_RxDataBlock>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00a      	beq.n	8000f56 <SD_disk_read+0xa6>
				buff += 512;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1ed      	bne.n	8000f30 <SD_disk_read+0x80>
 8000f54:	e000      	b.n	8000f58 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f56:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	204c      	movs	r0, #76	; 0x4c
 8000f5c:	f7ff fe57 	bl	8000c0e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f60:	f7ff fd02 	bl	8000968 <DESELECT>
	SPI_RxByte();
 8000f64:	f7ff fd44 	bl	80009f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20002888 	.word	0x20002888

08000f84 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <SD_disk_write+0x1c>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <SD_disk_write+0x20>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	e06b      	b.n	800107c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <SD_disk_write+0x100>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SD_disk_write+0x32>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e062      	b.n	800107c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <SD_disk_write+0x100>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SD_disk_write+0x44>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e059      	b.n	800107c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <SD_disk_write+0x104>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <SD_disk_write+0x56>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	607b      	str	r3, [r7, #4]

	SELECT();
 8000fda:	f7ff fcb5 	bl	8000948 <SELECT>

	if (count == 1)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d110      	bne.n	8001006 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	2058      	movs	r0, #88	; 0x58
 8000fe8:	f7ff fe11 	bl	8000c0e <SD_SendCmd>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d13a      	bne.n	8001068 <SD_disk_write+0xe4>
 8000ff2:	21fe      	movs	r1, #254	; 0xfe
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f7ff fdc7 	bl	8000b88 <SD_TxDataBlock>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d033      	beq.n	8001068 <SD_disk_write+0xe4>
			count = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	e030      	b.n	8001068 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <SD_disk_write+0x104>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001012:	2100      	movs	r1, #0
 8001014:	2077      	movs	r0, #119	; 0x77
 8001016:	f7ff fdfa 	bl	8000c0e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	2057      	movs	r0, #87	; 0x57
 800101e:	f7ff fdf6 	bl	8000c0e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2059      	movs	r0, #89	; 0x59
 8001026:	f7ff fdf2 	bl	8000c0e <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d11b      	bne.n	8001068 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001030:	21fc      	movs	r1, #252	; 0xfc
 8001032:	68b8      	ldr	r0, [r7, #8]
 8001034:	f7ff fda8 	bl	8000b88 <SD_TxDataBlock>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00a      	beq.n	8001054 <SD_disk_write+0xd0>
				buff += 512;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001044:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3b01      	subs	r3, #1
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1ee      	bne.n	8001030 <SD_disk_write+0xac>
 8001052:	e000      	b.n	8001056 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001054:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001056:	21fd      	movs	r1, #253	; 0xfd
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fd95 	bl	8000b88 <SD_TxDataBlock>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <SD_disk_write+0xe4>
			{
				count = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001068:	f7ff fc7e 	bl	8000968 <DESELECT>
	SPI_RxByte();
 800106c:	f7ff fcc0 	bl	80009f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf14      	ite	ne
 8001076:	2301      	movne	r3, #1
 8001078:	2300      	moveq	r3, #0
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20002888 	.word	0x20002888

0800108c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	603a      	str	r2, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	460b      	mov	r3, r1
 800109a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SD_disk_ioctl+0x1e>
 80010a6:	2304      	movs	r3, #4
 80010a8:	e113      	b.n	80012d2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d121      	bne.n	80010fa <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d009      	beq.n	80010d2 <SD_disk_ioctl+0x46>
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d00d      	beq.n	80010de <SD_disk_ioctl+0x52>
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d115      	bne.n	80010f2 <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80010c6:	f7ff fd19 	bl	8000afc <SD_PowerOff>
			res = RES_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010d0:	e0fd      	b.n	80012ce <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80010d2:	f7ff fcd1 	bl	8000a78 <SD_PowerOn>
			res = RES_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010dc:	e0f7      	b.n	80012ce <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	1c5c      	adds	r4, r3, #1
 80010e2:	f7ff fd17 	bl	8000b14 <SD_CheckPower>
 80010e6:	4603      	mov	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010f0:	e0ed      	b.n	80012ce <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010f2:	2304      	movs	r3, #4
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010f8:	e0e9      	b.n	80012ce <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010fa:	4b78      	ldr	r3, [pc, #480]	; (80012dc <SD_disk_ioctl+0x250>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SD_disk_ioctl+0x80>
 8001108:	2303      	movs	r3, #3
 800110a:	e0e2      	b.n	80012d2 <SD_disk_ioctl+0x246>

		SELECT();
 800110c:	f7ff fc1c 	bl	8000948 <SELECT>

		switch (ctrl)
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	2b0d      	cmp	r3, #13
 8001114:	f200 80cc 	bhi.w	80012b0 <SD_disk_ioctl+0x224>
 8001118:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <SD_disk_ioctl+0x94>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	0800121b 	.word	0x0800121b
 8001124:	08001159 	.word	0x08001159
 8001128:	0800120b 	.word	0x0800120b
 800112c:	080012b1 	.word	0x080012b1
 8001130:	080012b1 	.word	0x080012b1
 8001134:	080012b1 	.word	0x080012b1
 8001138:	080012b1 	.word	0x080012b1
 800113c:	080012b1 	.word	0x080012b1
 8001140:	080012b1 	.word	0x080012b1
 8001144:	080012b1 	.word	0x080012b1
 8001148:	080012b1 	.word	0x080012b1
 800114c:	0800122d 	.word	0x0800122d
 8001150:	08001251 	.word	0x08001251
 8001154:	08001275 	.word	0x08001275
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001158:	2100      	movs	r1, #0
 800115a:	2049      	movs	r0, #73	; 0x49
 800115c:	f7ff fd57 	bl	8000c0e <SD_SendCmd>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 80a8 	bne.w	80012b8 <SD_disk_ioctl+0x22c>
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2110      	movs	r1, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fcdc 	bl	8000b2c <SD_RxDataBlock>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 809e 	beq.w	80012b8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	099b      	lsrs	r3, r3, #6
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10e      	bne.n	80011a4 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001186:	7d7b      	ldrb	r3, [r7, #21]
 8001188:	b29a      	uxth	r2, r3
 800118a:	7d3b      	ldrb	r3, [r7, #20]
 800118c:	b29b      	uxth	r3, r3
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b29b      	uxth	r3, r3
 8001196:	3301      	adds	r3, #1
 8001198:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800119a:	8bfb      	ldrh	r3, [r7, #30]
 800119c:	029a      	lsls	r2, r3, #10
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e02e      	b.n	8001202 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011a4:	7c7b      	ldrb	r3, [r7, #17]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	7dbb      	ldrb	r3, [r7, #22]
 80011ae:	09db      	lsrs	r3, r3, #7
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0306 	and.w	r3, r3, #6
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3302      	adds	r3, #2
 80011c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	099b      	lsrs	r3, r3, #6
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	7cfb      	ldrb	r3, [r7, #19]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b29a      	uxth	r2, r3
 80011e0:	7cbb      	ldrb	r3, [r7, #18]
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011f4:	8bfa      	ldrh	r2, [r7, #30]
 80011f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011fa:	3b09      	subs	r3, #9
 80011fc:	409a      	lsls	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001208:	e056      	b.n	80012b8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001210:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001218:	e055      	b.n	80012c6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800121a:	f7ff fc13 	bl	8000a44 <SD_ReadyWait>
 800121e:	4603      	mov	r3, r0
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d14b      	bne.n	80012bc <SD_disk_ioctl+0x230>
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800122a:	e047      	b.n	80012bc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800122c:	2100      	movs	r1, #0
 800122e:	2049      	movs	r0, #73	; 0x49
 8001230:	f7ff fced 	bl	8000c0e <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d142      	bne.n	80012c0 <SD_disk_ioctl+0x234>
 800123a:	2110      	movs	r1, #16
 800123c:	6a38      	ldr	r0, [r7, #32]
 800123e:	f7ff fc75 	bl	8000b2c <SD_RxDataBlock>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d03b      	beq.n	80012c0 <SD_disk_ioctl+0x234>
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800124e:	e037      	b.n	80012c0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001250:	2100      	movs	r1, #0
 8001252:	204a      	movs	r0, #74	; 0x4a
 8001254:	f7ff fcdb 	bl	8000c0e <SD_SendCmd>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d132      	bne.n	80012c4 <SD_disk_ioctl+0x238>
 800125e:	2110      	movs	r1, #16
 8001260:	6a38      	ldr	r0, [r7, #32]
 8001262:	f7ff fc63 	bl	8000b2c <SD_RxDataBlock>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d02b      	beq.n	80012c4 <SD_disk_ioctl+0x238>
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001272:	e027      	b.n	80012c4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001274:	2100      	movs	r1, #0
 8001276:	207a      	movs	r0, #122	; 0x7a
 8001278:	f7ff fcc9 	bl	8000c0e <SD_SendCmd>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001282:	2300      	movs	r3, #0
 8001284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001288:	e00b      	b.n	80012a2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800128a:	6a3c      	ldr	r4, [r7, #32]
 800128c:	1c63      	adds	r3, r4, #1
 800128e:	623b      	str	r3, [r7, #32]
 8001290:	f7ff fbae 	bl	80009f0 <SPI_RxByte>
 8001294:	4603      	mov	r3, r0
 8001296:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800129c:	3301      	adds	r3, #1
 800129e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d9ef      	bls.n	800128a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80012b0:	2304      	movs	r3, #4
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012b6:	e006      	b.n	80012c6 <SD_disk_ioctl+0x23a>
			break;
 80012b8:	bf00      	nop
 80012ba:	e004      	b.n	80012c6 <SD_disk_ioctl+0x23a>
			break;
 80012bc:	bf00      	nop
 80012be:	e002      	b.n	80012c6 <SD_disk_ioctl+0x23a>
			break;
 80012c0:	bf00      	nop
 80012c2:	e000      	b.n	80012c6 <SD_disk_ioctl+0x23a>
			break;
 80012c4:	bf00      	nop
		}

		DESELECT();
 80012c6:	f7ff fb4f 	bl	8000968 <DESELECT>
		SPI_RxByte();
 80012ca:	f7ff fb91 	bl	80009f0 <SPI_RxByte>
	}

	return res;
 80012ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	372c      	adds	r7, #44	; 0x2c
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000

080012e0 <_GetData>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Definitions*/
/*Variables*/

static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
    unsigned int NumBytesRead;
    f_lseek((FIL *) p, Offset); //Set file pointer to the required position
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f004 fc5c 	bl	8005bae <f_lseek>
     * FIL*     fp      -	Pointer to the file object
     * void*    buff    -	Pointer to data buffer
     * UINT     btr     -	Number of bytes to read
     * UINT*    br      -	Pointer to number of bytes read
     */
    f_read((FIL *) p, (void *) _acBuffer, NumBytesReq, &NumBytesRead); //Read data into buffer
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4905      	ldr	r1, [pc, #20]	; (8001314 <_GetData+0x34>)
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f004 fa6e 	bl	80057e0 <f_read>
    *ppData = (const U8 *) _acBuffer; //Set pointer to the buffer
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <_GetData+0x34>)
 8001308:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 800130a:	697b      	ldr	r3, [r7, #20]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20002c94 	.word	0x20002c94

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131c:	f000 faf0 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001320:	f000 f858 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001324:	f000 f940 	bl	80015a8 <MX_GPIO_Init>
  MX_CRC_Init();
 8001328:	f000 f8be 	bl	80014a8 <MX_CRC_Init>
  MX_SPI1_Init();
 800132c:	f000 f8d0 	bl	80014d0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001330:	f001 fe44 	bl	8002fbc <MX_FATFS_Init>
  MX_SPI2_Init();
 8001334:	f000 f902 	bl	800153c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f000 fb53 	bl	80019e4 <HAL_Delay>
  GUI_Init();
 800133e:	f006 fa33 	bl	80077a8 <GUI_Init>

  res = f_mount(&fileSystem, (TCHAR const*) "0:/", 1);
 8001342:	2201      	movs	r2, #1
 8001344:	491c      	ldr	r1, [pc, #112]	; (80013b8 <main+0xa0>)
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <main+0xa4>)
 8001348:	f003 ffba 	bl	80052c0 <f_mount>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <main+0xa8>)
 8001352:	701a      	strb	r2, [r3, #0]
  if(res != FR_OK) while(1);
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <main+0xa8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d000      	beq.n	800135e <main+0x46>
 800135c:	e7fe      	b.n	800135c <main+0x44>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      res = f_open(&ImgFile, file_name[i++], FA_OPEN_EXISTING | FA_READ);
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <main+0xac>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	b2d1      	uxtb	r1, r2
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <main+0xac>)
 8001368:	7011      	strb	r1, [r2, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <main+0xb0>)
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	2201      	movs	r2, #1
 8001374:	4619      	mov	r1, r3
 8001376:	4815      	ldr	r0, [pc, #84]	; (80013cc <main+0xb4>)
 8001378:	f003 ffe8 	bl	800534c <f_open>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <main+0xa8>)
 8001382:	701a      	strb	r2, [r3, #0]
      if (res == FR_OK)
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <main+0xa8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d105      	bne.n	8001398 <main+0x80>
          GUI_BMP_DrawEx(_GetData, &ImgFile, 0, 0);
 800138c:	2300      	movs	r3, #0
 800138e:	2200      	movs	r2, #0
 8001390:	490e      	ldr	r1, [pc, #56]	; (80013cc <main+0xb4>)
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <main+0xb8>)
 8001394:	f007 f808 	bl	80083a8 <GUI_BMP_DrawEx>
      f_close(&ImgFile);
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <main+0xb4>)
 800139a:	f004 fbde 	bl	8005b5a <f_close>

      if(i>=4) i=0;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <main+0xac>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d902      	bls.n	80013ac <main+0x94>
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <main+0xac>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1000);
 80013ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b0:	f000 fb18 	bl	80019e4 <HAL_Delay>
      res = f_open(&ImgFile, file_name[i++], FA_OPEN_EXISTING | FA_READ);
 80013b4:	e7d3      	b.n	800135e <main+0x46>
 80013b6:	bf00      	nop
 80013b8:	0800bce4 	.word	0x0800bce4
 80013bc:	200030ec 	.word	0x200030ec
 80013c0:	20003320 	.word	0x20003320
 80013c4:	2000288a 	.word	0x2000288a
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20002a5c 	.word	0x20002a5c
 80013d0:	080012e1 	.word	0x080012e1

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00a fc52 	bl	800bc8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <SystemClock_Config+0xd0>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <SystemClock_Config+0xd0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001448:	23a8      	movs	r3, #168	; 0xa8
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd9b 	bl	8001f94 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001464:	f000 f916 	bl	8001694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2105      	movs	r1, #5
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fff4 	bl	8002474 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001492:	f000 f8ff 	bl	8001694 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_CRC_Init+0x20>)
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <MX_CRC_Init+0x24>)
 80014b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_CRC_Init+0x20>)
 80014b4:	f000 fb9d 	bl	8001bf2 <HAL_CRC_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80014be:	f000 f8e9 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20002c8c 	.word	0x20002c8c
 80014cc:	40023000 	.word	0x40023000

080014d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_SPI1_Init+0x64>)
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <MX_SPI1_Init+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_SPI1_Init+0x64>)
 80014dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_SPI1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_SPI1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SPI1_Init+0x64>)
 80014fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001500:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_SPI1_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SPI1_Init+0x64>)
 800151c:	220a      	movs	r2, #10
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_SPI1_Init+0x64>)
 8001522:	f001 f965 	bl	80027f0 <HAL_SPI_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800152c:	f000 f8b2 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20003094 	.word	0x20003094
 8001538:	40013000 	.word	0x40013000

0800153c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_SPI2_Init+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_SPI2_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_SPI2_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SPI2_Init+0x64>)
 8001588:	220a      	movs	r2, #10
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_SPI2_Init+0x64>)
 800158e:	f001 f92f 	bl	80027f0 <HAL_SPI_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001598:	f000 f87c 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20002a04 	.word	0x20002a04
 80015a4:	40003800 	.word	0x40003800

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a30      	ldr	r2, [pc, #192]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <MX_GPIO_Init+0xe0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a22      	ldr	r2, [pc, #136]	; (8001688 <MX_GPIO_Init+0xe0>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_GPIO_Init+0xe0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_GPIO_Init+0xe0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <MX_GPIO_Init+0xe0>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_GPIO_Init+0xe0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	210e      	movs	r1, #14
 8001632:	4816      	ldr	r0, [pc, #88]	; (800168c <MX_GPIO_Init+0xe4>)
 8001634:	f000 fc94 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_GPIO_Init+0xe8>)
 8001640:	f000 fc8e 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001644:	230e      	movs	r3, #14
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_GPIO_Init+0xe4>)
 800165c:	f000 fae6 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_GPIO_Init+0xe8>)
 800167a:	f000 fad7 	bl	8001c2c <HAL_GPIO_Init>

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40020800 	.word	0x40020800
 8001690:	40020400 	.word	0x40020400

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169a:	e7fe      	b.n	800169a <Error_Handler+0x6>

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_MspInit+0x4c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_CRC_MspInit+0x3c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10d      	bne.n	800171a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_CRC_MspInit+0x40>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_CRC_MspInit+0x40>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_CRC_MspInit+0x40>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023000 	.word	0x40023000
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_SPI_MspInit+0xe8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12c      	bne.n	80017ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_SPI_MspInit+0xec>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a30      	ldr	r2, [pc, #192]	; (800181c <HAL_SPI_MspInit+0xec>)
 800175c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_SPI_MspInit+0xec>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_SPI_MspInit+0xec>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <HAL_SPI_MspInit+0xec>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_SPI_MspInit+0xec>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800178a:	23e0      	movs	r3, #224	; 0xe0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179a:	2305      	movs	r3, #5
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	481e      	ldr	r0, [pc, #120]	; (8001820 <HAL_SPI_MspInit+0xf0>)
 80017a6:	f000 fa41 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017aa:	e031      	b.n	8001810 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_SPI_MspInit+0xf4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_SPI_MspInit+0xec>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_SPI_MspInit+0xec>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_SPI_MspInit+0xec>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_SPI_MspInit+0xec>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_SPI_MspInit+0xec>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_SPI_MspInit+0xec>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001800:	2305      	movs	r3, #5
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <HAL_SPI_MspInit+0xf8>)
 800180c:	f000 fa0e 	bl	8001c2c <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40013000 	.word	0x40013000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40003800 	.word	0x40003800
 8001828:	40020400 	.word	0x40020400

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f894 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <SystemInit+0x28>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <SystemInit+0x28>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SystemInit+0x28>)
 8001896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189a:	609a      	str	r2, [r3, #8]
#endif
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018b2:	e003      	b.n	80018bc <LoopCopyDataInit>

080018b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ba:	3104      	adds	r1, #4

080018bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c4:	d3f6      	bcc.n	80018b4 <CopyDataInit>
  ldr  r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c8:	e002      	b.n	80018d0 <LoopFillZerobss>

080018ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018cc:	f842 3b04 	str.w	r3, [r2], #4

080018d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d4:	d3f9      	bcc.n	80018ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffd3 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f00a f98f 	bl	800bbfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fd1b 	bl	8001318 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018e8:	0800cd4c 	.word	0x0800cd4c
  ldr  r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f0:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80018f4:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80018f8:	20003948 	.word	0x20003948

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f92f 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff feb2 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f939 	bl	8001bda <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f90f 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000014 	.word	0x20000014
 800199c:	2000001c 	.word	0x2000001c
 80019a0:	20000018 	.word	0x20000018

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000001c 	.word	0x2000001c
 80019c8:	20003324 	.word	0x20003324

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20003324 	.word	0x20003324

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_Delay+0x40>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000001c 	.word	0x2000001c

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	; (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	; 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff8e 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff47 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff5c 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff8e 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5d 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffb0 	bl	8001b48 <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e00e      	b.n	8001c22 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	795b      	ldrb	r3, [r3, #5]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fd69 	bl	80016ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e16b      	b.n	8001f20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 815a 	bne.w	8001f1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d00b      	beq.n	8001c86 <HAL_GPIO_Init+0x5a>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7a:	2b11      	cmp	r3, #17
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0xfc>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80b4 	beq.w	8001f1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5e      	ldr	r2, [pc, #376]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a5a      	ldr	r2, [pc, #360]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02b      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d025      	beq.n	8001e4e <HAL_GPIO_Init+0x222>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <HAL_GPIO_Init+0x21e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4d      	ldr	r2, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4b      	ldr	r2, [pc, #300]	; (8001f54 <HAL_GPIO_Init+0x328>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4934      	ldr	r1, [pc, #208]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae90 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	; 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e25b      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d075      	beq.n	800209e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb2:	4ba3      	ldr	r3, [pc, #652]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4ba0      	ldr	r3, [pc, #640]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d112      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4b9d      	ldr	r3, [pc, #628]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d05b      	beq.n	800209c <HAL_RCC_OscConfig+0x108>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d157      	bne.n	800209c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e236      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x74>
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a90      	ldr	r2, [pc, #576]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a8a      	ldr	r2, [pc, #552]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a87      	ldr	r2, [pc, #540]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 800202c:	4b84      	ldr	r3, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a83      	ldr	r2, [pc, #524]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a80      	ldr	r2, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fcbe 	bl	80019cc <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff fcba 	bl	80019cc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1fb      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xc0>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fcaa 	bl	80019cc <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fca6 	bl	80019cc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1e7      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0xe8>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020aa:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1bb      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b56      	ldr	r3, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4952      	ldr	r1, [pc, #328]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCC_OscConfig+0x2b0>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7ff fc5f 	bl	80019cc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff fc5b 	bl	80019cc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e19c      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4940      	ldr	r1, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_OscConfig+0x2b0>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fc3e 	bl	80019cc <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff fc3a 	bl	80019cc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e17b      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d030      	beq.n	80021e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_OscConfig+0x2b4>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff fc1e 	bl	80019cc <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fc1a 	bl	80019cc <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e15b      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x200>
 80021b2:	e015      	b.n	80021e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_OscConfig+0x2b4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fc07 	bl	80019cc <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff fc03 	bl	80019cc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e144      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a0 	beq.w	800232e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d121      	bne.n	800226e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7ff fbc9 	bl	80019cc <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e011      	b.n	8002262 <HAL_RCC_OscConfig+0x2ce>
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
 800224c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7ff fbbc 	bl	80019cc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0fd      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x4d4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 8002276:	4b7d      	ldr	r3, [pc, #500]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a7c      	ldr	r2, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x32a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 800228c:	4b77      	ldr	r3, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a76      	ldr	r2, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	4b74      	ldr	r3, [pc, #464]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a73      	ldr	r2, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x32a>
 80022a6:	4b71      	ldr	r3, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a70      	ldr	r2, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
 80022b2:	4b6e      	ldr	r3, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a6d      	ldr	r2, [pc, #436]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb81 	bl	80019cc <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7ff fb7d 	bl	80019cc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0bc      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x33a>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb6b 	bl	80019cc <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff fb67 	bl	80019cc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0a6      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b52      	ldr	r3, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a51      	ldr	r2, [pc, #324]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8092 	beq.w	800245c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d05c      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d141      	bne.n	80023d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_RCC_OscConfig+0x4dc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff fb3b 	bl	80019cc <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fb37 	bl	80019cc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e078      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236c:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	4933      	ldr	r1, [pc, #204]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <HAL_RCC_OscConfig+0x4dc>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fb10 	bl	80019cc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff fb0c 	bl	80019cc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04d      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x41c>
 80023ce:	e045      	b.n	800245c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x4dc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff faf9 	bl	80019cc <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff faf5 	bl	80019cc <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e036      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x44a>
 80023fc:	e02e      	b.n	800245c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e029      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	429a      	cmp	r2, r3
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d115      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002432:	4013      	ands	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40007000 	.word	0x40007000
 800246c:	40023800 	.word	0x40023800
 8002470:	42470060 	.word	0x42470060

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7ff fa32 	bl	80019cc <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff fa2e 	bl	80019cc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4601      	mov	r1, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	fa21 f303 	lsr.w	r3, r1, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f992 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	0800bd78 	.word	0x0800bd78
 8002638:	20000014 	.word	0x20000014
 800263c:	20000018 	.word	0x20000018

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b04      	cmp	r3, #4
 8002660:	d007      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x32>
 8002662:	2b08      	cmp	r3, #8
 8002664:	d008      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x38>
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 80b4 	bne.w	80027d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800266e:	60bb      	str	r3, [r7, #8]
       break;
 8002670:	e0b3      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002672:	4b5e      	ldr	r3, [pc, #376]	; (80027ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002674:	60bb      	str	r3, [r7, #8]
      break;
 8002676:	e0b0      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002678:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002682:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04a      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268e:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	ea03 0501 	and.w	r5, r3, r1
 80026a4:	ea04 0602 	and.w	r6, r4, r2
 80026a8:	4629      	mov	r1, r5
 80026aa:	4632      	mov	r2, r6
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f04f 0400 	mov.w	r4, #0
 80026b4:	0154      	lsls	r4, r2, #5
 80026b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ba:	014b      	lsls	r3, r1, #5
 80026bc:	4619      	mov	r1, r3
 80026be:	4622      	mov	r2, r4
 80026c0:	1b49      	subs	r1, r1, r5
 80026c2:	eb62 0206 	sbc.w	r2, r2, r6
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f04f 0400 	mov.w	r4, #0
 80026ce:	0194      	lsls	r4, r2, #6
 80026d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026d4:	018b      	lsls	r3, r1, #6
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	eb64 0402 	sbc.w	r4, r4, r2
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	00e2      	lsls	r2, r4, #3
 80026e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026ea:	00d9      	lsls	r1, r3, #3
 80026ec:	460b      	mov	r3, r1
 80026ee:	4614      	mov	r4, r2
 80026f0:	195b      	adds	r3, r3, r5
 80026f2:	eb44 0406 	adc.w	r4, r4, r6
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	0262      	lsls	r2, r4, #9
 8002700:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002704:	0259      	lsls	r1, r3, #9
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	4618      	mov	r0, r3
 800270c:	4621      	mov	r1, r4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	f7fd fd56 	bl	80001c8 <__aeabi_uldivmod>
 800271c:	4603      	mov	r3, r0
 800271e:	460c      	mov	r4, r1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e049      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002724:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	f04f 0400 	mov.w	r4, #0
 800272e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	ea03 0501 	and.w	r5, r3, r1
 800273a:	ea04 0602 	and.w	r6, r4, r2
 800273e:	4629      	mov	r1, r5
 8002740:	4632      	mov	r2, r6
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f04f 0400 	mov.w	r4, #0
 800274a:	0154      	lsls	r4, r2, #5
 800274c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002750:	014b      	lsls	r3, r1, #5
 8002752:	4619      	mov	r1, r3
 8002754:	4622      	mov	r2, r4
 8002756:	1b49      	subs	r1, r1, r5
 8002758:	eb62 0206 	sbc.w	r2, r2, r6
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f04f 0400 	mov.w	r4, #0
 8002764:	0194      	lsls	r4, r2, #6
 8002766:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800276a:	018b      	lsls	r3, r1, #6
 800276c:	1a5b      	subs	r3, r3, r1
 800276e:	eb64 0402 	sbc.w	r4, r4, r2
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	00e2      	lsls	r2, r4, #3
 800277c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002780:	00d9      	lsls	r1, r3, #3
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	195b      	adds	r3, r3, r5
 8002788:	eb44 0406 	adc.w	r4, r4, r6
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	02a2      	lsls	r2, r4, #10
 8002796:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800279a:	0299      	lsls	r1, r3, #10
 800279c:	460b      	mov	r3, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	4621      	mov	r1, r4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	f7fd fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	60bb      	str	r3, [r7, #8]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027d6:	60bb      	str	r3, [r7, #8]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	68bb      	ldr	r3, [r7, #8]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e056      	b.n	80028b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe ff87 	bl	8001730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	ea42 0103 	orr.w	r1, r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	0c1b      	lsrs	r3, r3, #16
 8002880:	f003 0104 	and.w	r1, r3, #4
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_SPI_Transmit+0x22>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e11e      	b.n	8002b18 <HAL_SPI_Transmit+0x260>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028e2:	f7ff f873 	bl	80019cc <HAL_GetTick>
 80028e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d002      	beq.n	80028fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
 80028fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028fc:	e103      	b.n	8002b06 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_SPI_Transmit+0x52>
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800290e:	e0fa      	b.n	8002b06 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2203      	movs	r2, #3
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002956:	d107      	bne.n	8002968 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002966:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d007      	beq.n	8002986 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298e:	d14b      	bne.n	8002a28 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_Transmit+0xe6>
 8002998:	8afb      	ldrh	r3, [r7, #22]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d13e      	bne.n	8002a1c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	1c9a      	adds	r2, r3, #2
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029c2:	e02b      	b.n	8002a1c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d112      	bne.n	80029f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	1c9a      	adds	r2, r3, #2
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f6:	e011      	b.n	8002a1c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f8:	f7fe ffe8 	bl	80019cc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d803      	bhi.n	8002a10 <HAL_SPI_Transmit+0x158>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_Transmit+0x15e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a1a:	e074      	b.n	8002b06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ce      	bne.n	80029c4 <HAL_SPI_Transmit+0x10c>
 8002a26:	e04c      	b.n	8002ac2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_Transmit+0x17e>
 8002a30:	8afb      	ldrh	r3, [r7, #22]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d140      	bne.n	8002ab8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a5c:	e02c      	b.n	8002ab8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d113      	bne.n	8002a94 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a92:	e011      	b.n	8002ab8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a94:	f7fe ff9a 	bl	80019cc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d803      	bhi.n	8002aac <HAL_SPI_Transmit+0x1f4>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d102      	bne.n	8002ab2 <HAL_SPI_Transmit+0x1fa>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab6:	e026      	b.n	8002b06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1cd      	bne.n	8002a5e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fa36 	bl	8002f38 <SPI_EndRxTxTransaction>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e000      	b.n	8002b06 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002b04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x26>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e18a      	b.n	8002e5c <HAL_SPI_TransmitReceive+0x33c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b4e:	f7fe ff3d 	bl	80019cc <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d00f      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x70>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b76:	d107      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x68>
 8002b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d003      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b8e:	e15b      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x82>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x82>
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ba8:	e14e      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	887a      	ldrh	r2, [r7, #2]
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d007      	beq.n	8002c12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1a:	d178      	bne.n	8002d0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_SPI_TransmitReceive+0x10a>
 8002c24:	8b7b      	ldrh	r3, [r7, #26]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d166      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4e:	e053      	b.n	8002cf8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d11b      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x176>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d016      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x176>
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d113      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	881a      	ldrh	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	1c9a      	adds	r2, r3, #2
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d119      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x1b8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d014      	beq.n	8002cd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	b292      	uxth	r2, r2
 8002cba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	1c9a      	adds	r2, r3, #2
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cd8:	f7fe fe78 	bl	80019cc <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d807      	bhi.n	8002cf8 <HAL_SPI_TransmitReceive+0x1d8>
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d003      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cf6:	e0a7      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1a6      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x130>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1a1      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x130>
 8002d0c:	e07c      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_TransmitReceive+0x1fc>
 8002d16:	8b7b      	ldrh	r3, [r7, #26]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d16b      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d42:	e057      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d11c      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x26c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x26c>
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d114      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d119      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x2ae>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d014      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dce:	f7fe fdfd 	bl	80019cc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d803      	bhi.n	8002de6 <HAL_SPI_TransmitReceive+0x2c6>
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d102      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x2cc>
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002df2:	e029      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1a2      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x224>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d19d      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f893 	bl	8002f38 <SPI_EndRxTxTransaction>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e24:	e010      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	e000      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e74:	e04c      	b.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d048      	beq.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e7e:	f7fe fda5 	bl	80019cc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d902      	bls.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13d      	bne.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eac:	d111      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d004      	beq.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d107      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d10f      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002efa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e00f      	b.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d1a3      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <SPI_EndRxTxTransaction+0x7c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <SPI_EndRxTxTransaction+0x80>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0d5b      	lsrs	r3, r3, #21
 8002f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f54:	fb02 f303 	mul.w	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f62:	d112      	bne.n	8002f8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff ff78 	bl	8002e64 <SPI_WaitFlagStateUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e00f      	b.n	8002faa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d0f2      	beq.n	8002f8a <SPI_EndRxTxTransaction+0x52>
 8002fa4:	e000      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002fa6:	bf00      	nop
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000014 	.word	0x20000014
 8002fb8:	165e9f81 	.word	0x165e9f81

08002fbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002fc0:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <MX_FATFS_Init+0x18>)
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <MX_FATFS_Init+0x1c>)
 8002fc4:	f003 f848 	bl	8006058 <FATFS_LinkDriver>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <MX_FATFS_Init+0x20>)
 8002fce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20003328 	.word	0x20003328
 8002fd8:	20000020 	.word	0x20000020
 8002fdc:	2000332c 	.word	0x2000332c

08002fe0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002fe4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fe5b 	bl	8000cb8 <SD_disk_initialize>
 8003002:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd ff33 	bl	8000e84 <SD_disk_status>
 800301e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4603      	mov	r3, r0
 8003036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003038:	7bf8      	ldrb	r0, [r7, #15]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	f7fd ff36 	bl	8000eb0 <SD_disk_read>
 8003044:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800305e:	7bf8      	ldrb	r0, [r7, #15]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	f7fd ff8d 	bl	8000f84 <SD_disk_write>
 800306a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	603a      	str	r2, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
 8003080:	460b      	mov	r3, r1
 8003082:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003084:	79b9      	ldrb	r1, [r7, #6]
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fffe 	bl	800108c <SD_disk_ioctl>
 8003090:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	4a08      	ldr	r2, [pc, #32]	; (80030cc <disk_status+0x30>)
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	79fa      	ldrb	r2, [r7, #7]
 80030b4:	4905      	ldr	r1, [pc, #20]	; (80030cc <disk_status+0x30>)
 80030b6:	440a      	add	r2, r1
 80030b8:	7a12      	ldrb	r2, [r2, #8]
 80030ba:	4610      	mov	r0, r2
 80030bc:	4798      	blx	r3
 80030be:	4603      	mov	r3, r0
 80030c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200028b4 	.word	0x200028b4

080030d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <disk_initialize+0x48>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d111      	bne.n	800310c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <disk_initialize+0x48>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <disk_initialize+0x48>)
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	79fa      	ldrb	r2, [r7, #7]
 80030fe:	4906      	ldr	r1, [pc, #24]	; (8003118 <disk_initialize+0x48>)
 8003100:	440a      	add	r2, r1
 8003102:	7a12      	ldrb	r2, [r2, #8]
 8003104:	4610      	mov	r0, r2
 8003106:	4798      	blx	r3
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200028b4 	.word	0x200028b4

0800311c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <disk_read+0x3c>)
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	689c      	ldr	r4, [r3, #8]
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <disk_read+0x3c>)
 800313c:	4413      	add	r3, r2
 800313e:	7a18      	ldrb	r0, [r3, #8]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	47a0      	blx	r4
 8003148:	4603      	mov	r3, r0
 800314a:	75fb      	strb	r3, [r7, #23]
  return res;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop
 8003158:	200028b4 	.word	0x200028b4

0800315c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <disk_write+0x3c>)
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68dc      	ldr	r4, [r3, #12]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <disk_write+0x3c>)
 800317c:	4413      	add	r3, r2
 800317e:	7a18      	ldrb	r0, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	47a0      	blx	r4
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]
  return res;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	bf00      	nop
 8003198:	200028b4 	.word	0x200028b4

0800319c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	603a      	str	r2, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	460b      	mov	r3, r1
 80031aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <disk_ioctl+0x38>)
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	79fa      	ldrb	r2, [r7, #7]
 80031ba:	4906      	ldr	r1, [pc, #24]	; (80031d4 <disk_ioctl+0x38>)
 80031bc:	440a      	add	r2, r1
 80031be:	7a10      	ldrb	r0, [r2, #8]
 80031c0:	79b9      	ldrb	r1, [r7, #6]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	4798      	blx	r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200028b4 	.word	0x200028b4

080031d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80031e8:	89fb      	ldrh	r3, [r7, #14]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	b21a      	sxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b21b      	sxth	r3, r3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b21b      	sxth	r3, r3
 80031f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80031fa:	89fb      	ldrh	r3, [r7, #14]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3303      	adds	r3, #3
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	3202      	adds	r2, #2
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	3201      	adds	r2, #1
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003240:	68fb      	ldr	r3, [r7, #12]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	1c53      	adds	r3, r2, #1
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	6179      	str	r1, [r7, #20]
 8003302:	7812      	ldrb	r2, [r2, #0]
 8003304:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f1      	bne.n	80032f6 <mem_cpy+0x1a>
	}
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	617a      	str	r2, [r7, #20]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3b01      	subs	r3, #1
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f3      	bne.n	800332e <mem_set+0x10>
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003352:	b480      	push	{r7}
 8003354:	b089      	sub	sp, #36	; 0x24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	61fa      	str	r2, [r7, #28]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	61ba      	str	r2, [r7, #24]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	1acb      	subs	r3, r1, r3
 800337e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <mem_cmp+0x40>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0eb      	beq.n	800336a <mem_cmp+0x18>

	return r;
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3724      	adds	r7, #36	; 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80033aa:	e002      	b.n	80033b2 <chk_chr+0x12>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3301      	adds	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <chk_chr+0x26>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d1f2      	bne.n	80033ac <chk_chr+0xc>
	return *str;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	781b      	ldrb	r3, [r3, #0]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e029      	b.n	8003440 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <chk_lock+0xb4>)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	4413      	add	r3, r2
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01d      	beq.n	8003436 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80033fa:	4a24      	ldr	r2, [pc, #144]	; (800348c <chk_lock+0xb4>)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d116      	bne.n	800343a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800340c:	4a1f      	ldr	r2, [pc, #124]	; (800348c <chk_lock+0xb4>)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800341c:	429a      	cmp	r2, r3
 800341e:	d10c      	bne.n	800343a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003420:	4a1a      	ldr	r2, [pc, #104]	; (800348c <chk_lock+0xb4>)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	4413      	add	r3, r2
 8003428:	3308      	adds	r3, #8
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003430:	429a      	cmp	r2, r3
 8003432:	d102      	bne.n	800343a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003434:	e007      	b.n	8003446 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d9d2      	bls.n	80033ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d109      	bne.n	8003460 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <chk_lock+0x80>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d101      	bne.n	800345c <chk_lock+0x84>
 8003458:	2300      	movs	r3, #0
 800345a:	e010      	b.n	800347e <chk_lock+0xa6>
 800345c:	2312      	movs	r3, #18
 800345e:	e00e      	b.n	800347e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <chk_lock+0xa0>
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <chk_lock+0xb4>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	4413      	add	r3, r2
 800346e:	330c      	adds	r3, #12
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003476:	d101      	bne.n	800347c <chk_lock+0xa4>
 8003478:	2310      	movs	r3, #16
 800347a:	e000      	b.n	800347e <chk_lock+0xa6>
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20002894 	.word	0x20002894

08003490 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	e002      	b.n	80034a2 <enq_lock+0x12>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3301      	adds	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d806      	bhi.n	80034b6 <enq_lock+0x26>
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <enq_lock+0x40>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	4413      	add	r3, r2
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f2      	bne.n	800349c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20002894 	.word	0x20002894

080034d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e01f      	b.n	8003524 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80034e4:	4a41      	ldr	r2, [pc, #260]	; (80035ec <inc_lock+0x118>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	4413      	add	r3, r2
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d113      	bne.n	800351e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80034f6:	4a3d      	ldr	r2, [pc, #244]	; (80035ec <inc_lock+0x118>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4413      	add	r3, r2
 80034fe:	3304      	adds	r3, #4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003506:	429a      	cmp	r2, r3
 8003508:	d109      	bne.n	800351e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800350a:	4a38      	ldr	r2, [pc, #224]	; (80035ec <inc_lock+0x118>)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4413      	add	r3, r2
 8003512:	3308      	adds	r3, #8
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800351a:	429a      	cmp	r2, r3
 800351c:	d006      	beq.n	800352c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d9dc      	bls.n	80034e4 <inc_lock+0x10>
 800352a:	e000      	b.n	800352e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800352c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d132      	bne.n	800359a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e002      	b.n	8003540 <inc_lock+0x6c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3301      	adds	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d806      	bhi.n	8003554 <inc_lock+0x80>
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <inc_lock+0x118>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f2      	bne.n	800353a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d101      	bne.n	800355e <inc_lock+0x8a>
 800355a:	2300      	movs	r3, #0
 800355c:	e040      	b.n	80035e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4922      	ldr	r1, [pc, #136]	; (80035ec <inc_lock+0x118>)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	440b      	add	r3, r1
 800356a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	491e      	ldr	r1, [pc, #120]	; (80035ec <inc_lock+0x118>)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	440b      	add	r3, r1
 8003578:	3304      	adds	r3, #4
 800357a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	491a      	ldr	r1, [pc, #104]	; (80035ec <inc_lock+0x118>)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	440b      	add	r3, r1
 8003588:	3308      	adds	r3, #8
 800358a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <inc_lock+0x118>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4413      	add	r3, r2
 8003594:	330c      	adds	r3, #12
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <inc_lock+0xe0>
 80035a0:	4a12      	ldr	r2, [pc, #72]	; (80035ec <inc_lock+0x118>)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	330c      	adds	r3, #12
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <inc_lock+0xe0>
 80035b0:	2300      	movs	r3, #0
 80035b2:	e015      	b.n	80035e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d108      	bne.n	80035cc <inc_lock+0xf8>
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <inc_lock+0x118>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4413      	add	r3, r2
 80035c2:	330c      	adds	r3, #12
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	e001      	b.n	80035d0 <inc_lock+0xfc>
 80035cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d0:	4906      	ldr	r1, [pc, #24]	; (80035ec <inc_lock+0x118>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	440b      	add	r3, r1
 80035d8:	330c      	adds	r3, #12
 80035da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3301      	adds	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20002894 	.word	0x20002894

080035f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d825      	bhi.n	8003650 <dec_lock+0x60>
		n = Files[i].ctr;
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <dec_lock+0x74>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	330c      	adds	r3, #12
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003618:	d101      	bne.n	800361e <dec_lock+0x2e>
 800361a:	2300      	movs	r3, #0
 800361c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <dec_lock+0x3a>
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	3b01      	subs	r3, #1
 8003628:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <dec_lock+0x74>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	4413      	add	r3, r2
 8003632:	330c      	adds	r3, #12
 8003634:	89fa      	ldrh	r2, [r7, #14]
 8003636:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003638:	89fb      	ldrh	r3, [r7, #14]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <dec_lock+0x5a>
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <dec_lock+0x74>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	737b      	strb	r3, [r7, #13]
 800364e:	e001      	b.n	8003654 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003650:	2302      	movs	r3, #2
 8003652:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003654:	7b7b      	ldrb	r3, [r7, #13]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20002894 	.word	0x20002894

08003668 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e010      	b.n	8003698 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <clear_lock+0x44>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d105      	bne.n	8003692 <clear_lock+0x2a>
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <clear_lock+0x44>)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3301      	adds	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d9eb      	bls.n	8003676 <clear_lock+0xe>
	}
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20002894 	.word	0x20002894

080036b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	78db      	ldrb	r3, [r3, #3]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d034      	beq.n	800372e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7858      	ldrb	r0, [r3, #1]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80036d4:	2301      	movs	r3, #1
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	f7ff fd40 	bl	800315c <disk_write>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e022      	b.n	800372e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	1ad2      	subs	r2, r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d217      	bcs.n	800372e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	789b      	ldrb	r3, [r3, #2]
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e010      	b.n	8003728 <sync_window+0x78>
					wsect += fs->fsize;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4413      	add	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7858      	ldrb	r0, [r3, #1]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800371a:	2301      	movs	r3, #1
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	f7ff fd1d 	bl	800315c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3b01      	subs	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d8eb      	bhi.n	8003706 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d01b      	beq.n	8003788 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ffad 	bl	80036b0 <sync_window>
 8003756:	4603      	mov	r3, r0
 8003758:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d113      	bne.n	8003788 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7858      	ldrb	r0, [r3, #1]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800376a:	2301      	movs	r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	f7ff fcd5 	bl	800311c <disk_read>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff87 	bl	80036b0 <sync_window>
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d158      	bne.n	800385e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d148      	bne.n	8003846 <sync_fs+0xb2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	791b      	ldrb	r3, [r3, #4]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d144      	bne.n	8003846 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3334      	adds	r3, #52	; 0x34
 80037c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fda9 	bl	800331e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3334      	adds	r3, #52	; 0x34
 80037d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80037d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fd38 	bl	800324e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3334      	adds	r3, #52	; 0x34
 80037e2:	4921      	ldr	r1, [pc, #132]	; (8003868 <sync_fs+0xd4>)
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fd4d 	bl	8003284 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3334      	adds	r3, #52	; 0x34
 80037ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80037f2:	491e      	ldr	r1, [pc, #120]	; (800386c <sync_fs+0xd8>)
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fd45 	bl	8003284 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3334      	adds	r3, #52	; 0x34
 80037fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7ff fd3b 	bl	8003284 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3334      	adds	r3, #52	; 0x34
 8003812:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7ff fd31 	bl	8003284 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7858      	ldrb	r0, [r3, #1]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383a:	2301      	movs	r3, #1
 800383c:	f7ff fc8e 	bl	800315c <disk_write>
			fs->fsi_flag = 0;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	2200      	movs	r2, #0
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fca4 	bl	800319c <disk_ioctl>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <sync_fs+0xca>
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	41615252 	.word	0x41615252
 800386c:	61417272 	.word	0x61417272

08003870 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	3b02      	subs	r3, #2
 800387e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	3b02      	subs	r3, #2
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d301      	bcc.n	8003890 <clust2sect+0x20>
 800388c:	2300      	movs	r3, #0
 800388e:	e008      	b.n	80038a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	895b      	ldrh	r3, [r3, #10]
 8003894:	461a      	mov	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	fb03 f202 	mul.w	r2, r3, r2
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4413      	add	r3, r2
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d904      	bls.n	80038ce <get_fat+0x20>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80038ce:	2301      	movs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e08c      	b.n	80039ee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
 80038d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d045      	beq.n	800396e <get_fat+0xc0>
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d05d      	beq.n	80039a2 <get_fat+0xf4>
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d177      	bne.n	80039da <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	0a5b      	lsrs	r3, r3, #9
 8003900:	4413      	add	r3, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6938      	ldr	r0, [r7, #16]
 8003906:	f7ff ff17 	bl	8003738 <move_window>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d167      	bne.n	80039e0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	60fa      	str	r2, [r7, #12]
 8003916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003922:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	0a5b      	lsrs	r3, r3, #9
 800392c:	4413      	add	r3, r2
 800392e:	4619      	mov	r1, r3
 8003930:	6938      	ldr	r0, [r7, #16]
 8003932:	f7ff ff01 	bl	8003738 <move_window>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d153      	bne.n	80039e4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	461a      	mov	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <get_fat+0xb6>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	e002      	b.n	800396a <get_fat+0xbc>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396a:	617b      	str	r3, [r7, #20]
			break;
 800396c:	e03f      	b.n	80039ee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	4413      	add	r3, r2
 8003978:	4619      	mov	r1, r3
 800397a:	6938      	ldr	r0, [r7, #16]
 800397c:	f7ff fedc 	bl	8003738 <move_window>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d130      	bne.n	80039e8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003994:	4413      	add	r3, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fc1e 	bl	80031d8 <ld_word>
 800399c:	4603      	mov	r3, r0
 800399e:	617b      	str	r3, [r7, #20]
			break;
 80039a0:	e025      	b.n	80039ee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	09db      	lsrs	r3, r3, #7
 80039aa:	4413      	add	r3, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	6938      	ldr	r0, [r7, #16]
 80039b0:	f7ff fec2 	bl	8003738 <move_window>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80039c8:	4413      	add	r3, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fc1c 	bl	8003208 <ld_dword>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039d6:	617b      	str	r3, [r7, #20]
			break;
 80039d8:	e009      	b.n	80039ee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e006      	b.n	80039ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039e0:	bf00      	nop
 80039e2:	e004      	b.n	80039ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039e4:	bf00      	nop
 80039e6:	e002      	b.n	80039ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80039ec:	bf00      	nop
		}
	}

	return val;
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003a04:	2302      	movs	r3, #2
 8003a06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	f240 80d6 	bls.w	8003bbc <put_fat+0x1c4>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f080 80d0 	bcs.w	8003bbc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d073      	beq.n	8003b0c <put_fat+0x114>
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	f000 8091 	beq.w	8003b4c <put_fat+0x154>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	f040 80c6 	bne.w	8003bbc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	4413      	add	r3, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff fe74 	bl	8003738 <move_window>
 8003a50:	4603      	mov	r3, r0
 8003a52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a54:	7ffb      	ldrb	r3, [r7, #31]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 80a9 	bne.w	8003bae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	1c59      	adds	r1, r3, #1
 8003a66:	61b9      	str	r1, [r7, #24]
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	4413      	add	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <put_fat+0x9e>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	b25a      	sxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e001      	b.n	8003a9a <put_fat+0xa2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	0a5b      	lsrs	r3, r3, #9
 8003aac:	4413      	add	r3, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff fe41 	bl	8003738 <move_window>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d178      	bne.n	8003bb2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	4413      	add	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <put_fat+0xea>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e00e      	b.n	8003b00 <put_fat+0x108>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	f023 030f 	bic.w	r3, r3, #15
 8003aec:	b25a      	sxtb	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	b25b      	sxtb	r3, r3
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	4313      	orrs	r3, r2
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	70da      	strb	r2, [r3, #3]
			break;
 8003b0a:	e057      	b.n	8003bbc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	4413      	add	r3, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fe0d 	bl	8003738 <move_window>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d146      	bne.n	8003bb6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003b36:	4413      	add	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fb85 	bl	800324e <st_word>
			fs->wflag = 1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	70da      	strb	r2, [r3, #3]
			break;
 8003b4a:	e037      	b.n	8003bbc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	4413      	add	r3, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff fded 	bl	8003738 <move_window>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d128      	bne.n	8003bba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fb42 	bl	8003208 <ld_dword>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b8a:	4323      	orrs	r3, r4
 8003b8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003b9c:	4413      	add	r3, r2
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fb6f 	bl	8003284 <st_dword>
			fs->wflag = 1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	70da      	strb	r2, [r3, #3]
			break;
 8003bac:	e006      	b.n	8003bbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003bae:	bf00      	nop
 8003bb0:	e004      	b.n	8003bbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8003bba:	bf00      	nop
		}
	}
	return res;
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd90      	pop	{r4, r7, pc}

08003bc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b088      	sub	sp, #32
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d904      	bls.n	8003bec <remove_chain+0x26>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d301      	bcc.n	8003bf0 <remove_chain+0x2a>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e04b      	b.n	8003c88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	69b8      	ldr	r0, [r7, #24]
 8003bfe:	f7ff fefb 	bl	80039f8 <put_fat>
 8003c02:	4603      	mov	r3, r0
 8003c04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003c06:	7ffb      	ldrb	r3, [r7, #31]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <remove_chain+0x4a>
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	e03b      	b.n	8003c88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fe4b 	bl	80038ae <get_fat>
 8003c18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <remove_chain+0x64>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e02e      	b.n	8003c88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d101      	bne.n	8003c36 <remove_chain+0x70>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e028      	b.n	8003c88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003c36:	2200      	movs	r2, #0
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	69b8      	ldr	r0, [r7, #24]
 8003c3c:	f7ff fedc 	bl	80039f8 <put_fat>
 8003c40:	4603      	mov	r3, r0
 8003c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003c44:	7ffb      	ldrb	r3, [r7, #31]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <remove_chain+0x88>
 8003c4a:	7ffb      	ldrb	r3, [r7, #31]
 8003c4c:	e01c      	b.n	8003c88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	3b02      	subs	r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d20b      	bcs.n	8003c74 <remove_chain+0xae>
			fs->free_clst++;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	791b      	ldrb	r3, [r3, #4]
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3c6      	bcc.n	8003c10 <remove_chain+0x4a>
 8003c82:	e000      	b.n	8003c86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003c84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <create_chain+0x2c>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d31b      	bcc.n	8003cf4 <create_chain+0x64>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e018      	b.n	8003cf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fdf2 	bl	80038ae <get_fat>
 8003cca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d801      	bhi.n	8003cd6 <create_chain+0x46>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e070      	b.n	8003db8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d101      	bne.n	8003ce2 <create_chain+0x52>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e06a      	b.n	8003db8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d201      	bcs.n	8003cf0 <create_chain+0x60>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	e063      	b.n	8003db8 <create_chain+0x128>
		scl = clst;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d307      	bcc.n	8003d18 <create_chain+0x88>
				ncl = 2;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d901      	bls.n	8003d18 <create_chain+0x88>
 8003d14:	2300      	movs	r3, #0
 8003d16:	e04f      	b.n	8003db8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003d18:	69f9      	ldr	r1, [r7, #28]
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fdc7 	bl	80038ae <get_fat>
 8003d20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00e      	beq.n	8003d46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d003      	beq.n	8003d36 <create_chain+0xa6>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d101      	bne.n	8003d3a <create_chain+0xaa>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	e03e      	b.n	8003db8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d1da      	bne.n	8003cf8 <create_chain+0x68>
 8003d42:	2300      	movs	r3, #0
 8003d44:	e038      	b.n	8003db8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003d46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69f9      	ldr	r1, [r7, #28]
 8003d4e:	6938      	ldr	r0, [r7, #16]
 8003d50:	f7ff fe52 	bl	80039f8 <put_fat>
 8003d54:	4603      	mov	r3, r0
 8003d56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <create_chain+0xe2>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	6839      	ldr	r1, [r7, #0]
 8003d68:	6938      	ldr	r0, [r7, #16]
 8003d6a:	f7ff fe45 	bl	80039f8 <put_fat>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d116      	bne.n	8003da6 <create_chain+0x116>
		fs->last_clst = ncl;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	3b02      	subs	r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d804      	bhi.n	8003d96 <create_chain+0x106>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	791b      	ldrb	r3, [r3, #4]
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	711a      	strb	r2, [r3, #4]
 8003da4:	e007      	b.n	8003db6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <create_chain+0x122>
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
 8003db0:	e000      	b.n	8003db4 <create_chain+0x124>
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003db6:	69fb      	ldr	r3, [r7, #28]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	0a5b      	lsrs	r3, r3, #9
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	8952      	ldrh	r2, [r2, #10]
 8003de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	613a      	str	r2, [r7, #16]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <clmt_clust+0x3a>
 8003df6:	2300      	movs	r3, #0
 8003df8:	e010      	b.n	8003e1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d307      	bcc.n	8003e12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003e10:	e7e9      	b.n	8003de6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003e12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	4413      	add	r3, r2
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e3e:	d204      	bcs.n	8003e4a <dir_sdi+0x22>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e063      	b.n	8003f16 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <dir_sdi+0x46>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10c      	bne.n	8003e8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	8912      	ldrh	r2, [r2, #8]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d301      	bcc.n	8003e84 <dir_sdi+0x5c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e048      	b.n	8003f16 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	e029      	b.n	8003ee2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	895b      	ldrh	r3, [r3, #10]
 8003e92:	025b      	lsls	r3, r3, #9
 8003e94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003e96:	e019      	b.n	8003ecc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fd06 	bl	80038ae <get_fat>
 8003ea2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d101      	bne.n	8003eb0 <dir_sdi+0x88>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d904      	bls.n	8003ec0 <dir_sdi+0x98>
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d301      	bcc.n	8003ec4 <dir_sdi+0x9c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e028      	b.n	8003f16 <dir_sdi+0xee>
			ofs -= csz;
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d2e1      	bcs.n	8003e98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	6938      	ldr	r0, [r7, #16]
 8003ed8:	f7ff fcca 	bl	8003870 <clust2sect>
 8003edc:	4602      	mov	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <dir_sdi+0xcc>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e010      	b.n	8003f16 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	0a5b      	lsrs	r3, r3, #9
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	441a      	add	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	3320      	adds	r3, #32
 8003f34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <dir_next+0x28>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f44:	d301      	bcc.n	8003f4a <dir_next+0x2c>
 8003f46:	2304      	movs	r3, #4
 8003f48:	e0aa      	b.n	80040a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 8098 	bne.w	8004086 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	8912      	ldrh	r2, [r2, #8]
 8003f70:	4293      	cmp	r3, r2
 8003f72:	f0c0 8088 	bcc.w	8004086 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	61da      	str	r2, [r3, #28]
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e08f      	b.n	80040a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	0a5b      	lsrs	r3, r3, #9
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	8952      	ldrh	r2, [r2, #10]
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d17a      	bne.n	8004086 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7ff fc88 	bl	80038ae <get_fat>
 8003f9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d801      	bhi.n	8003faa <dir_next+0x8c>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e07a      	b.n	80040a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d101      	bne.n	8003fb6 <dir_next+0x98>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e074      	b.n	80040a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d358      	bcc.n	8004072 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	61da      	str	r2, [r3, #28]
 8003fcc:	2304      	movs	r3, #4
 8003fce:	e067      	b.n	80040a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7ff fe59 	bl	8003c90 <create_chain>
 8003fde:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <dir_next+0xcc>
 8003fe6:	2307      	movs	r3, #7
 8003fe8:	e05a      	b.n	80040a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <dir_next+0xd6>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e055      	b.n	80040a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d101      	bne.n	8004000 <dir_next+0xe2>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e04f      	b.n	80040a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7ff fb55 	bl	80036b0 <sync_window>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <dir_next+0xf2>
 800400c:	2301      	movs	r3, #1
 800400e:	e047      	b.n	80040a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3334      	adds	r3, #52	; 0x34
 8004014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f97f 	bl	800331e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff fc22 	bl	8003870 <clust2sect>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
 8004032:	e012      	b.n	800405a <dir_next+0x13c>
						fs->wflag = 1;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff fb38 	bl	80036b0 <sync_window>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <dir_next+0x12c>
 8004046:	2301      	movs	r3, #1
 8004048:	e02a      	b.n	80040a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3301      	adds	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	895b      	ldrh	r3, [r3, #10]
 800405e:	461a      	mov	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4293      	cmp	r3, r2
 8004064:	d3e6      	bcc.n	8004034 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad2      	subs	r2, r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff fbf8 	bl	8003870 <clust2sect>
 8004080:	4602      	mov	r2, r0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80040b8:	2100      	movs	r1, #0
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff feb4 	bl	8003e28 <dir_sdi>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d12b      	bne.n	8004122 <dir_alloc+0x7a>
		n = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4619      	mov	r1, r3
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff fb2f 	bl	8003738 <move_window>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80040de:	7dfb      	ldrb	r3, [r7, #23]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11d      	bne.n	8004120 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2be5      	cmp	r3, #229	; 0xe5
 80040ec:	d004      	beq.n	80040f8 <dir_alloc+0x50>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3301      	adds	r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d102      	bne.n	800410c <dir_alloc+0x64>
 8004106:	e00c      	b.n	8004122 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800410c:	2101      	movs	r1, #1
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff05 	bl	8003f1e <dir_next>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0d7      	beq.n	80040ce <dir_alloc+0x26>
 800411e:	e000      	b.n	8004122 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004120:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d101      	bne.n	800412c <dir_alloc+0x84>
 8004128:	2307      	movs	r3, #7
 800412a:	75fb      	strb	r3, [r7, #23]
	return res;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	331a      	adds	r3, #26
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f847 	bl	80031d8 <ld_word>
 800414a:	4603      	mov	r3, r0
 800414c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d109      	bne.n	800416a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff f83c 	bl	80031d8 <ld_word>
 8004160:	4603      	mov	r3, r0
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800416a:	68fb      	ldr	r3, [r7, #12]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	331a      	adds	r3, #26
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	b292      	uxth	r2, r2
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff f85f 	bl	800324e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d109      	bne.n	80041ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f103 0214 	add.w	r2, r3, #20
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f7ff f851 	bl	800324e <st_word>
	}
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	331a      	adds	r3, #26
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f808 	bl	80031d8 <ld_word>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <cmp_lfn+0x1e>
 80041ce:	2300      	movs	r3, #0
 80041d0:	e059      	b.n	8004286 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041da:	1e5a      	subs	r2, r3, #1
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80041e8:	2301      	movs	r3, #1
 80041ea:	81fb      	strh	r3, [r7, #14]
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e033      	b.n	800425a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80041f2:	4a27      	ldr	r2, [pc, #156]	; (8004290 <cmp_lfn+0xdc>)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe ffe9 	bl	80031d8 <ld_word>
 8004206:	4603      	mov	r3, r0
 8004208:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800420a:	89fb      	ldrh	r3, [r7, #14]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01a      	beq.n	8004246 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2bfe      	cmp	r3, #254	; 0xfe
 8004214:	d812      	bhi.n	800423c <cmp_lfn+0x88>
 8004216:	89bb      	ldrh	r3, [r7, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f001 ff69 	bl	80060f0 <ff_wtoupper>
 800421e:	4603      	mov	r3, r0
 8004220:	461c      	mov	r4, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	617a      	str	r2, [r7, #20]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f001 ff5d 	bl	80060f0 <ff_wtoupper>
 8004236:	4603      	mov	r3, r0
 8004238:	429c      	cmp	r4, r3
 800423a:	d001      	beq.n	8004240 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800423c:	2300      	movs	r3, #0
 800423e:	e022      	b.n	8004286 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004240:	89bb      	ldrh	r3, [r7, #12]
 8004242:	81fb      	strh	r3, [r7, #14]
 8004244:	e006      	b.n	8004254 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004246:	89bb      	ldrh	r3, [r7, #12]
 8004248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424c:	4293      	cmp	r3, r2
 800424e:	d001      	beq.n	8004254 <cmp_lfn+0xa0>
 8004250:	2300      	movs	r3, #0
 8004252:	e018      	b.n	8004286 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3301      	adds	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d9c8      	bls.n	80041f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <cmp_lfn+0xd0>
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <cmp_lfn+0xd0>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <cmp_lfn+0xd0>
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004284:	2301      	movs	r3, #1
}
 8004286:	4618      	mov	r0, r3
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd90      	pop	{r4, r7, pc}
 800428e:	bf00      	nop
 8004290:	0800be08 	.word	0x0800be08

08004294 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	460b      	mov	r3, r1
 80042a4:	71fb      	strb	r3, [r7, #7]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	330d      	adds	r3, #13
 80042ae:	79ba      	ldrb	r2, [r7, #6]
 80042b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	330b      	adds	r3, #11
 80042b6:	220f      	movs	r2, #15
 80042b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	330c      	adds	r3, #12
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	331a      	adds	r3, #26
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe ffc0 	bl	800324e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	1e5a      	subs	r2, r3, #1
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	82fb      	strh	r3, [r7, #22]
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80042e6:	8afb      	ldrh	r3, [r7, #22]
 80042e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <put_lfn+0x6c>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	61fa      	str	r2, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <put_lfn+0xcc>)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4413      	add	r3, r2
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	8afa      	ldrh	r2, [r7, #22]
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe ff9b 	bl	800324e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004318:	8afb      	ldrh	r3, [r7, #22]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <put_lfn+0x90>
 800431e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004322:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	3301      	adds	r3, #1
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d9da      	bls.n	80042e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004330:	8afb      	ldrh	r3, [r7, #22]
 8004332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004336:	4293      	cmp	r3, r2
 8004338:	d006      	beq.n	8004348 <put_lfn+0xb4>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <put_lfn+0xbc>
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	79fa      	ldrb	r2, [r7, #7]
 8004354:	701a      	strb	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800be08 	.word	0x0800be08

08004364 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	; 0x30
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004372:	220b      	movs	r2, #11
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7fe ffb0 	bl	80032dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d92b      	bls.n	80043da <gen_numname+0x76>
		sr = seq;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004386:	e022      	b.n	80043ce <gen_numname+0x6a>
			wc = *lfn++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	1c9a      	adds	r2, r3, #2
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004392:	2300      	movs	r3, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	e017      	b.n	80043c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	005a      	lsls	r2, r3, #1
 800439c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80043a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <gen_numname+0x5e>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80043bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80043c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	3301      	adds	r3, #1
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	d9e4      	bls.n	8004398 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1d8      	bne.n	8004388 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80043da:	2307      	movs	r3, #7
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	3330      	adds	r3, #48	; 0x30
 80043ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80043ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043f2:	2b39      	cmp	r3, #57	; 0x39
 80043f4:	d904      	bls.n	8004400 <gen_numname+0x9c>
 80043f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043fa:	3307      	adds	r3, #7
 80043fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	62ba      	str	r2, [r7, #40]	; 0x28
 8004406:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800440a:	4413      	add	r3, r2
 800440c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004410:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	603b      	str	r3, [r7, #0]
	} while (seq);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1de      	bne.n	80043de <gen_numname+0x7a>
	ns[i] = '~';
 8004420:	f107 0214 	add.w	r2, r7, #20
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	4413      	add	r3, r2
 8004428:	227e      	movs	r2, #126	; 0x7e
 800442a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
 8004430:	e002      	b.n	8004438 <gen_numname+0xd4>
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	3301      	adds	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	429a      	cmp	r2, r3
 800443e:	d205      	bcs.n	800444c <gen_numname+0xe8>
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b20      	cmp	r3, #32
 800444a:	d1f2      	bne.n	8004432 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b07      	cmp	r3, #7
 8004450:	d808      	bhi.n	8004464 <gen_numname+0x100>
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	62ba      	str	r2, [r7, #40]	; 0x28
 8004458:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800445c:	4413      	add	r3, r2
 800445e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004462:	e000      	b.n	8004466 <gen_numname+0x102>
 8004464:	2120      	movs	r1, #32
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	627a      	str	r2, [r7, #36]	; 0x24
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	460a      	mov	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	2b07      	cmp	r3, #7
 8004478:	d9e8      	bls.n	800444c <gen_numname+0xe8>
}
 800447a:	bf00      	nop
 800447c:	3730      	adds	r7, #48	; 0x30
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800448e:	230b      	movs	r3, #11
 8004490:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	0852      	lsrs	r2, r2, #1
 8004498:	01db      	lsls	r3, r3, #7
 800449a:	4313      	orrs	r3, r2
 800449c:	b2da      	uxtb	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	6079      	str	r1, [r7, #4]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ed      	bne.n	8004492 <sum_sfn+0x10>
	return sum;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80044d2:	2100      	movs	r1, #0
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fca7 	bl	8003e28 <dir_sdi>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <dir_find+0x24>
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	e0a9      	b.n	800463c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80044e8:	23ff      	movs	r3, #255	; 0xff
 80044ea:	753b      	strb	r3, [r7, #20]
 80044ec:	7d3b      	ldrb	r3, [r7, #20]
 80044ee:	757b      	strb	r3, [r7, #21]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4619      	mov	r1, r3
 80044fe:	6938      	ldr	r0, [r7, #16]
 8004500:	f7ff f91a 	bl	8003738 <move_window>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f040 8090 	bne.w	8004630 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004518:	7dbb      	ldrb	r3, [r7, #22]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <dir_find+0x60>
 800451e:	2304      	movs	r3, #4
 8004520:	75fb      	strb	r3, [r7, #23]
 8004522:	e08a      	b.n	800463a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	330b      	adds	r3, #11
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004538:	7dbb      	ldrb	r3, [r7, #22]
 800453a:	2be5      	cmp	r3, #229	; 0xe5
 800453c:	d007      	beq.n	800454e <dir_find+0x8a>
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <dir_find+0x98>
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	d006      	beq.n	800455c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800454e:	23ff      	movs	r3, #255	; 0xff
 8004550:	757b      	strb	r3, [r7, #21]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f04f 32ff 	mov.w	r2, #4294967295
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
 800455a:	e05e      	b.n	800461a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d136      	bne.n	80045d0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d154      	bne.n	800461a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004570:	7dbb      	ldrb	r3, [r7, #22]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	7b5b      	ldrb	r3, [r3, #13]
 8004580:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004582:	7dbb      	ldrb	r3, [r7, #22]
 8004584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004588:	75bb      	strb	r3, [r7, #22]
 800458a:	7dbb      	ldrb	r3, [r7, #22]
 800458c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004596:	7dba      	ldrb	r2, [r7, #22]
 8004598:	7d7b      	ldrb	r3, [r7, #21]
 800459a:	429a      	cmp	r2, r3
 800459c:	d115      	bne.n	80045ca <dir_find+0x106>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	330d      	adds	r3, #13
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	7d3a      	ldrb	r2, [r7, #20]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d10e      	bne.n	80045ca <dir_find+0x106>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7ff fdfc 	bl	80041b4 <cmp_lfn>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <dir_find+0x106>
 80045c2:	7d7b      	ldrb	r3, [r7, #21]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	e000      	b.n	80045cc <dir_find+0x108>
 80045ca:	23ff      	movs	r3, #255	; 0xff
 80045cc:	757b      	strb	r3, [r7, #21]
 80045ce:	e024      	b.n	800461a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80045d0:	7d7b      	ldrb	r3, [r7, #21]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <dir_find+0x126>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ff51 	bl	8004482 <sum_sfn>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	7d3b      	ldrb	r3, [r7, #20]
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d024      	beq.n	8004634 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <dir_find+0x14a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a18      	ldr	r0, [r3, #32]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3324      	adds	r3, #36	; 0x24
 8004600:	220b      	movs	r2, #11
 8004602:	4619      	mov	r1, r3
 8004604:	f7fe fea5 	bl	8003352 <mem_cmp>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800460e:	23ff      	movs	r3, #255	; 0xff
 8004610:	757b      	strb	r3, [r7, #21]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f04f 32ff 	mov.w	r2, #4294967295
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800461a:	2100      	movs	r1, #0
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff fc7e 	bl	8003f1e <dir_next>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f43f af65 	beq.w	80044f8 <dir_find+0x34>
 800462e:	e004      	b.n	800463a <dir_find+0x176>
		if (res != FR_OK) break;
 8004630:	bf00      	nop
 8004632:	e002      	b.n	800463a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004638:	bf00      	nop

	return res;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	; 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004658:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <dir_register+0x20>
 8004660:	2306      	movs	r3, #6
 8004662:	e0e0      	b.n	8004826 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	e002      	b.n	8004670 <dir_register+0x2c>
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	3301      	adds	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f4      	bne.n	800466a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	220c      	movs	r2, #12
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fe25 	bl	80032dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d032      	beq.n	8004702 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80046a4:	2301      	movs	r3, #1
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a8:	e016      	b.n	80046d8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	f107 010c 	add.w	r1, r7, #12
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	f7ff fe53 	bl	8004364 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ff00 	bl	80044c4 <dir_find>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80046ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	3301      	adds	r3, #1
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2b63      	cmp	r3, #99	; 0x63
 80046dc:	d9e5      	bls.n	80046aa <dir_register+0x66>
 80046de:	e000      	b.n	80046e2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80046e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	2b64      	cmp	r3, #100	; 0x64
 80046e6:	d101      	bne.n	80046ec <dir_register+0xa8>
 80046e8:	2307      	movs	r3, #7
 80046ea:	e09c      	b.n	8004826 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80046ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d002      	beq.n	80046fa <dir_register+0xb6>
 80046f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f8:	e095      	b.n	8004826 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80046fa:	7dfa      	ldrb	r2, [r7, #23]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <dir_register+0xd8>
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	330c      	adds	r3, #12
 8004710:	4a47      	ldr	r2, [pc, #284]	; (8004830 <dir_register+0x1ec>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3301      	adds	r3, #1
 800471a:	e000      	b.n	800471e <dir_register+0xda>
 800471c:	2301      	movs	r3, #1
 800471e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004720:	6a39      	ldr	r1, [r7, #32]
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fcc0 	bl	80040a8 <dir_alloc>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800472e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004732:	2b00      	cmp	r3, #0
 8004734:	d148      	bne.n	80047c8 <dir_register+0x184>
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	3b01      	subs	r3, #1
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d042      	beq.n	80047c8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	015b      	lsls	r3, r3, #5
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fb6a 	bl	8003e28 <dir_sdi>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800475a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800475e:	2b00      	cmp	r3, #0
 8004760:	d132      	bne.n	80047c8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3324      	adds	r3, #36	; 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fe8b 	bl	8004482 <sum_sfn>
 800476c:	4603      	mov	r3, r0
 800476e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4619      	mov	r1, r3
 8004776:	69f8      	ldr	r0, [r7, #28]
 8004778:	f7fe ffde 	bl	8003738 <move_window>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	68d8      	ldr	r0, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a19      	ldr	r1, [r3, #32]
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	7efb      	ldrb	r3, [r7, #27]
 8004798:	f7ff fd7c 	bl	8004294 <put_lfn>
				fs->wflag = 1;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	2201      	movs	r2, #1
 80047a0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80047a2:	2100      	movs	r1, #0
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fbba 	bl	8003f1e <dir_next>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80047b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d107      	bne.n	80047c8 <dir_register+0x184>
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1d5      	bne.n	8004770 <dir_register+0x12c>
 80047c4:	e000      	b.n	80047c8 <dir_register+0x184>
				if (res != FR_OK) break;
 80047c6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80047c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d128      	bne.n	8004822 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4619      	mov	r1, r3
 80047d6:	69f8      	ldr	r0, [r7, #28]
 80047d8:	f7fe ffae 	bl	8003738 <move_window>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80047e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11b      	bne.n	8004822 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	2220      	movs	r2, #32
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fd93 	bl	800331e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a18      	ldr	r0, [r3, #32]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3324      	adds	r3, #36	; 0x24
 8004800:	220b      	movs	r2, #11
 8004802:	4619      	mov	r1, r3
 8004804:	f7fe fd6a 	bl	80032dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	330c      	adds	r3, #12
 8004814:	f002 0218 	and.w	r2, r2, #24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2201      	movs	r2, #1
 8004820:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004826:	4618      	mov	r0, r3
 8004828:	3730      	adds	r7, #48	; 0x30
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	4ec4ec4f 	.word	0x4ec4ec4f

08004834 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	61ba      	str	r2, [r7, #24]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004864:	2b1f      	cmp	r3, #31
 8004866:	d940      	bls.n	80048ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800486a:	2b2f      	cmp	r3, #47	; 0x2f
 800486c:	d006      	beq.n	800487c <create_name+0x48>
 800486e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004870:	2b5c      	cmp	r3, #92	; 0x5c
 8004872:	d110      	bne.n	8004896 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004874:	e002      	b.n	800487c <create_name+0x48>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	3301      	adds	r3, #1
 800487a:	61bb      	str	r3, [r7, #24]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b2f      	cmp	r3, #47	; 0x2f
 8004886:	d0f6      	beq.n	8004876 <create_name+0x42>
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b5c      	cmp	r3, #92	; 0x5c
 8004892:	d0f0      	beq.n	8004876 <create_name+0x42>
			break;
 8004894:	e02a      	b.n	80048ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2bfe      	cmp	r3, #254	; 0xfe
 800489a:	d901      	bls.n	80048a0 <create_name+0x6c>
 800489c:	2306      	movs	r3, #6
 800489e:	e177      	b.n	8004b90 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80048a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80048a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 fbe4 	bl	8006078 <ff_convert>
 80048b0:	4603      	mov	r3, r0
 80048b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80048b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <create_name+0x8a>
 80048ba:	2306      	movs	r3, #6
 80048bc:	e168      	b.n	8004b90 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80048be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048c0:	2b7f      	cmp	r3, #127	; 0x7f
 80048c2:	d809      	bhi.n	80048d8 <create_name+0xa4>
 80048c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048c6:	4619      	mov	r1, r3
 80048c8:	48b3      	ldr	r0, [pc, #716]	; (8004b98 <create_name+0x364>)
 80048ca:	f7fe fd69 	bl	80033a0 <chk_chr>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <create_name+0xa4>
 80048d4:	2306      	movs	r3, #6
 80048d6:	e15b      	b.n	8004b90 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	617a      	str	r2, [r7, #20]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80048e8:	e7b4      	b.n	8004854 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80048ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	441a      	add	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80048f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048f8:	2b1f      	cmp	r3, #31
 80048fa:	d801      	bhi.n	8004900 <create_name+0xcc>
 80048fc:	2304      	movs	r3, #4
 80048fe:	e000      	b.n	8004902 <create_name+0xce>
 8004900:	2300      	movs	r3, #0
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004906:	e011      	b.n	800492c <create_name+0xf8>
		w = lfn[di - 1];
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800490e:	3b01      	subs	r3, #1
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800491a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800491c:	2b20      	cmp	r3, #32
 800491e:	d002      	beq.n	8004926 <create_name+0xf2>
 8004920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004922:	2b2e      	cmp	r3, #46	; 0x2e
 8004924:	d106      	bne.n	8004934 <create_name+0x100>
		di--;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3b01      	subs	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ea      	bne.n	8004908 <create_name+0xd4>
 8004932:	e000      	b.n	8004936 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004934:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	2200      	movs	r2, #0
 8004940:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <create_name+0x118>
 8004948:	2306      	movs	r3, #6
 800494a:	e121      	b.n	8004b90 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	220b      	movs	r2, #11
 8004952:	2120      	movs	r1, #32
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fce2 	bl	800331e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e002      	b.n	8004966 <create_name+0x132>
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	3301      	adds	r3, #1
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	2b20      	cmp	r3, #32
 8004972:	d0f5      	beq.n	8004960 <create_name+0x12c>
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2b2e      	cmp	r3, #46	; 0x2e
 8004980:	d0ee      	beq.n	8004960 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <create_name+0x168>
 8004988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800498c:	f043 0303 	orr.w	r3, r3, #3
 8004990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004994:	e002      	b.n	800499c <create_name+0x168>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3b01      	subs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <create_name+0x182>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049a8:	3b01      	subs	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2b2e      	cmp	r3, #46	; 0x2e
 80049b4:	d1ef      	bne.n	8004996 <create_name+0x162>

	i = b = 0; ni = 8;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80049bc:	2300      	movs	r3, #0
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	2308      	movs	r3, #8
 80049c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	61ba      	str	r2, [r7, #24]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80049d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8090 	beq.w	8004afc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80049dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d006      	beq.n	80049f0 <create_name+0x1bc>
 80049e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049e4:	2b2e      	cmp	r3, #46	; 0x2e
 80049e6:	d10a      	bne.n	80049fe <create_name+0x1ca>
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d006      	beq.n	80049fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80049f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f4:	f043 0303 	orr.w	r3, r3, #3
 80049f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049fc:	e07d      	b.n	8004afa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d203      	bcs.n	8004a0e <create_name+0x1da>
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d123      	bne.n	8004a56 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b0b      	cmp	r3, #11
 8004a12:	d106      	bne.n	8004a22 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a18:	f043 0303 	orr.w	r3, r3, #3
 8004a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a20:	e06f      	b.n	8004b02 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d005      	beq.n	8004a36 <create_name+0x202>
 8004a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a2e:	f043 0303 	orr.w	r3, r3, #3
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d860      	bhi.n	8004b00 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	2308      	movs	r3, #8
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	230b      	movs	r3, #11
 8004a48:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004a54:	e051      	b.n	8004afa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a58:	2b7f      	cmp	r3, #127	; 0x7f
 8004a5a:	d914      	bls.n	8004a86 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fb09 	bl	8006078 <ff_convert>
 8004a66:	4603      	mov	r3, r0
 8004a68:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <create_name+0x246>
 8004a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a72:	3b80      	subs	r3, #128	; 0x80
 8004a74:	4a49      	ldr	r2, [pc, #292]	; (8004b9c <create_name+0x368>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <create_name+0x268>
 8004a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4843      	ldr	r0, [pc, #268]	; (8004ba0 <create_name+0x36c>)
 8004a92:	f7fe fc85 	bl	80033a0 <chk_chr>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004a9c:	235f      	movs	r3, #95	; 0x5f
 8004a9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa4:	f043 0303 	orr.w	r3, r3, #3
 8004aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004aac:	e01b      	b.n	8004ae6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d909      	bls.n	8004ac8 <create_name+0x294>
 8004ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ab6:	2b5a      	cmp	r3, #90	; 0x5a
 8004ab8:	d806      	bhi.n	8004ac8 <create_name+0x294>
					b |= 2;
 8004aba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ac6:	e00e      	b.n	8004ae6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aca:	2b60      	cmp	r3, #96	; 0x60
 8004acc:	d90b      	bls.n	8004ae6 <create_name+0x2b2>
 8004ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ad0:	2b7a      	cmp	r3, #122	; 0x7a
 8004ad2:	d808      	bhi.n	8004ae6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae2:	3b20      	subs	r3, #32
 8004ae4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	623a      	str	r2, [r7, #32]
 8004aec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aee:	b2d1      	uxtb	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	460a      	mov	r2, r1
 8004af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004afa:	e763      	b.n	80049c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8004b00:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b08:	2be5      	cmp	r3, #229	; 0xe5
 8004b0a:	d103      	bne.n	8004b14 <create_name+0x2e0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2205      	movs	r2, #5
 8004b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d104      	bne.n	8004b24 <create_name+0x2f0>
 8004b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d005      	beq.n	8004b3c <create_name+0x308>
 8004b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d105      	bne.n	8004b48 <create_name+0x314>
 8004b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d117      	bne.n	8004b84 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004b54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <create_name+0x338>
 8004b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b64:	f043 0310 	orr.w	r3, r3, #16
 8004b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d105      	bne.n	8004b84 <create_name+0x350>
 8004b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b7c:	f043 0308 	orr.w	r3, r3, #8
 8004b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004b8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004b8e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3728      	adds	r7, #40	; 0x28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	0800bce8 	.word	0x0800bce8
 8004b9c:	0800bd88 	.word	0x0800bd88
 8004ba0:	0800bcf4 	.word	0x0800bcf4

08004ba4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004bb8:	e002      	b.n	8004bc0 <follow_path+0x1c>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b2f      	cmp	r3, #47	; 0x2f
 8004bc6:	d0f8      	beq.n	8004bba <follow_path+0x16>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b5c      	cmp	r3, #92	; 0x5c
 8004bce:	d0f4      	beq.n	8004bba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b1f      	cmp	r3, #31
 8004bdc:	d80a      	bhi.n	8004bf4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004be6:	2100      	movs	r1, #0
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff f91d 	bl	8003e28 <dir_sdi>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]
 8004bf2:	e043      	b.n	8004c7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff fe1b 	bl	8004834 <create_name>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d134      	bne.n	8004c72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fc5b 	bl	80044c4 <dir_find>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004c18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d127      	bne.n	8004c76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004c26:	7afb      	ldrb	r3, [r7, #11]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d122      	bne.n	8004c76 <follow_path+0xd2>
 8004c30:	2305      	movs	r3, #5
 8004c32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004c34:	e01f      	b.n	8004c76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11c      	bne.n	8004c7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	799b      	ldrb	r3, [r3, #6]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004c4c:	2305      	movs	r3, #5
 8004c4e:	75fb      	strb	r3, [r7, #23]
 8004c50:	e014      	b.n	8004c7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c60:	4413      	add	r3, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff fa66 	bl	8004136 <ld_clust>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c70:	e7c0      	b.n	8004bf4 <follow_path+0x50>
			if (res != FR_OK) break;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <follow_path+0xd8>
				break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c7a:	bf00      	nop
			}
		}
	}

	return res;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d031      	beq.n	8004d00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e002      	b.n	8004caa <get_ldnumber+0x24>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b1f      	cmp	r3, #31
 8004cb0:	d903      	bls.n	8004cba <get_ldnumber+0x34>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b3a      	cmp	r3, #58	; 0x3a
 8004cb8:	d1f4      	bne.n	8004ca4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b3a      	cmp	r3, #58	; 0x3a
 8004cc0:	d11c      	bne.n	8004cfc <get_ldnumber+0x76>
			tp = *path;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	60fa      	str	r2, [r7, #12]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	3b30      	subs	r3, #48	; 0x30
 8004cd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b09      	cmp	r3, #9
 8004cd8:	d80e      	bhi.n	8004cf8 <get_ldnumber+0x72>
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10a      	bne.n	8004cf8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d107      	bne.n	8004cf8 <get_ldnumber+0x72>
					vol = (int)i;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	e002      	b.n	8004d02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004d00:	693b      	ldr	r3, [r7, #16]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	70da      	strb	r2, [r3, #3]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fe fd04 	bl	8003738 <move_window>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <check_fs+0x2a>
 8004d36:	2304      	movs	r3, #4
 8004d38:	e038      	b.n	8004dac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3334      	adds	r3, #52	; 0x34
 8004d3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fa48 	bl	80031d8 <ld_word>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <check_fs+0x48>
 8004d54:	2303      	movs	r3, #3
 8004d56:	e029      	b.n	8004dac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d5e:	2be9      	cmp	r3, #233	; 0xe9
 8004d60:	d009      	beq.n	8004d76 <check_fs+0x66>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d68:	2beb      	cmp	r3, #235	; 0xeb
 8004d6a:	d11e      	bne.n	8004daa <check_fs+0x9a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d72:	2b90      	cmp	r3, #144	; 0x90
 8004d74:	d119      	bne.n	8004daa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3334      	adds	r3, #52	; 0x34
 8004d7a:	3336      	adds	r3, #54	; 0x36
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe fa43 	bl	8003208 <ld_dword>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d88:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <check_fs+0xa4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d101      	bne.n	8004d92 <check_fs+0x82>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e00c      	b.n	8004dac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3334      	adds	r3, #52	; 0x34
 8004d96:	3352      	adds	r3, #82	; 0x52
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fa35 	bl	8003208 <ld_dword>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <check_fs+0xa8>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d101      	bne.n	8004daa <check_fs+0x9a>
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004daa:	2302      	movs	r3, #2
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	00544146 	.word	0x00544146
 8004db8:	33544146 	.word	0x33544146

08004dbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b096      	sub	sp, #88	; 0x58
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff ff58 	bl	8004c86 <get_ldnumber>
 8004dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da01      	bge.n	8004de2 <find_volume+0x26>
 8004dde:	230b      	movs	r3, #11
 8004de0:	e22e      	b.n	8005240 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004de2:	4aa8      	ldr	r2, [pc, #672]	; (8005084 <find_volume+0x2c8>)
 8004de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <find_volume+0x3a>
 8004df2:	230c      	movs	r3, #12
 8004df4:	e224      	b.n	8005240 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01a      	beq.n	8004e42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe f943 	bl	800309c <disk_status>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <find_volume+0x82>
 8004e2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004e3a:	230a      	movs	r3, #10
 8004e3c:	e200      	b.n	8005240 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e1fe      	b.n	8005240 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe f93b 	bl	80030d0 <disk_initialize>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1e7      	b.n	8005240 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <find_volume+0xca>
 8004e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004e82:	230a      	movs	r3, #10
 8004e84:	e1dc      	b.n	8005240 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004e8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e8e:	f7ff ff3f 	bl	8004d10 <check_fs>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d14b      	bne.n	8004f38 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea4:	e01f      	b.n	8004ee6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004eb4:	4413      	add	r3, r2
 8004eb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	3304      	adds	r3, #4
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <find_volume+0x114>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe f99e 	bl	8003208 <ld_dword>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	e000      	b.n	8004ed2 <find_volume+0x116>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004eda:	440b      	add	r3, r1
 8004edc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d9dc      	bls.n	8004ea6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004eec:	2300      	movs	r3, #0
 8004eee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <find_volume+0x140>
 8004ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004f04:	4413      	add	r3, r2
 8004f06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004f0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <find_volume+0x162>
 8004f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f16:	f7ff fefb 	bl	8004d10 <check_fs>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	e000      	b.n	8004f20 <find_volume+0x164>
 8004f1e:	2303      	movs	r3, #3
 8004f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d905      	bls.n	8004f38 <find_volume+0x17c>
 8004f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2e:	3301      	adds	r3, #1
 8004f30:	643b      	str	r3, [r7, #64]	; 0x40
 8004f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d9e1      	bls.n	8004efc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d101      	bne.n	8004f44 <find_volume+0x188>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e17d      	b.n	8005240 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d901      	bls.n	8004f50 <find_volume+0x194>
 8004f4c:	230d      	movs	r3, #13
 8004f4e:	e177      	b.n	8005240 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	3334      	adds	r3, #52	; 0x34
 8004f54:	330b      	adds	r3, #11
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe f93e 	bl	80031d8 <ld_word>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f62:	d001      	beq.n	8004f68 <find_volume+0x1ac>
 8004f64:	230d      	movs	r3, #13
 8004f66:	e16b      	b.n	8005240 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	3334      	adds	r3, #52	; 0x34
 8004f6c:	3316      	adds	r3, #22
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe f932 	bl	80031d8 <ld_word>
 8004f74:	4603      	mov	r3, r0
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <find_volume+0x1d0>
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	3334      	adds	r3, #52	; 0x34
 8004f82:	3324      	adds	r3, #36	; 0x24
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe f93f 	bl	8003208 <ld_dword>
 8004f8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f90:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	789b      	ldrb	r3, [r3, #2]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d005      	beq.n	8004fb0 <find_volume+0x1f4>
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	789b      	ldrb	r3, [r3, #2]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d001      	beq.n	8004fb0 <find_volume+0x1f4>
 8004fac:	230d      	movs	r3, #13
 8004fae:	e147      	b.n	8005240 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	789b      	ldrb	r3, [r3, #2]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	895b      	ldrh	r3, [r3, #10]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <find_volume+0x228>
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	895b      	ldrh	r3, [r3, #10]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	895b      	ldrh	r3, [r3, #10]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <find_volume+0x22c>
 8004fe4:	230d      	movs	r3, #13
 8004fe6:	e12b      	b.n	8005240 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	3334      	adds	r3, #52	; 0x34
 8004fec:	3311      	adds	r3, #17
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe f8f2 	bl	80031d8 <ld_word>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	891b      	ldrh	r3, [r3, #8]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <find_volume+0x252>
 800500a:	230d      	movs	r3, #13
 800500c:	e118      	b.n	8005240 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	3334      	adds	r3, #52	; 0x34
 8005012:	3313      	adds	r3, #19
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe f8df 	bl	80031d8 <ld_word>
 800501a:	4603      	mov	r3, r0
 800501c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800501e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <find_volume+0x276>
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	3334      	adds	r3, #52	; 0x34
 8005028:	3320      	adds	r3, #32
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe f8ec 	bl	8003208 <ld_dword>
 8005030:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	3334      	adds	r3, #52	; 0x34
 8005036:	330e      	adds	r3, #14
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe f8cd 	bl	80031d8 <ld_word>
 800503e:	4603      	mov	r3, r0
 8005040:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <find_volume+0x290>
 8005048:	230d      	movs	r3, #13
 800504a:	e0f9      	b.n	8005240 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800504c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	4413      	add	r3, r2
 8005052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005054:	8912      	ldrh	r2, [r2, #8]
 8005056:	0912      	lsrs	r2, r2, #4
 8005058:	b292      	uxth	r2, r2
 800505a:	4413      	add	r3, r2
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800505e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	429a      	cmp	r2, r3
 8005064:	d201      	bcs.n	800506a <find_volume+0x2ae>
 8005066:	230d      	movs	r3, #13
 8005068:	e0ea      	b.n	8005240 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800506a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005072:	8952      	ldrh	r2, [r2, #10]
 8005074:	fbb3 f3f2 	udiv	r3, r3, r2
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <find_volume+0x2cc>
 8005080:	230d      	movs	r3, #13
 8005082:	e0dd      	b.n	8005240 <find_volume+0x484>
 8005084:	2000288c 	.word	0x2000288c
		fmt = FS_FAT32;
 8005088:	2303      	movs	r3, #3
 800508a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005094:	4293      	cmp	r3, r2
 8005096:	d802      	bhi.n	800509e <find_volume+0x2e2>
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d802      	bhi.n	80050ae <find_volume+0x2f2>
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050ba:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80050bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80050be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c0:	441a      	add	r2, r3
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80050c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	441a      	add	r2, r3
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80050d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d11e      	bne.n	8005116 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	3334      	adds	r3, #52	; 0x34
 80050dc:	332a      	adds	r3, #42	; 0x2a
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe f87a 	bl	80031d8 <ld_word>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <find_volume+0x332>
 80050ea:	230d      	movs	r3, #13
 80050ec:	e0a8      	b.n	8005240 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	891b      	ldrh	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <find_volume+0x33e>
 80050f6:	230d      	movs	r3, #13
 80050f8:	e0a2      	b.n	8005240 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	3334      	adds	r3, #52	; 0x34
 80050fe:	332c      	adds	r3, #44	; 0x2c
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe f881 	bl	8003208 <ld_dword>
 8005106:	4602      	mov	r2, r0
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	647b      	str	r3, [r7, #68]	; 0x44
 8005114:	e01f      	b.n	8005156 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	891b      	ldrh	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <find_volume+0x366>
 800511e:	230d      	movs	r3, #13
 8005120:	e08e      	b.n	8005240 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005128:	441a      	add	r2, r3
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800512e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005132:	2b02      	cmp	r3, #2
 8005134:	d103      	bne.n	800513e <find_volume+0x382>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	e00a      	b.n	8005154 <find_volume+0x398>
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	085a      	lsrs	r2, r3, #1
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005154:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005160:	0a5b      	lsrs	r3, r3, #9
 8005162:	429a      	cmp	r2, r3
 8005164:	d201      	bcs.n	800516a <find_volume+0x3ae>
 8005166:	230d      	movs	r3, #13
 8005168:	e06a      	b.n	8005240 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f04f 32ff 	mov.w	r2, #4294967295
 8005170:	615a      	str	r2, [r3, #20]
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005184:	2b03      	cmp	r3, #3
 8005186:	d149      	bne.n	800521c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	3334      	adds	r3, #52	; 0x34
 800518c:	3330      	adds	r3, #48	; 0x30
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f822 	bl	80031d8 <ld_word>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d140      	bne.n	800521c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	3301      	adds	r3, #1
 800519e:	4619      	mov	r1, r3
 80051a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051a2:	f7fe fac9 	bl	8003738 <move_window>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d137      	bne.n	800521c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	2200      	movs	r2, #0
 80051b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	3334      	adds	r3, #52	; 0x34
 80051b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe f80c 	bl	80031d8 <ld_word>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d127      	bne.n	800521c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	3334      	adds	r3, #52	; 0x34
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe f819 	bl	8003208 <ld_dword>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <find_volume+0x48c>)
 80051da:	429a      	cmp	r2, r3
 80051dc:	d11e      	bne.n	800521c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	3334      	adds	r3, #52	; 0x34
 80051e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe f80e 	bl	8003208 <ld_dword>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <find_volume+0x490>)
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d113      	bne.n	800521c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	3334      	adds	r3, #52	; 0x34
 80051f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe f803 	bl	8003208 <ld_dword>
 8005202:	4602      	mov	r2, r0
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	3334      	adds	r3, #52	; 0x34
 800520c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005210:	4618      	mov	r0, r3
 8005212:	f7fd fff9 	bl	8003208 <ld_dword>
 8005216:	4602      	mov	r2, r0
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005222:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <find_volume+0x494>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <find_volume+0x494>)
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <find_volume+0x494>)
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800523a:	f7fe fa15 	bl	8003668 <clear_lock>
#endif
	return FR_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3758      	adds	r7, #88	; 0x58
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	41615252 	.word	0x41615252
 800524c:	61417272 	.word	0x61417272
 8005250:	20002890 	.word	0x20002890

08005254 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800525e:	2309      	movs	r3, #9
 8005260:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01c      	beq.n	80052a2 <validate+0x4e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d018      	beq.n	80052a2 <validate+0x4e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d013      	beq.n	80052a2 <validate+0x4e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	889a      	ldrh	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	88db      	ldrh	r3, [r3, #6]
 8005284:	429a      	cmp	r2, r3
 8005286:	d10c      	bne.n	80052a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fd ff04 	bl	800309c <disk_status>
 8005294:	4603      	mov	r3, r0
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <validate+0x4e>
			res = FR_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <validate+0x5a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	e000      	b.n	80052b0 <validate+0x5c>
 80052ae:	2300      	movs	r3, #0
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	6013      	str	r3, [r2, #0]
	return res;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80052d2:	f107 0310 	add.w	r3, r7, #16
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fcd5 	bl	8004c86 <get_ldnumber>
 80052dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da01      	bge.n	80052e8 <f_mount+0x28>
 80052e4:	230b      	movs	r3, #11
 80052e6:	e02b      	b.n	8005340 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <f_mount+0x88>)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80052f8:	69b8      	ldr	r0, [r7, #24]
 80052fa:	f7fe f9b5 	bl	8003668 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <f_mount+0x88>)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <f_mount+0x66>
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <f_mount+0x6a>
 8005326:	2300      	movs	r3, #0
 8005328:	e00a      	b.n	8005340 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800532a:	f107 010c 	add.w	r1, r7, #12
 800532e:	f107 0308 	add.w	r3, r7, #8
 8005332:	2200      	movs	r2, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fd41 	bl	8004dbc <find_volume>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000288c 	.word	0x2000288c

0800534c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8005352:	af00      	add	r7, sp, #0
 8005354:	f107 030c 	add.w	r3, r7, #12
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	6019      	str	r1, [r3, #0]
 8005360:	1dfb      	adds	r3, r7, #7
 8005362:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <f_open+0x26>
 800536e:	2309      	movs	r3, #9
 8005370:	e231      	b.n	80057d6 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005372:	1dfb      	adds	r3, r7, #7
 8005374:	1dfa      	adds	r2, r7, #7
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800537c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800537e:	1dfb      	adds	r3, r7, #7
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fd16 	bl	8004dbc <find_volume>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8005396:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 8210 	bne.w	80057c0 <f_open+0x474>
		dj.obj.fs = fs;
 80053a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80053a4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80053a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80053ac:	f107 0214 	add.w	r2, r7, #20
 80053b0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fbf0 	bl	8004ba4 <follow_path>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80053ca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11b      	bne.n	800540a <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80053d2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da03      	bge.n	80053e4 <f_open+0x98>
				res = FR_INVALID_NAME;
 80053dc:	2306      	movs	r3, #6
 80053de:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80053e2:	e012      	b.n	800540a <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80053e4:	1dfb      	adds	r3, r7, #7
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fd ffea 	bl	80033d8 <chk_lock>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800540a:	1dfb      	adds	r3, r7, #7
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f003 031c 	and.w	r3, r3, #28
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 809b 	beq.w	800554e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8005418:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800541c:	2b00      	cmp	r3, #0
 800541e:	d019      	beq.n	8005454 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005420:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005424:	2b04      	cmp	r3, #4
 8005426:	d10e      	bne.n	8005446 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005428:	f7fe f832 	bl	8003490 <enq_lock>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <f_open+0xf4>
 8005432:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff f904 	bl	8004644 <dir_register>
 800543c:	4603      	mov	r3, r0
 800543e:	e000      	b.n	8005442 <f_open+0xf6>
 8005440:	2312      	movs	r3, #18
 8005442:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005446:	1dfb      	adds	r3, r7, #7
 8005448:	1dfa      	adds	r2, r7, #7
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	f042 0208 	orr.w	r2, r2, #8
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e012      	b.n	800547a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005454:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8005458:	f003 0311 	and.w	r3, r3, #17
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <f_open+0x11c>
					res = FR_DENIED;
 8005460:	2307      	movs	r3, #7
 8005462:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8005466:	e008      	b.n	800547a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005468:	1dfb      	adds	r3, r7, #7
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <f_open+0x12e>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800547a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800547e:	2b00      	cmp	r3, #0
 8005480:	f040 8082 	bne.w	8005588 <f_open+0x23c>
 8005484:	1dfb      	adds	r3, r7, #7
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d07b      	beq.n	8005588 <f_open+0x23c>
				dw = GET_FATTIME();
 8005490:	f7fd fda6 	bl	8002fe0 <get_fattime>
 8005494:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005498:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800549c:	330e      	adds	r3, #14
 800549e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd feee 	bl	8003284 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80054a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80054ac:	3316      	adds	r3, #22
 80054ae:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fd fee6 	bl	8003284 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80054b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80054bc:	330b      	adds	r3, #11
 80054be:	2220      	movs	r2, #32
 80054c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80054c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054c6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe fe32 	bl	8004136 <ld_clust>
 80054d2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80054d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054da:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80054de:	2200      	movs	r2, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe fe47 	bl	8004174 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80054e6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80054ea:	331c      	adds	r3, #28
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fd fec8 	bl	8003284 <st_dword>
					fs->wflag = 1;
 80054f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054f8:	2201      	movs	r2, #1
 80054fa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80054fc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8005500:	2b00      	cmp	r3, #0
 8005502:	d041      	beq.n	8005588 <f_open+0x23c>
						dw = fs->winsect;
 8005504:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800550e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005512:	2200      	movs	r2, #0
 8005514:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe fb54 	bl	8003bc6 <remove_chain>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8005524:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005528:	2b00      	cmp	r3, #0
 800552a:	d12d      	bne.n	8005588 <f_open+0x23c>
							res = move_window(fs, dw);
 800552c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005530:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe f8ff 	bl	8003738 <move_window>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005540:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005544:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8005548:	3a01      	subs	r2, #1
 800554a:	611a      	str	r2, [r3, #16]
 800554c:	e01c      	b.n	8005588 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800554e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005552:	2b00      	cmp	r3, #0
 8005554:	d118      	bne.n	8005588 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005556:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <f_open+0x21e>
					res = FR_NO_FILE;
 8005562:	2304      	movs	r3, #4
 8005564:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8005568:	e00e      	b.n	8005588 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800556a:	1dfb      	adds	r3, r7, #7
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <f_open+0x23c>
 8005576:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <f_open+0x23c>
						res = FR_DENIED;
 8005582:	2307      	movs	r3, #7
 8005584:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8005588:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800558c:	2b00      	cmp	r3, #0
 800558e:	d136      	bne.n	80055fe <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005590:	1dfb      	adds	r3, r7, #7
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800559c:	1dfb      	adds	r3, r7, #7
 800559e:	1dfa      	adds	r2, r7, #7
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80055a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80055ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ae:	f107 030c 	add.w	r3, r7, #12
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80055b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055c2:	1dfb      	adds	r3, r7, #7
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80055da:	4611      	mov	r1, r2
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fd ff79 	bl	80034d4 <inc_lock>
 80055e2:	4602      	mov	r2, r0
 80055e4:	f107 030c 	add.w	r3, r7, #12
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80055ec:	f107 030c 	add.w	r3, r7, #12
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <f_open+0x2b2>
 80055f8:	2302      	movs	r3, #2
 80055fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80055fe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 80dc 	bne.w	80057c0 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005608:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800560c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fd8f 	bl	8004136 <ld_clust>
 8005618:	4602      	mov	r2, r0
 800561a:	f107 030c 	add.w	r3, r7, #12
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005622:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005626:	331c      	adds	r3, #28
 8005628:	4618      	mov	r0, r3
 800562a:	f7fd fded 	bl	8003208 <ld_dword>
 800562e:	4602      	mov	r2, r0
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005642:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005646:	f107 030c 	add.w	r3, r7, #12
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800564e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005652:	88da      	ldrh	r2, [r3, #6]
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	1dfa      	adds	r2, r7, #7
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005672:	f107 030c 	add.w	r3, r7, #12
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2200      	movs	r2, #0
 800567a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3330      	adds	r3, #48	; 0x30
 800568e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f7fd fe42 	bl	800331e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800569a:	1dfb      	adds	r3, r7, #7
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 808c 	beq.w	80057c0 <f_open+0x474>
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8085 	beq.w	80057c0 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80056b6:	f107 030c 	add.w	r3, r7, #12
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80056c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80056ca:	895b      	ldrh	r3, [r3, #10]
 80056cc:	025b      	lsls	r3, r3, #9
 80056ce:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80056d2:	f107 030c 	add.w	r3, r7, #12
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80056ea:	e01f      	b.n	800572c <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 80056ec:	f107 030c 	add.w	r3, r7, #12
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe f8d9 	bl	80038ae <get_fat>
 80056fc:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8005700:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8005704:	2b01      	cmp	r3, #1
 8005706:	d802      	bhi.n	800570e <f_open+0x3c2>
 8005708:	2302      	movs	r3, #2
 800570a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800570e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d102      	bne.n	800571e <f_open+0x3d2>
 8005718:	2301      	movs	r3, #1
 800571a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800571e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8005722:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800572c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <f_open+0x3f4>
 8005734:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8005738:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800573c:	429a      	cmp	r2, r3
 800573e:	d8d5      	bhi.n	80056ec <f_open+0x3a0>
				}
				fp->clust = clst;
 8005740:	f107 030c 	add.w	r3, r7, #12
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800574a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800574c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8005750:	2b00      	cmp	r3, #0
 8005752:	d135      	bne.n	80057c0 <f_open+0x474>
 8005754:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575c:	2b00      	cmp	r3, #0
 800575e:	d02f      	beq.n	80057c0 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005760:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005764:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe f881 	bl	8003870 <clust2sect>
 800576e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8005772:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <f_open+0x436>
						res = FR_INT_ERR;
 800577a:	2302      	movs	r3, #2
 800577c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8005780:	e01e      	b.n	80057c0 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005782:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005786:	0a5a      	lsrs	r2, r3, #9
 8005788:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800578c:	441a      	add	r2, r3
 800578e:	f107 030c 	add.w	r3, r7, #12
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005796:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800579a:	7858      	ldrb	r0, [r3, #1]
 800579c:	f107 030c 	add.w	r3, r7, #12
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	2301      	movs	r3, #1
 80057b0:	f7fd fcb4 	bl	800311c <disk_read>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <f_open+0x474>
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80057c0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <f_open+0x486>
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80057d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f107 0214 	add.w	r2, r7, #20
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fd27 	bl	8005254 <validate>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800580c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <f_read+0x44>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	7d5b      	ldrb	r3, [r3, #21]
 8005818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800581c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <f_read+0x4a>
 8005824:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005828:	e115      	b.n	8005a56 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	7d1b      	ldrb	r3, [r3, #20]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <f_read+0x5a>
 8005836:	2307      	movs	r3, #7
 8005838:	e10d      	b.n	8005a56 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	429a      	cmp	r2, r3
 800584c:	f240 80fe 	bls.w	8005a4c <f_read+0x26c>
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005854:	e0fa      	b.n	8005a4c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 80c6 	bne.w	80059f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	0a5b      	lsrs	r3, r3, #9
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	8952      	ldrh	r2, [r2, #10]
 800586e:	3a01      	subs	r2, #1
 8005870:	4013      	ands	r3, r2
 8005872:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d12f      	bne.n	80058da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
 8005888:	e013      	b.n	80058b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	4619      	mov	r1, r3
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7fe fa91 	bl	8003dc0 <clmt_clust>
 800589e:	6338      	str	r0, [r7, #48]	; 0x30
 80058a0:	e007      	b.n	80058b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7fd ffff 	bl	80038ae <get_fat>
 80058b0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d804      	bhi.n	80058c2 <f_read+0xe2>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	755a      	strb	r2, [r3, #21]
 80058be:	2302      	movs	r3, #2
 80058c0:	e0c9      	b.n	8005a56 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d104      	bne.n	80058d4 <f_read+0xf4>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	755a      	strb	r2, [r3, #21]
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0c0      	b.n	8005a56 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f7fd ffc4 	bl	8003870 <clust2sect>
 80058e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <f_read+0x11a>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2202      	movs	r2, #2
 80058f4:	755a      	strb	r2, [r3, #21]
 80058f6:	2302      	movs	r3, #2
 80058f8:	e0ad      	b.n	8005a56 <f_read+0x276>
			sect += csect;
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0a5b      	lsrs	r3, r3, #9
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d039      	beq.n	8005982 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	4413      	add	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	8952      	ldrh	r2, [r2, #10]
 8005918:	4293      	cmp	r3, r2
 800591a:	d905      	bls.n	8005928 <f_read+0x148>
					cc = fs->csize - csect;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	895b      	ldrh	r3, [r3, #10]
 8005920:	461a      	mov	r2, r3
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	7858      	ldrb	r0, [r3, #1]
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005932:	f7fd fbf3 	bl	800311c <disk_read>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <f_read+0x166>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	755a      	strb	r2, [r3, #21]
 8005942:	2301      	movs	r3, #1
 8005944:	e087      	b.n	8005a56 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	7d1b      	ldrb	r3, [r3, #20]
 800594a:	b25b      	sxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	da14      	bge.n	800597a <f_read+0x19a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595a:	429a      	cmp	r2, r3
 800595c:	d90d      	bls.n	800597a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	025b      	lsls	r3, r3, #9
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	18d0      	adds	r0, r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3330      	adds	r3, #48	; 0x30
 8005970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005974:	4619      	mov	r1, r3
 8005976:	f7fd fcb1 	bl	80032dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	025b      	lsls	r3, r3, #9
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005980:	e050      	b.n	8005a24 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d02e      	beq.n	80059ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	7d1b      	ldrb	r3, [r3, #20]
 8005990:	b25b      	sxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	da18      	bge.n	80059c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	7858      	ldrb	r0, [r3, #1]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	2301      	movs	r3, #1
 80059a6:	f7fd fbd9 	bl	800315c <disk_write>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <f_read+0x1da>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	755a      	strb	r2, [r3, #21]
 80059b6:	2301      	movs	r3, #1
 80059b8:	e04d      	b.n	8005a56 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	7d1b      	ldrb	r3, [r3, #20]
 80059be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	7858      	ldrb	r0, [r3, #1]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059d2:	2301      	movs	r3, #1
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	f7fd fba1 	bl	800311c <disk_read>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <f_read+0x20a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	755a      	strb	r2, [r3, #21]
 80059e6:	2301      	movs	r3, #1
 80059e8:	e035      	b.n	8005a56 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d901      	bls.n	8005a0a <f_read+0x22a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a18:	4413      	add	r3, r2
 8005a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a20:	f7fd fc5c 	bl	80032dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	4413      	add	r3, r2
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	619a      	str	r2, [r3, #24]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	441a      	add	r2, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f47f af01 	bne.w	8005856 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3738      	adds	r7, #56	; 0x38
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f107 0208 	add.w	r2, r7, #8
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fbf0 	bl	8005254 <validate>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d168      	bne.n	8005b50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7d1b      	ldrb	r3, [r3, #20]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d062      	beq.n	8005b50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7d1b      	ldrb	r3, [r3, #20]
 8005a8e:	b25b      	sxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da15      	bge.n	8005ac0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	7858      	ldrb	r0, [r3, #1]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f7fd fb5a 	bl	800315c <disk_write>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <f_sync+0x54>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e04f      	b.n	8005b52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	7d1b      	ldrb	r3, [r3, #20]
 8005ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005ac0:	f7fd fa8e 	bl	8002fe0 <get_fattime>
 8005ac4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fd fe32 	bl	8003738 <move_window>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d138      	bne.n	8005b50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	330b      	adds	r3, #11
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	330b      	adds	r3, #11
 8005aee:	f042 0220 	orr.w	r2, r2, #32
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	f7fe fb37 	bl	8004174 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f103 021c 	add.w	r2, r3, #28
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fd fbb6 	bl	8003284 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3316      	adds	r3, #22
 8005b1c:	6939      	ldr	r1, [r7, #16]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fd fbb0 	bl	8003284 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3312      	adds	r3, #18
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd fb8f 	bl	800324e <st_word>
					fs->wflag = 1;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2201      	movs	r2, #1
 8005b34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd fe2b 	bl	8003794 <sync_fs>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7d1b      	ldrb	r3, [r3, #20]
 8005b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ff7b 	bl	8005a5e <f_sync>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d118      	bne.n	8005ba4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f107 0208 	add.w	r2, r7, #8
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fb6a 	bl	8005254 <validate>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fd fd2e 	bl	80035f0 <dec_lock>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b090      	sub	sp, #64	; 0x40
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f107 0208 	add.w	r2, r7, #8
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fb47 	bl	8005254 <validate>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <f_lseek+0x2e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	7d5b      	ldrb	r3, [r3, #21]
 8005bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <f_lseek+0x3c>
 8005be4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005be8:	e1e6      	b.n	8005fb8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80d1 	beq.w	8005d96 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d15a      	bne.n	8005cb2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1d1a      	adds	r2, r3, #4
 8005c06:	627a      	str	r2, [r7, #36]	; 0x24
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d03a      	beq.n	8005c92 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	2300      	movs	r3, #0
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	3302      	adds	r3, #2
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	3301      	adds	r3, #1
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fd fe38 	bl	80038ae <get_fat>
 8005c3e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d804      	bhi.n	8005c50 <f_lseek+0xa2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	755a      	strb	r2, [r3, #21]
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e1b3      	b.n	8005fb8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d104      	bne.n	8005c62 <f_lseek+0xb4>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	755a      	strb	r2, [r3, #21]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e1aa      	b.n	8005fb8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d0de      	beq.n	8005c2a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d809      	bhi.n	8005c88 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	1d1a      	adds	r2, r3, #4
 8005c78:	627a      	str	r2, [r7, #36]	; 0x24
 8005c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	627a      	str	r2, [r7, #36]	; 0x24
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d3c4      	bcc.n	8005c1c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c98:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8005c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d803      	bhi.n	8005caa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e184      	b.n	8005fb4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005caa:	2311      	movs	r3, #17
 8005cac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005cb0:	e180      	b.n	8005fb4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d902      	bls.n	8005cc2 <f_lseek+0x114>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8172 	beq.w	8005fb4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fe f872 	bl	8003dc0 <clmt_clust>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fd fdc0 	bl	8003870 <clust2sect>
 8005cf0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <f_lseek+0x154>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	755a      	strb	r2, [r3, #21]
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e15a      	b.n	8005fb8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	0a5b      	lsrs	r3, r3, #9
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	8952      	ldrh	r2, [r2, #10]
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4413      	add	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8148 	beq.w	8005fb4 <f_lseek+0x406>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	f000 8142 	beq.w	8005fb4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7d1b      	ldrb	r3, [r3, #20]
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da18      	bge.n	8005d6c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	7858      	ldrb	r0, [r3, #1]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f7fd fa07 	bl	800315c <disk_write>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <f_lseek+0x1b0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	755a      	strb	r2, [r3, #21]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e12c      	b.n	8005fb8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	7d1b      	ldrb	r3, [r3, #20]
 8005d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	7858      	ldrb	r0, [r3, #1]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d76:	2301      	movs	r3, #1
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	f7fd f9cf 	bl	800311c <disk_read>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d004      	beq.n	8005d8e <f_lseek+0x1e0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	755a      	strb	r2, [r3, #21]
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e114      	b.n	8005fb8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	621a      	str	r2, [r3, #32]
 8005d94:	e10e      	b.n	8005fb4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d908      	bls.n	8005db2 <f_lseek+0x204>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	7d1b      	ldrb	r3, [r3, #20]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dc0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a7 	beq.w	8005f18 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	895b      	ldrh	r3, [r3, #10]
 8005dce:	025b      	lsls	r3, r3, #9
 8005dd0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	1e5a      	subs	r2, r3, #1
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	1e59      	subs	r1, r3, #1
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d30f      	bcc.n	8005e10 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	1e5a      	subs	r2, r3, #1
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	425b      	negs	r3, r3
 8005df8:	401a      	ands	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0e:	e022      	b.n	8005e56 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d119      	bne.n	8005e50 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fd ff35 	bl	8003c90 <create_chain>
 8005e26:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d104      	bne.n	8005e38 <f_lseek+0x28a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	755a      	strb	r2, [r3, #21]
 8005e34:	2302      	movs	r3, #2
 8005e36:	e0bf      	b.n	8005fb8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d104      	bne.n	8005e4a <f_lseek+0x29c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	755a      	strb	r2, [r3, #21]
 8005e46:	2301      	movs	r3, #1
 8005e48:	e0b6      	b.n	8005fb8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e4e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e54:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05d      	beq.n	8005f18 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8005e5c:	e03a      	b.n	8005ed4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7d1b      	ldrb	r3, [r3, #20]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd ff04 	bl	8003c90 <create_chain>
 8005e88:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <f_lseek+0x2f4>
							ofs = 0; break;
 8005e90:	2300      	movs	r3, #0
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	e022      	b.n	8005edc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fd fd07 	bl	80038ae <get_fat>
 8005ea0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d104      	bne.n	8005eb4 <f_lseek+0x306>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	755a      	strb	r2, [r3, #21]
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e081      	b.n	8005fb8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d904      	bls.n	8005ec4 <f_lseek+0x316>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d304      	bcc.n	8005ece <f_lseek+0x320>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	755a      	strb	r2, [r3, #21]
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e074      	b.n	8005fb8 <f_lseek+0x40a>
					fp->clust = clst;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d8c0      	bhi.n	8005e5e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	441a      	add	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d012      	beq.n	8005f18 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fcba 	bl	8003870 <clust2sect>
 8005efc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <f_lseek+0x360>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	755a      	strb	r2, [r3, #21]
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e054      	b.n	8005fb8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	0a5b      	lsrs	r3, r3, #9
 8005f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f14:	4413      	add	r3, r2
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699a      	ldr	r2, [r3, #24]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d90a      	bls.n	8005f3a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7d1b      	ldrb	r3, [r3, #20]
 8005f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d036      	beq.n	8005fb4 <f_lseek+0x406>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d031      	beq.n	8005fb4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7d1b      	ldrb	r3, [r3, #20]
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da18      	bge.n	8005f8c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	7858      	ldrb	r0, [r3, #1]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f7fd f8f7 	bl	800315c <disk_write>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <f_lseek+0x3d0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	755a      	strb	r2, [r3, #21]
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e01c      	b.n	8005fb8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7d1b      	ldrb	r3, [r3, #20]
 8005f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	7858      	ldrb	r0, [r3, #1]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f96:	2301      	movs	r3, #1
 8005f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f9a:	f7fd f8bf 	bl	800311c <disk_read>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <f_lseek+0x400>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	755a      	strb	r2, [r3, #21]
 8005faa:	2301      	movs	r3, #1
 8005fac:	e004      	b.n	8005fb8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8005fb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3740      	adds	r7, #64	; 0x40
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8005fd8:	7a5b      	ldrb	r3, [r3, #9]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d131      	bne.n	8006044 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8005fe2:	7a5b      	ldrb	r3, [r3, #9]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8005fea:	2100      	movs	r1, #0
 8005fec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8005ff0:	7a5b      	ldrb	r3, [r3, #9]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	4a17      	ldr	r2, [pc, #92]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8006000:	7a5b      	ldrb	r3, [r3, #9]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8006008:	4413      	add	r3, r2
 800600a:	79fa      	ldrb	r2, [r7, #7]
 800600c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 8006010:	7a5b      	ldrb	r3, [r3, #9]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	b2d1      	uxtb	r1, r2
 8006018:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <FATFS_LinkDriverEx+0x94>)
 800601a:	7251      	strb	r1, [r2, #9]
 800601c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800601e:	7dbb      	ldrb	r3, [r7, #22]
 8006020:	3330      	adds	r3, #48	; 0x30
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3301      	adds	r3, #1
 800602c:	223a      	movs	r2, #58	; 0x3a
 800602e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3302      	adds	r3, #2
 8006034:	222f      	movs	r2, #47	; 0x2f
 8006036:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3303      	adds	r3, #3
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
}
 8006046:	4618      	mov	r0, r3
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	200028b4 	.word	0x200028b4

08006058 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006062:	2200      	movs	r2, #0
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff ffaa 	bl	8005fc0 <FATFS_LinkDriverEx>
 800606c:	4603      	mov	r3, r0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	2b7f      	cmp	r3, #127	; 0x7f
 8006088:	d802      	bhi.n	8006090 <ff_convert+0x18>
		c = chr;
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	81fb      	strh	r3, [r7, #14]
 800608e:	e025      	b.n	80060dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2bff      	cmp	r3, #255	; 0xff
 800609a:	d805      	bhi.n	80060a8 <ff_convert+0x30>
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	3b80      	subs	r3, #128	; 0x80
 80060a0:	4a12      	ldr	r2, [pc, #72]	; (80060ec <ff_convert+0x74>)
 80060a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a6:	e000      	b.n	80060aa <ff_convert+0x32>
 80060a8:	2300      	movs	r3, #0
 80060aa:	81fb      	strh	r3, [r7, #14]
 80060ac:	e016      	b.n	80060dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80060ae:	2300      	movs	r3, #0
 80060b0:	81fb      	strh	r3, [r7, #14]
 80060b2:	e009      	b.n	80060c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <ff_convert+0x74>)
 80060b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d006      	beq.n	80060d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80060c2:	89fb      	ldrh	r3, [r7, #14]
 80060c4:	3301      	adds	r3, #1
 80060c6:	81fb      	strh	r3, [r7, #14]
 80060c8:	89fb      	ldrh	r3, [r7, #14]
 80060ca:	2b7f      	cmp	r3, #127	; 0x7f
 80060cc:	d9f2      	bls.n	80060b4 <ff_convert+0x3c>
 80060ce:	e000      	b.n	80060d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80060d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80060d2:	89fb      	ldrh	r3, [r7, #14]
 80060d4:	3380      	adds	r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80060dc:	89fb      	ldrh	r3, [r7, #14]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	0800be18 	.word	0x0800be18

080060f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006100:	d201      	bcs.n	8006106 <ff_wtoupper+0x16>
 8006102:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <ff_wtoupper+0x10c>)
 8006104:	e000      	b.n	8006108 <ff_wtoupper+0x18>
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <ff_wtoupper+0x110>)
 8006108:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	617a      	str	r2, [r7, #20]
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006114:	8a7b      	ldrh	r3, [r7, #18]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d068      	beq.n	80061ec <ff_wtoupper+0xfc>
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	8a7b      	ldrh	r3, [r7, #18]
 800611e:	429a      	cmp	r2, r3
 8006120:	d364      	bcc.n	80061ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	617a      	str	r2, [r7, #20]
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	823b      	strh	r3, [r7, #16]
 800612c:	8a3b      	ldrh	r3, [r7, #16]
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	81fb      	strh	r3, [r7, #14]
 8006132:	8a3b      	ldrh	r3, [r7, #16]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	8a79      	ldrh	r1, [r7, #18]
 800613c:	8a3b      	ldrh	r3, [r7, #16]
 800613e:	440b      	add	r3, r1
 8006140:	429a      	cmp	r2, r3
 8006142:	da49      	bge.n	80061d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006144:	89fb      	ldrh	r3, [r7, #14]
 8006146:	2b08      	cmp	r3, #8
 8006148:	d84f      	bhi.n	80061ea <ff_wtoupper+0xfa>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <ff_wtoupper+0x60>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006175 	.word	0x08006175
 8006154:	08006187 	.word	0x08006187
 8006158:	0800619d 	.word	0x0800619d
 800615c:	080061a5 	.word	0x080061a5
 8006160:	080061ad 	.word	0x080061ad
 8006164:	080061b5 	.word	0x080061b5
 8006168:	080061bd 	.word	0x080061bd
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061cd 	.word	0x080061cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	8a7b      	ldrh	r3, [r7, #18]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	80fb      	strh	r3, [r7, #6]
 8006184:	e027      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006186:	88fa      	ldrh	r2, [r7, #6]
 8006188:	8a7b      	ldrh	r3, [r7, #18]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	b29b      	uxth	r3, r3
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	80fb      	strh	r3, [r7, #6]
 800619a:	e01c      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	3b10      	subs	r3, #16
 80061a0:	80fb      	strh	r3, [r7, #6]
 80061a2:	e018      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	3b20      	subs	r3, #32
 80061a8:	80fb      	strh	r3, [r7, #6]
 80061aa:	e014      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	3b30      	subs	r3, #48	; 0x30
 80061b0:	80fb      	strh	r3, [r7, #6]
 80061b2:	e010      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	3b1a      	subs	r3, #26
 80061b8:	80fb      	strh	r3, [r7, #6]
 80061ba:	e00c      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	3308      	adds	r3, #8
 80061c0:	80fb      	strh	r3, [r7, #6]
 80061c2:	e008      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	3b50      	subs	r3, #80	; 0x50
 80061c8:	80fb      	strh	r3, [r7, #6]
 80061ca:	e004      	b.n	80061d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80061d2:	80fb      	strh	r3, [r7, #6]
 80061d4:	bf00      	nop
			}
			break;
 80061d6:	e008      	b.n	80061ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d195      	bne.n	800610a <ff_wtoupper+0x1a>
 80061de:	8a3b      	ldrh	r3, [r7, #16]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80061e8:	e78f      	b.n	800610a <ff_wtoupper+0x1a>
			break;
 80061ea:	bf00      	nop
	}

	return chr;
 80061ec:	88fb      	ldrh	r3, [r7, #6]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	0800bf18 	.word	0x0800bf18
 8006200:	0800c10c 	.word	0x0800c10c

08006204 <_SetPhysRAMAddr>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	4604      	mov	r4, r0
 8006208:	460e      	mov	r6, r1
 800620a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800620e:	212a      	movs	r1, #42	; 0x2a
 8006210:	4615      	mov	r5, r2
 8006212:	4798      	blx	r3
 8006214:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006216:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800621a:	4431      	add	r1, r6
 800621c:	4620      	mov	r0, r4
 800621e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006222:	4798      	blx	r3
 8006224:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006226:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800622a:	b2b7      	uxth	r7, r6
 800622c:	4439      	add	r1, r7
 800622e:	4620      	mov	r0, r4
 8006230:	b2c9      	uxtb	r1, r1
 8006232:	4798      	blx	r3
 8006234:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006236:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800623a:	4431      	add	r1, r6
 800623c:	4620      	mov	r0, r4
 800623e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006242:	4798      	blx	r3
 8006244:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006246:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800624a:	4439      	add	r1, r7
 800624c:	4620      	mov	r0, r4
 800624e:	b2c9      	uxtb	r1, r1
 8006250:	4798      	blx	r3
 8006252:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006256:	4620      	mov	r0, r4
 8006258:	212b      	movs	r1, #43	; 0x2b
 800625a:	4798      	blx	r3
 800625c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800625e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006262:	4429      	add	r1, r5
 8006264:	4620      	mov	r0, r4
 8006266:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800626a:	4798      	blx	r3
 800626c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800626e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006272:	b2ae      	uxth	r6, r5
 8006274:	4431      	add	r1, r6
 8006276:	4620      	mov	r0, r4
 8006278:	b2c9      	uxtb	r1, r1
 800627a:	4798      	blx	r3
 800627c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800627e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006282:	4429      	add	r1, r5
 8006284:	4620      	mov	r0, r4
 8006286:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800628a:	4798      	blx	r3
 800628c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800628e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006292:	4431      	add	r1, r6
 8006294:	4620      	mov	r0, r4
 8006296:	b2c9      	uxtb	r1, r1
 8006298:	4798      	blx	r3
 800629a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800629e:	4620      	mov	r0, r4
 80062a0:	212c      	movs	r1, #44	; 0x2c
 80062a2:	4798      	blx	r3
 80062a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062a6 <_SetRect>:
 80062a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062aa:	4604      	mov	r4, r0
 80062ac:	4688      	mov	r8, r1
 80062ae:	461f      	mov	r7, r3
 80062b0:	212a      	movs	r1, #42	; 0x2a
 80062b2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80062b6:	9d06      	ldr	r5, [sp, #24]
 80062b8:	4616      	mov	r6, r2
 80062ba:	4798      	blx	r3
 80062bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062c2:	4441      	add	r1, r8
 80062c4:	4620      	mov	r0, r4
 80062c6:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80062ca:	4798      	blx	r3
 80062cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062d2:	4441      	add	r1, r8
 80062d4:	4620      	mov	r0, r4
 80062d6:	b2c9      	uxtb	r1, r1
 80062d8:	4798      	blx	r3
 80062da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062e0:	4439      	add	r1, r7
 80062e2:	4620      	mov	r0, r4
 80062e4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80062e8:	4798      	blx	r3
 80062ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062f0:	4439      	add	r1, r7
 80062f2:	4620      	mov	r0, r4
 80062f4:	b2c9      	uxtb	r1, r1
 80062f6:	4798      	blx	r3
 80062f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80062fc:	4620      	mov	r0, r4
 80062fe:	212b      	movs	r1, #43	; 0x2b
 8006300:	4798      	blx	r3
 8006302:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006304:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006308:	4431      	add	r1, r6
 800630a:	4620      	mov	r0, r4
 800630c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006310:	4798      	blx	r3
 8006312:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006314:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006318:	4431      	add	r1, r6
 800631a:	4620      	mov	r0, r4
 800631c:	b2c9      	uxtb	r1, r1
 800631e:	4798      	blx	r3
 8006320:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006322:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006326:	4429      	add	r1, r5
 8006328:	4620      	mov	r0, r4
 800632a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800632e:	4798      	blx	r3
 8006330:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006332:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006336:	4429      	add	r1, r5
 8006338:	4620      	mov	r0, r4
 800633a:	b2c9      	uxtb	r1, r1
 800633c:	4798      	blx	r3
 800633e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006342:	4620      	mov	r0, r4
 8006344:	212c      	movs	r1, #44	; 0x2c
 8006346:	4798      	blx	r3
 8006348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800634c <_SetOrientation>:
 800634c:	b513      	push	{r0, r1, r4, lr}
 800634e:	4a0d      	ldr	r2, [pc, #52]	; (8006384 <_SetOrientation+0x38>)
 8006350:	4604      	mov	r4, r0
 8006352:	6851      	ldr	r1, [r2, #4]
 8006354:	6810      	ldr	r0, [r2, #0]
 8006356:	466b      	mov	r3, sp
 8006358:	c303      	stmia	r3!, {r0, r1}
 800635a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800635e:	4620      	mov	r0, r4
 8006360:	2136      	movs	r1, #54	; 0x36
 8006362:	4798      	blx	r3
 8006364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006366:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8006368:	aa02      	add	r2, sp, #8
 800636a:	4413      	add	r3, r2
 800636c:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8006370:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8006374:	4319      	orrs	r1, r3
 8006376:	4620      	mov	r0, r4
 8006378:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800637c:	b289      	uxth	r1, r1
 800637e:	4798      	blx	r3
 8006380:	b002      	add	sp, #8
 8006382:	bd10      	pop	{r4, pc}
 8006384:	0800bd30 	.word	0x0800bd30

08006388 <_ReadPixel_16bpp_B8>:
 8006388:	b513      	push	{r0, r1, r4, lr}
 800638a:	4604      	mov	r4, r0
 800638c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8006390:	202e      	movs	r0, #46	; 0x2e
 8006392:	4798      	blx	r3
 8006394:	6a21      	ldr	r1, [r4, #32]
 8006396:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800639a:	4668      	mov	r0, sp
 800639c:	3103      	adds	r1, #3
 800639e:	4798      	blx	r3
 80063a0:	6a22      	ldr	r2, [r4, #32]
 80063a2:	ab00      	add	r3, sp, #0
 80063a4:	4413      	add	r3, r2
 80063a6:	f81d 2002 	ldrb.w	r2, [sp, r2]
 80063aa:	7859      	ldrb	r1, [r3, #1]
 80063ac:	7898      	ldrb	r0, [r3, #2]
 80063ae:	08d2      	lsrs	r2, r2, #3
 80063b0:	0889      	lsrs	r1, r1, #2
 80063b2:	02d2      	lsls	r2, r2, #11
 80063b4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80063b8:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 80063bc:	b002      	add	sp, #8
 80063be:	bd10      	pop	{r4, pc}

080063c0 <_ReadPixel_16bpp_B16_I>:
 80063c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063c2:	4604      	mov	r4, r0
 80063c4:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 80063c8:	202e      	movs	r0, #46	; 0x2e
 80063ca:	4798      	blx	r3
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80063d2:	4668      	mov	r0, sp
 80063d4:	3102      	adds	r1, #2
 80063d6:	4798      	blx	r3
 80063d8:	6a23      	ldr	r3, [r4, #32]
 80063da:	a900      	add	r1, sp, #0
 80063dc:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 80063e0:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 80063e4:	8852      	ldrh	r2, [r2, #2]
 80063e6:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 80063ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80063ee:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 80063f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80063f6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80063fa:	b004      	add	sp, #16
 80063fc:	bd10      	pop	{r4, pc}

080063fe <_SetReg_B8>:
 80063fe:	b538      	push	{r3, r4, r5, lr}
 8006400:	4604      	mov	r4, r0
 8006402:	460d      	mov	r5, r1
 8006404:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8006408:	0a08      	lsrs	r0, r1, #8
 800640a:	4798      	blx	r3
 800640c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006410:	b2e8      	uxtb	r0, r5
 8006412:	4798      	blx	r3
 8006414:	bd38      	pop	{r3, r4, r5, pc}

08006416 <_SetReg_B16>:
 8006416:	b508      	push	{r3, lr}
 8006418:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800641c:	4608      	mov	r0, r1
 800641e:	4798      	blx	r3
 8006420:	bd08      	pop	{r3, pc}

08006422 <_WritePara_B8>:
 8006422:	b508      	push	{r3, lr}
 8006424:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006428:	b2c8      	uxtb	r0, r1
 800642a:	4798      	blx	r3
 800642c:	bd08      	pop	{r3, pc}

0800642e <_WritePara_B16>:
 800642e:	b508      	push	{r3, lr}
 8006430:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8006434:	4608      	mov	r0, r1
 8006436:	4798      	blx	r3
 8006438:	bd08      	pop	{r3, pc}
	...

0800643c <_SetInterface>:
 800643c:	2908      	cmp	r1, #8
 800643e:	d002      	beq.n	8006446 <_SetInterface+0xa>
 8006440:	2910      	cmp	r1, #16
 8006442:	d005      	beq.n	8006450 <_SetInterface+0x14>
 8006444:	4770      	bx	lr
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <_SetInterface+0x24>)
 8006448:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <_SetInterface+0x28>)
 800644e:	e003      	b.n	8006458 <_SetInterface+0x1c>
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <_SetInterface+0x2c>)
 8006452:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <_SetInterface+0x30>)
 8006458:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	080063ff 	.word	0x080063ff
 8006464:	08006423 	.word	0x08006423
 8006468:	08006417 	.word	0x08006417
 800646c:	0800642f 	.word	0x0800642f

08006470 <_ReadRect_16bpp_B8>:
 8006470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006472:	b085      	sub	sp, #20
 8006474:	6884      	ldr	r4, [r0, #8]
 8006476:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006478:	9700      	str	r7, [sp, #0]
 800647a:	1abd      	subs	r5, r7, r2
 800647c:	1a58      	subs	r0, r3, r1
 800647e:	3501      	adds	r5, #1
 8006480:	fb00 5505 	mla	r5, r0, r5, r5
 8006484:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006488:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800648a:	4620      	mov	r0, r4
 800648c:	47b8      	blx	r7
 800648e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006492:	202e      	movs	r0, #46	; 0x2e
 8006494:	4798      	blx	r3
 8006496:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800649a:	6a21      	ldr	r1, [r4, #32]
 800649c:	a802      	add	r0, sp, #8
 800649e:	4798      	blx	r3
 80064a0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80064a4:	a802      	add	r0, sp, #8
 80064a6:	2103      	movs	r1, #3
 80064a8:	4798      	blx	r3
 80064aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80064ae:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	0892      	lsrs	r2, r2, #2
 80064b6:	02db      	lsls	r3, r3, #11
 80064b8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80064bc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80064c0:	3d01      	subs	r5, #1
 80064c2:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80064c6:	f826 3b02 	strh.w	r3, [r6], #2
 80064ca:	d1e9      	bne.n	80064a0 <_ReadRect_16bpp_B8+0x30>
 80064cc:	b005      	add	sp, #20
 80064ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064d0 <_ReadRect_16bpp_B16_I>:
 80064d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d2:	b087      	sub	sp, #28
 80064d4:	6884      	ldr	r4, [r0, #8]
 80064d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80064d8:	9700      	str	r7, [sp, #0]
 80064da:	1abd      	subs	r5, r7, r2
 80064dc:	1a58      	subs	r0, r3, r1
 80064de:	3501      	adds	r5, #1
 80064e0:	fb00 5505 	mla	r5, r0, r5, r5
 80064e4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80064e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80064ea:	4620      	mov	r0, r4
 80064ec:	47b8      	blx	r7
 80064ee:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 80064f2:	202e      	movs	r0, #46	; 0x2e
 80064f4:	4798      	blx	r3
 80064f6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80064fa:	6a21      	ldr	r1, [r4, #32]
 80064fc:	a802      	add	r0, sp, #8
 80064fe:	4798      	blx	r3
 8006500:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8006504:	a802      	add	r0, sp, #8
 8006506:	2102      	movs	r1, #2
 8006508:	4798      	blx	r3
 800650a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800650e:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8006512:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8006516:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800651a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800651e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8006522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006526:	3d01      	subs	r5, #1
 8006528:	f826 3b02 	strh.w	r3, [r6], #2
 800652c:	d1e8      	bne.n	8006500 <_ReadRect_16bpp_B16_I+0x30>
 800652e:	b007      	add	sp, #28
 8006530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006534 <GUIDRV_FlexColor_SetFunc66709>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4604      	mov	r4, r0
 8006538:	f000 fde2 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 800653c:	68a3      	ldr	r3, [r4, #8]
 800653e:	4a12      	ldr	r2, [pc, #72]	; (8006588 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 8006540:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006544:	4a11      	ldr	r2, [pc, #68]	; (800658c <GUIDRV_FlexColor_SetFunc66709+0x58>)
 8006546:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800654a:	4a11      	ldr	r2, [pc, #68]	; (8006590 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800654c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006550:	4a10      	ldr	r2, [pc, #64]	; (8006594 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 8006552:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006556:	2200      	movs	r2, #0
 8006558:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800655c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006560:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 8006562:	490e      	ldr	r1, [pc, #56]	; (800659c <GUIDRV_FlexColor_SetFunc66709+0x68>)
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800656a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800656c:	6809      	ldr	r1, [r1, #0]
 800656e:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8006572:	f022 0203 	bic.w	r2, r2, #3
 8006576:	490a      	ldr	r1, [pc, #40]	; (80065a0 <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 8006578:	84da      	strh	r2, [r3, #38]	; 0x26
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <GUIDRV_FlexColor_SetFunc66709+0x70>)
 800657c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8006580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006584:	bd10      	pop	{r4, pc}
 8006586:	bf00      	nop
 8006588:	08006205 	.word	0x08006205
 800658c:	080062a7 	.word	0x080062a7
 8006590:	0800634d 	.word	0x0800634d
 8006594:	08006389 	.word	0x08006389
 8006598:	20000038 	.word	0x20000038
 800659c:	20000034 	.word	0x20000034
 80065a0:	08006471 	.word	0x08006471
 80065a4:	0800643d 	.word	0x0800643d

080065a8 <_WriteU16_A1>:
 80065a8:	b508      	push	{r3, lr}
 80065aa:	0a0b      	lsrs	r3, r1, #8
 80065ac:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 80065b0:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 80065b4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 80065b8:	2102      	movs	r1, #2
 80065ba:	3071      	adds	r0, #113	; 0x71
 80065bc:	4798      	blx	r3
 80065be:	bd08      	pop	{r3, pc}

080065c0 <_WriteDataMP>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	6e86      	ldr	r6, [r0, #104]	; 0x68
 80065c4:	4604      	mov	r4, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	4615      	mov	r5, r2
 80065ca:	2300      	movs	r3, #0
 80065cc:	b1a5      	cbz	r5, 80065f8 <_WriteDataMP+0x38>
 80065ce:	f837 2b02 	ldrh.w	r2, [r7], #2
 80065d2:	4630      	mov	r0, r6
 80065d4:	3301      	adds	r3, #1
 80065d6:	0a11      	lsrs	r1, r2, #8
 80065d8:	2bfa      	cmp	r3, #250	; 0xfa
 80065da:	f800 1b02 	strb.w	r1, [r0], #2
 80065de:	7072      	strb	r2, [r6, #1]
 80065e0:	d107      	bne.n	80065f2 <_WriteDataMP+0x32>
 80065e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80065e6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80065e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80065ec:	4798      	blx	r3
 80065ee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80065f0:	2300      	movs	r3, #0
 80065f2:	3d01      	subs	r5, #1
 80065f4:	4606      	mov	r6, r0
 80065f6:	e7e9      	b.n	80065cc <_WriteDataMP+0xc>
 80065f8:	b123      	cbz	r3, 8006604 <_WriteDataMP+0x44>
 80065fa:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80065fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006600:	0059      	lsls	r1, r3, #1
 8006602:	4790      	blx	r2
 8006604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006606 <_ReadData>:
 8006606:	b508      	push	{r3, lr}
 8006608:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800660c:	4798      	blx	r3
 800660e:	bd08      	pop	{r3, pc}

08006610 <_WriteData>:
 8006610:	b289      	uxth	r1, r1
 8006612:	f7ff bfc9 	b.w	80065a8 <_WriteU16_A1>
	...

08006618 <_FillRect>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	4f40      	ldr	r7, [pc, #256]	; (8006720 <_FillRect+0x108>)
 800661e:	6884      	ldr	r4, [r0, #8]
 8006620:	4682      	mov	sl, r0
 8006622:	6838      	ldr	r0, [r7, #0]
 8006624:	7c00      	ldrb	r0, [r0, #16]
 8006626:	f010 0f01 	tst.w	r0, #1
 800662a:	b085      	sub	sp, #20
 800662c:	460e      	mov	r6, r1
 800662e:	4615      	mov	r5, r2
 8006630:	4698      	mov	r8, r3
 8006632:	ebc1 0903 	rsb	r9, r1, r3
 8006636:	d045      	beq.n	80066c4 <_FillRect+0xac>
 8006638:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800663c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800663e:	4285      	cmp	r5, r0
 8006640:	dc6b      	bgt.n	800671a <_FillRect+0x102>
 8006642:	f8d4 c0cc 	ldr.w	ip, [r4, #204]	; 0xcc
 8006646:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006648:	f1bc 0f00 	cmp.w	ip, #0
 800664c:	d101      	bne.n	8006652 <_FillRect+0x3a>
 800664e:	46b4      	mov	ip, r6
 8006650:	e007      	b.n	8006662 <_FillRect+0x4a>
 8006652:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8006656:	4650      	mov	r0, sl
 8006658:	4631      	mov	r1, r6
 800665a:	462a      	mov	r2, r5
 800665c:	4643      	mov	r3, r8
 800665e:	47e0      	blx	ip
 8006660:	e011      	b.n	8006686 <_FillRect+0x6e>
 8006662:	45c4      	cmp	ip, r8
 8006664:	dc0e      	bgt.n	8006684 <_FillRect+0x6c>
 8006666:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800666a:	f8cd c00c 	str.w	ip, [sp, #12]
 800666e:	4661      	mov	r1, ip
 8006670:	4650      	mov	r0, sl
 8006672:	462a      	mov	r2, r5
 8006674:	4798      	blx	r3
 8006676:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800667a:	f827 0b02 	strh.w	r0, [r7], #2
 800667e:	f10c 0c01 	add.w	ip, ip, #1
 8006682:	e7ee      	b.n	8006662 <_FillRect+0x4a>
 8006684:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006686:	1ebb      	subs	r3, r7, #2
 8006688:	f109 0c01 	add.w	ip, r9, #1
 800668c:	445f      	add	r7, fp
 800668e:	42bb      	cmp	r3, r7
 8006690:	d005      	beq.n	800669e <_FillRect+0x86>
 8006692:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006694:	8859      	ldrh	r1, [r3, #2]
 8006696:	404a      	eors	r2, r1
 8006698:	f823 2f02 	strh.w	r2, [r3, #2]!
 800669c:	e7f7      	b.n	800668e <_FillRect+0x76>
 800669e:	9500      	str	r5, [sp, #0]
 80066a0:	462a      	mov	r2, r5
 80066a2:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80066a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80066aa:	4620      	mov	r0, r4
 80066ac:	4631      	mov	r1, r6
 80066ae:	4643      	mov	r3, r8
 80066b0:	47b8      	blx	r7
 80066b2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80066b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80066b8:	4620      	mov	r0, r4
 80066ba:	4662      	mov	r2, ip
 80066bc:	f7ff ff80 	bl	80065c0 <_WriteDataMP>
 80066c0:	3501      	adds	r5, #1
 80066c2:	e7bb      	b.n	800663c <_FillRect+0x24>
 80066c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80066c6:	9000      	str	r0, [sp, #0]
 80066c8:	1a85      	subs	r5, r0, r2
 80066ca:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80066ce:	4620      	mov	r0, r4
 80066d0:	47b0      	blx	r6
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f109 0901 	add.w	r9, r9, #1
 80066de:	fb05 9509 	mla	r5, r5, r9, r9
 80066e2:	f3c3 2807 	ubfx	r8, r3, #8, #8
 80066e6:	fa5f f983 	uxtb.w	r9, r3
 80066ea:	2301      	movs	r3, #1
 80066ec:	b1ad      	cbz	r5, 800671a <_FillRect+0x102>
 80066ee:	2df9      	cmp	r5, #249	; 0xf9
 80066f0:	bf34      	ite	cc
 80066f2:	462f      	movcc	r7, r5
 80066f4:	27f9      	movcs	r7, #249	; 0xf9
 80066f6:	0079      	lsls	r1, r7, #1
 80066f8:	b143      	cbz	r3, 800670c <_FillRect+0xf4>
 80066fa:	4633      	mov	r3, r6
 80066fc:	1872      	adds	r2, r6, r1
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <_FillRect+0xf4>
 8006702:	f883 8001 	strb.w	r8, [r3, #1]
 8006706:	f803 9f02 	strb.w	r9, [r3, #2]!
 800670a:	e7f8      	b.n	80066fe <_FillRect+0xe6>
 800670c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8006710:	1c70      	adds	r0, r6, #1
 8006712:	4790      	blx	r2
 8006714:	1bed      	subs	r5, r5, r7
 8006716:	2300      	movs	r3, #0
 8006718:	e7e8      	b.n	80066ec <_FillRect+0xd4>
 800671a:	b005      	add	sp, #20
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	20000044 	.word	0x20000044

08006724 <_DrawBitmap>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	b08d      	sub	sp, #52	; 0x34
 800672a:	6885      	ldr	r5, [r0, #8]
 800672c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800672e:	9305      	str	r3, [sp, #20]
 8006730:	1e7b      	subs	r3, r7, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	9009      	str	r0, [sp, #36]	; 0x24
 8006736:	9108      	str	r1, [sp, #32]
 8006738:	920a      	str	r2, [sp, #40]	; 0x28
 800673a:	950b      	str	r5, [sp, #44]	; 0x2c
 800673c:	d903      	bls.n	8006746 <_DrawBitmap+0x22>
 800673e:	2f04      	cmp	r7, #4
 8006740:	d001      	beq.n	8006746 <_DrawBitmap+0x22>
 8006742:	2f08      	cmp	r7, #8
 8006744:	d106      	bne.n	8006754 <_DrawBitmap+0x30>
 8006746:	4b91      	ldr	r3, [pc, #580]	; (800698c <_DrawBitmap+0x268>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	7c1b      	ldrb	r3, [r3, #16]
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d010      	beq.n	8006776 <_DrawBitmap+0x52>
 8006754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006756:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8006758:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800675a:	9908      	ldr	r1, [sp, #32]
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	443a      	add	r2, r7
 8006760:	4429      	add	r1, r5
 8006762:	3a01      	subs	r2, #1
 8006764:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006766:	9200      	str	r2, [sp, #0]
 8006768:	440b      	add	r3, r1
 800676a:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800676e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006770:	4628      	mov	r0, r5
 8006772:	3b01      	subs	r3, #1
 8006774:	47a0      	blx	r4
 8006776:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800677a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800677c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800677e:	ebc5 030b 	rsb	r3, r5, fp
 8006782:	42bb      	cmp	r3, r7
 8006784:	f280 8253 	bge.w	8006c2e <_DrawBitmap+0x50a>
 8006788:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800678a:	1e7b      	subs	r3, r7, #1
 800678c:	2b0f      	cmp	r3, #15
 800678e:	f200 8247 	bhi.w	8006c20 <_DrawBitmap+0x4fc>
 8006792:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006796:	0010      	.short	0x0010
 8006798:	024500bb 	.word	0x024500bb
 800679c:	02450144 	.word	0x02450144
 80067a0:	02450245 	.word	0x02450245
 80067a4:	024501db 	.word	0x024501db
 80067a8:	02450245 	.word	0x02450245
 80067ac:	02450245 	.word	0x02450245
 80067b0:	02450245 	.word	0x02450245
 80067b4:	0240      	.short	0x0240
 80067b6:	4b75      	ldr	r3, [pc, #468]	; (800698c <_DrawBitmap+0x268>)
 80067b8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80067ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	7c1b      	ldrb	r3, [r3, #16]
 80067c2:	687d      	ldr	r5, [r7, #4]
 80067c4:	683e      	ldr	r6, [r7, #0]
 80067c6:	9507      	str	r5, [sp, #28]
 80067c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80067ca:	9d08      	ldr	r5, [sp, #32]
 80067cc:	f003 0303 	and.w	r3, r3, #3
 80067d0:	443d      	add	r5, r7
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	9503      	str	r5, [sp, #12]
 80067d6:	d01c      	beq.n	8006812 <_DrawBitmap+0xee>
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d071      	beq.n	80068c0 <_DrawBitmap+0x19c>
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d06f      	beq.n	80068c0 <_DrawBitmap+0x19c>
 80067e0:	9f05      	ldr	r7, [sp, #20]
 80067e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80067e4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80067e8:	f898 2000 	ldrb.w	r2, [r8]
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	412b      	asrs	r3, r5
 80067f0:	421a      	tst	r2, r3
 80067f2:	bf16      	itet	ne
 80067f4:	9807      	ldrne	r0, [sp, #28]
 80067f6:	b2b1      	uxtheq	r1, r6
 80067f8:	b281      	uxthne	r1, r0
 80067fa:	3501      	adds	r5, #1
 80067fc:	4620      	mov	r0, r4
 80067fe:	f7ff fed3 	bl	80065a8 <_WriteU16_A1>
 8006802:	2d08      	cmp	r5, #8
 8006804:	bf04      	itt	eq
 8006806:	f108 0801 	addeq.w	r8, r8, #1
 800680a:	2500      	moveq	r5, #0
 800680c:	3f01      	subs	r7, #1
 800680e:	d1eb      	bne.n	80067e8 <_DrawBitmap+0xc4>
 8006810:	e206      	b.n	8006c20 <_DrawBitmap+0x4fc>
 8006812:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006814:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006818:	9506      	str	r5, [sp, #24]
 800681a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800681e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006822:	2500      	movs	r5, #0
 8006824:	4656      	mov	r6, sl
 8006826:	462b      	mov	r3, r5
 8006828:	9f06      	ldr	r7, [sp, #24]
 800682a:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800682e:	783a      	ldrb	r2, [r7, #0]
 8006830:	fa4c fc08 	asr.w	ip, ip, r8
 8006834:	ea12 0c0c 	ands.w	ip, r2, ip
 8006838:	d00b      	beq.n	8006852 <_DrawBitmap+0x12e>
 800683a:	b913      	cbnz	r3, 8006842 <_DrawBitmap+0x11e>
 800683c:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8006840:	46b2      	mov	sl, r6
 8006842:	9f07      	ldr	r7, [sp, #28]
 8006844:	f8a9 7000 	strh.w	r7, [r9]
 8006848:	3501      	adds	r5, #1
 800684a:	f109 0902 	add.w	r9, r9, #2
 800684e:	2301      	movs	r3, #1
 8006850:	e017      	b.n	8006882 <_DrawBitmap+0x15e>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d114      	bne.n	8006880 <_DrawBitmap+0x15c>
 8006856:	f8cd b000 	str.w	fp, [sp]
 800685a:	1e73      	subs	r3, r6, #1
 800685c:	f8cd c010 	str.w	ip, [sp, #16]
 8006860:	4620      	mov	r0, r4
 8006862:	4651      	mov	r1, sl
 8006864:	465a      	mov	r2, fp
 8006866:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800686a:	47b8      	blx	r7
 800686c:	462a      	mov	r2, r5
 800686e:	4620      	mov	r0, r4
 8006870:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006872:	f7ff fea5 	bl	80065c0 <_WriteDataMP>
 8006876:	f8dd c010 	ldr.w	ip, [sp, #16]
 800687a:	4665      	mov	r5, ip
 800687c:	4663      	mov	r3, ip
 800687e:	e000      	b.n	8006882 <_DrawBitmap+0x15e>
 8006880:	4663      	mov	r3, ip
 8006882:	f108 0801 	add.w	r8, r8, #1
 8006886:	f1b8 0f08 	cmp.w	r8, #8
 800688a:	f106 0601 	add.w	r6, r6, #1
 800688e:	d104      	bne.n	800689a <_DrawBitmap+0x176>
 8006890:	9f06      	ldr	r7, [sp, #24]
 8006892:	3701      	adds	r7, #1
 8006894:	9706      	str	r7, [sp, #24]
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	9a05      	ldr	r2, [sp, #20]
 800689c:	9f03      	ldr	r7, [sp, #12]
 800689e:	443a      	add	r2, r7
 80068a0:	42b2      	cmp	r2, r6
 80068a2:	d1c1      	bne.n	8006828 <_DrawBitmap+0x104>
 80068a4:	9f05      	ldr	r7, [sp, #20]
 80068a6:	1e7b      	subs	r3, r7, #1
 80068a8:	9f03      	ldr	r7, [sp, #12]
 80068aa:	443b      	add	r3, r7
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	f000 81b7 	beq.w	8006c20 <_DrawBitmap+0x4fc>
 80068b2:	f8cd b000 	str.w	fp, [sp]
 80068b6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80068ba:	4620      	mov	r0, r4
 80068bc:	4651      	mov	r1, sl
 80068be:	e13f      	b.n	8006b40 <_DrawBitmap+0x41c>
 80068c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80068c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80068c6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80068c8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068cc:	9f03      	ldr	r7, [sp, #12]
 80068ce:	782a      	ldrb	r2, [r5, #0]
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	4133      	asrs	r3, r6
 80068d4:	44b9      	add	r9, r7
 80068d6:	421a      	tst	r2, r3
 80068d8:	ebc8 0909 	rsb	r9, r8, r9
 80068dc:	d00d      	beq.n	80068fa <_DrawBitmap+0x1d6>
 80068de:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80068e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e4:	4649      	mov	r1, r9
 80068e6:	465a      	mov	r2, fp
 80068e8:	4798      	blx	r3
 80068ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068ec:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
 80068f0:	4043      	eors	r3, r0
 80068f2:	4649      	mov	r1, r9
 80068f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f6:	465a      	mov	r2, fp
 80068f8:	47b8      	blx	r7
 80068fa:	3601      	adds	r6, #1
 80068fc:	2e08      	cmp	r6, #8
 80068fe:	bf04      	itt	eq
 8006900:	3501      	addeq	r5, #1
 8006902:	2600      	moveq	r6, #0
 8006904:	f1b8 0801 	subs.w	r8, r8, #1
 8006908:	d1de      	bne.n	80068c8 <_DrawBitmap+0x1a4>
 800690a:	e189      	b.n	8006c20 <_DrawBitmap+0x4fc>
 800690c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800690e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006910:	68ac      	ldr	r4, [r5, #8]
 8006912:	2f00      	cmp	r7, #0
 8006914:	f000 8184 	beq.w	8006c20 <_DrawBitmap+0x4fc>
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <_DrawBitmap+0x268>)
 800691a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f895 a000 	ldrb.w	sl, [r5]
 8006922:	7c1b      	ldrb	r3, [r3, #16]
 8006924:	f013 0303 	ands.w	r3, r3, #3
 8006928:	d011      	beq.n	800694e <_DrawBitmap+0x22a>
 800692a:	2b02      	cmp	r3, #2
 800692c:	f040 8178 	bne.w	8006c20 <_DrawBitmap+0x4fc>
 8006930:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006932:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006936:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006938:	9703      	str	r7, [sp, #12]
 800693a:	44a9      	add	r9, r5
 800693c:	46a8      	mov	r8, r5
 800693e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006940:	9507      	str	r5, [sp, #28]
 8006942:	2500      	movs	r5, #0
 8006944:	f8cd 9018 	str.w	r9, [sp, #24]
 8006948:	464e      	mov	r6, r9
 800694a:	462b      	mov	r3, r5
 800694c:	e040      	b.n	80069d0 <_DrawBitmap+0x2ac>
 800694e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006950:	9e05      	ldr	r6, [sp, #20]
 8006952:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006954:	f1c5 0303 	rsb	r3, r5, #3
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	f1c3 0206 	rsb	r2, r3, #6
 800695e:	21c0      	movs	r1, #192	; 0xc0
 8006960:	fa41 f202 	asr.w	r2, r1, r2
 8006964:	ea02 020a 	and.w	r2, r2, sl
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
 800696c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800696e:	4620      	mov	r0, r4
 8006970:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8006974:	3501      	adds	r5, #1
 8006976:	f7ff fe17 	bl	80065a8 <_WriteU16_A1>
 800697a:	2d04      	cmp	r5, #4
 800697c:	d103      	bne.n	8006986 <_DrawBitmap+0x262>
 800697e:	f897 a001 	ldrb.w	sl, [r7, #1]
 8006982:	2500      	movs	r5, #0
 8006984:	3701      	adds	r7, #1
 8006986:	3e01      	subs	r6, #1
 8006988:	d1e4      	bne.n	8006954 <_DrawBitmap+0x230>
 800698a:	e149      	b.n	8006c20 <_DrawBitmap+0x4fc>
 800698c:	20000044 	.word	0x20000044
 8006990:	b913      	cbnz	r3, 8006998 <_DrawBitmap+0x274>
 8006992:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006994:	9703      	str	r7, [sp, #12]
 8006996:	9606      	str	r6, [sp, #24]
 8006998:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800699a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800699e:	9f03      	ldr	r7, [sp, #12]
 80069a0:	803b      	strh	r3, [r7, #0]
 80069a2:	3702      	adds	r7, #2
 80069a4:	3501      	adds	r5, #1
 80069a6:	9703      	str	r7, [sp, #12]
 80069a8:	2301      	movs	r3, #1
 80069aa:	f108 0801 	add.w	r8, r8, #1
 80069ae:	f1b8 0f04 	cmp.w	r8, #4
 80069b2:	f106 0601 	add.w	r6, r6, #1
 80069b6:	d106      	bne.n	80069c6 <_DrawBitmap+0x2a2>
 80069b8:	9f07      	ldr	r7, [sp, #28]
 80069ba:	f897 a001 	ldrb.w	sl, [r7, #1]
 80069be:	3701      	adds	r7, #1
 80069c0:	9707      	str	r7, [sp, #28]
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	9a05      	ldr	r2, [sp, #20]
 80069c8:	444a      	add	r2, r9
 80069ca:	42b2      	cmp	r2, r6
 80069cc:	f000 80ad 	beq.w	8006b2a <_DrawBitmap+0x406>
 80069d0:	f1c8 0203 	rsb	r2, r8, #3
 80069d4:	0052      	lsls	r2, r2, #1
 80069d6:	f1c2 0106 	rsb	r1, r2, #6
 80069da:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 80069de:	fa4c fc01 	asr.w	ip, ip, r1
 80069e2:	ea0c 0c0a 	and.w	ip, ip, sl
 80069e6:	fa3c fc02 	lsrs.w	ip, ip, r2
 80069ea:	d1d1      	bne.n	8006990 <_DrawBitmap+0x26c>
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d114      	bne.n	8006a1a <_DrawBitmap+0x2f6>
 80069f0:	f8cd b000 	str.w	fp, [sp]
 80069f4:	1e73      	subs	r3, r6, #1
 80069f6:	f8cd c010 	str.w	ip, [sp, #16]
 80069fa:	4620      	mov	r0, r4
 80069fc:	9906      	ldr	r1, [sp, #24]
 80069fe:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006a02:	465a      	mov	r2, fp
 8006a04:	47b8      	blx	r7
 8006a06:	462a      	mov	r2, r5
 8006a08:	4620      	mov	r0, r4
 8006a0a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006a0c:	f7ff fdd8 	bl	80065c0 <_WriteDataMP>
 8006a10:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006a14:	4665      	mov	r5, ip
 8006a16:	4663      	mov	r3, ip
 8006a18:	e7c7      	b.n	80069aa <_DrawBitmap+0x286>
 8006a1a:	4663      	mov	r3, ip
 8006a1c:	e7c5      	b.n	80069aa <_DrawBitmap+0x286>
 8006a1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a20:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006a22:	68ac      	ldr	r4, [r5, #8]
 8006a24:	2f00      	cmp	r7, #0
 8006a26:	f000 80fb 	beq.w	8006c20 <_DrawBitmap+0x4fc>
 8006a2a:	4b82      	ldr	r3, [pc, #520]	; (8006c34 <_DrawBitmap+0x510>)
 8006a2c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f895 a000 	ldrb.w	sl, [r5]
 8006a34:	7c1b      	ldrb	r3, [r3, #16]
 8006a36:	f013 0303 	ands.w	r3, r3, #3
 8006a3a:	d011      	beq.n	8006a60 <_DrawBitmap+0x33c>
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f040 80ef 	bne.w	8006c20 <_DrawBitmap+0x4fc>
 8006a42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a48:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006a4a:	9703      	str	r7, [sp, #12]
 8006a4c:	44a9      	add	r9, r5
 8006a4e:	46a8      	mov	r8, r5
 8006a50:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006a52:	9507      	str	r5, [sp, #28]
 8006a54:	2500      	movs	r5, #0
 8006a56:	f8cd 9018 	str.w	r9, [sp, #24]
 8006a5a:	464e      	mov	r6, r9
 8006a5c:	462b      	mov	r3, r5
 8006a5e:	e03d      	b.n	8006adc <_DrawBitmap+0x3b8>
 8006a60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a62:	9e05      	ldr	r6, [sp, #20]
 8006a64:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006a66:	f1c5 0301 	rsb	r3, r5, #1
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	f1c3 0204 	rsb	r2, r3, #4
 8006a70:	21f0      	movs	r1, #240	; 0xf0
 8006a72:	fa41 f202 	asr.w	r2, r1, r2
 8006a76:	ea02 020a 	and.w	r2, r2, sl
 8006a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006a80:	4620      	mov	r0, r4
 8006a82:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8006a86:	3501      	adds	r5, #1
 8006a88:	f7ff fd8e 	bl	80065a8 <_WriteU16_A1>
 8006a8c:	2d02      	cmp	r5, #2
 8006a8e:	d103      	bne.n	8006a98 <_DrawBitmap+0x374>
 8006a90:	f897 a001 	ldrb.w	sl, [r7, #1]
 8006a94:	2500      	movs	r5, #0
 8006a96:	3701      	adds	r7, #1
 8006a98:	3e01      	subs	r6, #1
 8006a9a:	d1e4      	bne.n	8006a66 <_DrawBitmap+0x342>
 8006a9c:	e0c0      	b.n	8006c20 <_DrawBitmap+0x4fc>
 8006a9e:	b913      	cbnz	r3, 8006aa6 <_DrawBitmap+0x382>
 8006aa0:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8006aa2:	9703      	str	r7, [sp, #12]
 8006aa4:	9606      	str	r6, [sp, #24]
 8006aa6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006aa8:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8006aac:	9f03      	ldr	r7, [sp, #12]
 8006aae:	803b      	strh	r3, [r7, #0]
 8006ab0:	3702      	adds	r7, #2
 8006ab2:	3501      	adds	r5, #1
 8006ab4:	9703      	str	r7, [sp, #12]
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f108 0801 	add.w	r8, r8, #1
 8006abc:	f1b8 0f02 	cmp.w	r8, #2
 8006ac0:	f106 0601 	add.w	r6, r6, #1
 8006ac4:	d106      	bne.n	8006ad4 <_DrawBitmap+0x3b0>
 8006ac6:	9f07      	ldr	r7, [sp, #28]
 8006ac8:	f897 a001 	ldrb.w	sl, [r7, #1]
 8006acc:	3701      	adds	r7, #1
 8006ace:	9707      	str	r7, [sp, #28]
 8006ad0:	f04f 0800 	mov.w	r8, #0
 8006ad4:	9a05      	ldr	r2, [sp, #20]
 8006ad6:	444a      	add	r2, r9
 8006ad8:	42b2      	cmp	r2, r6
 8006ada:	d026      	beq.n	8006b2a <_DrawBitmap+0x406>
 8006adc:	f1c8 0201 	rsb	r2, r8, #1
 8006ae0:	0092      	lsls	r2, r2, #2
 8006ae2:	f1c2 0104 	rsb	r1, r2, #4
 8006ae6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8006aea:	fa4c fc01 	asr.w	ip, ip, r1
 8006aee:	ea0c 0c0a 	and.w	ip, ip, sl
 8006af2:	fa3c fc02 	lsrs.w	ip, ip, r2
 8006af6:	d1d2      	bne.n	8006a9e <_DrawBitmap+0x37a>
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d114      	bne.n	8006b26 <_DrawBitmap+0x402>
 8006afc:	f8cd b000 	str.w	fp, [sp]
 8006b00:	1e73      	subs	r3, r6, #1
 8006b02:	f8cd c010 	str.w	ip, [sp, #16]
 8006b06:	4620      	mov	r0, r4
 8006b08:	9906      	ldr	r1, [sp, #24]
 8006b0a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006b0e:	465a      	mov	r2, fp
 8006b10:	47b8      	blx	r7
 8006b12:	462a      	mov	r2, r5
 8006b14:	4620      	mov	r0, r4
 8006b16:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006b18:	f7ff fd52 	bl	80065c0 <_WriteDataMP>
 8006b1c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006b20:	4665      	mov	r5, ip
 8006b22:	4663      	mov	r3, ip
 8006b24:	e7c8      	b.n	8006ab8 <_DrawBitmap+0x394>
 8006b26:	4663      	mov	r3, ip
 8006b28:	e7c6      	b.n	8006ab8 <_DrawBitmap+0x394>
 8006b2a:	9f05      	ldr	r7, [sp, #20]
 8006b2c:	1e7b      	subs	r3, r7, #1
 8006b2e:	444b      	add	r3, r9
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	d075      	beq.n	8006c20 <_DrawBitmap+0x4fc>
 8006b34:	f8cd b000 	str.w	fp, [sp]
 8006b38:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006b3c:	9906      	ldr	r1, [sp, #24]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	465a      	mov	r2, fp
 8006b42:	47b0      	blx	r6
 8006b44:	4620      	mov	r0, r4
 8006b46:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006b48:	462a      	mov	r2, r5
 8006b4a:	e067      	b.n	8006c1c <_DrawBitmap+0x4f8>
 8006b4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b4e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006b50:	68ac      	ldr	r4, [r5, #8]
 8006b52:	2f00      	cmp	r7, #0
 8006b54:	d064      	beq.n	8006c20 <_DrawBitmap+0x4fc>
 8006b56:	4b37      	ldr	r3, [pc, #220]	; (8006c34 <_DrawBitmap+0x510>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	7c1b      	ldrb	r3, [r3, #16]
 8006b5c:	f013 0303 	ands.w	r3, r3, #3
 8006b60:	d009      	beq.n	8006b76 <_DrawBitmap+0x452>
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d15c      	bne.n	8006c20 <_DrawBitmap+0x4fc>
 8006b66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b6a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8006b6e:	2600      	movs	r6, #0
 8006b70:	464f      	mov	r7, r9
 8006b72:	4633      	mov	r3, r6
 8006b74:	e022      	b.n	8006bbc <_DrawBitmap+0x498>
 8006b76:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b7a:	9f05      	ldr	r7, [sp, #20]
 8006b7c:	443b      	add	r3, r7
 8006b7e:	1b5b      	subs	r3, r3, r5
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd4d      	ble.n	8006c20 <_DrawBitmap+0x4fc>
 8006b84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b88:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 8006b90:	f7ff fd0a 	bl	80065a8 <_WriteU16_A1>
 8006b94:	e7f0      	b.n	8006b78 <_DrawBitmap+0x454>
 8006b96:	b913      	cbnz	r3, 8006b9e <_DrawBitmap+0x47a>
 8006b98:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8006b9c:	46b9      	mov	r9, r7
 8006b9e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006ba0:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8006ba4:	f8a8 3000 	strh.w	r3, [r8]
 8006ba8:	3601      	adds	r6, #1
 8006baa:	f108 0802 	add.w	r8, r8, #2
 8006bae:	2301      	movs	r3, #1
 8006bb0:	9a08      	ldr	r2, [sp, #32]
 8006bb2:	9d05      	ldr	r5, [sp, #20]
 8006bb4:	3701      	adds	r7, #1
 8006bb6:	442a      	add	r2, r5
 8006bb8:	42ba      	cmp	r2, r7
 8006bba:	d01c      	beq.n	8006bf6 <_DrawBitmap+0x4d2>
 8006bbc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006bbe:	9808      	ldr	r0, [sp, #32]
 8006bc0:	1a2a      	subs	r2, r5, r0
 8006bc2:	f812 a007 	ldrb.w	sl, [r2, r7]
 8006bc6:	f1ba 0f00 	cmp.w	sl, #0
 8006bca:	d1e4      	bne.n	8006b96 <_DrawBitmap+0x472>
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d110      	bne.n	8006bf2 <_DrawBitmap+0x4ce>
 8006bd0:	f8cd b000 	str.w	fp, [sp]
 8006bd4:	1e7b      	subs	r3, r7, #1
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4649      	mov	r1, r9
 8006bda:	465a      	mov	r2, fp
 8006bdc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8006be0:	47a8      	blx	r5
 8006be2:	4632      	mov	r2, r6
 8006be4:	4620      	mov	r0, r4
 8006be6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006be8:	f7ff fcea 	bl	80065c0 <_WriteDataMP>
 8006bec:	4656      	mov	r6, sl
 8006bee:	4653      	mov	r3, sl
 8006bf0:	e7de      	b.n	8006bb0 <_DrawBitmap+0x48c>
 8006bf2:	4653      	mov	r3, sl
 8006bf4:	e7dc      	b.n	8006bb0 <_DrawBitmap+0x48c>
 8006bf6:	9f08      	ldr	r7, [sp, #32]
 8006bf8:	1e6b      	subs	r3, r5, #1
 8006bfa:	443b      	add	r3, r7
 8006bfc:	b186      	cbz	r6, 8006c20 <_DrawBitmap+0x4fc>
 8006bfe:	f8cd b000 	str.w	fp, [sp]
 8006c02:	4620      	mov	r0, r4
 8006c04:	4649      	mov	r1, r9
 8006c06:	465a      	mov	r2, fp
 8006c08:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8006c0c:	47a8      	blx	r5
 8006c0e:	4620      	mov	r0, r4
 8006c10:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006c12:	4632      	mov	r2, r6
 8006c14:	e002      	b.n	8006c1c <_DrawBitmap+0x4f8>
 8006c16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c18:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006c1a:	9a05      	ldr	r2, [sp, #20]
 8006c1c:	f7ff fcd0 	bl	80065c0 <_WriteDataMP>
 8006c20:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006c22:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8006c24:	443d      	add	r5, r7
 8006c26:	9519      	str	r5, [sp, #100]	; 0x64
 8006c28:	f10b 0b01 	add.w	fp, fp, #1
 8006c2c:	e5a5      	b.n	800677a <_DrawBitmap+0x56>
 8006c2e:	b00d      	add	sp, #52	; 0x34
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	20000044 	.word	0x20000044

08006c38 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f000 fa60 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 8006c40:	68a4      	ldr	r4, [r4, #8]
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 8006c44:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8006c48:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 8006c4a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 8006c50:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 8006c56:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 8006c5c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8006c60:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 8006c62:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8006c66:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8006c6a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006c74:	2108      	movs	r1, #8
 8006c76:	4798      	blx	r3
 8006c78:	2310      	movs	r3, #16
 8006c7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c7c:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 8006c7e:	6463      	str	r3, [r4, #68]	; 0x44
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08006725 	.word	0x08006725
 8006c88:	08006619 	.word	0x08006619
 8006c8c:	0800704f 	.word	0x0800704f
 8006c90:	08006fbf 	.word	0x08006fbf
 8006c94:	08006607 	.word	0x08006607
 8006c98:	08006611 	.word	0x08006611
 8006c9c:	0800c974 	.word	0x0800c974

08006ca0 <_Log2PhysX_X0Y0S0>:
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4770      	bx	lr

08006ca4 <_Log2PhysX_X1Y0S0>:
 8006ca4:	6800      	ldr	r0, [r0, #0]
 8006ca6:	1a40      	subs	r0, r0, r1
 8006ca8:	3801      	subs	r0, #1
 8006caa:	4770      	bx	lr

08006cac <_Log2PhysX_X0Y1S0>:
 8006cac:	4608      	mov	r0, r1
 8006cae:	4770      	bx	lr

08006cb0 <_Log2PhysX_X1Y1S0>:
 8006cb0:	6800      	ldr	r0, [r0, #0]
 8006cb2:	1a40      	subs	r0, r0, r1
 8006cb4:	3801      	subs	r0, #1
 8006cb6:	4770      	bx	lr

08006cb8 <_Log2PhysX_X0Y0S1>:
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4770      	bx	lr

08006cbc <_Log2PhysX_X1Y0S1>:
 8006cbc:	6840      	ldr	r0, [r0, #4]
 8006cbe:	1a80      	subs	r0, r0, r2
 8006cc0:	3801      	subs	r0, #1
 8006cc2:	4770      	bx	lr

08006cc4 <_Log2PhysX_X0Y1S1>:
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4770      	bx	lr

08006cc8 <_Log2PhysX_X1Y1S1>:
 8006cc8:	6840      	ldr	r0, [r0, #4]
 8006cca:	1a80      	subs	r0, r0, r2
 8006ccc:	3801      	subs	r0, #1
 8006cce:	4770      	bx	lr

08006cd0 <_Log2PhysY_X0Y0S0>:
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4770      	bx	lr

08006cd4 <_Log2PhysY_X1Y0S0>:
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4770      	bx	lr

08006cd8 <_Log2PhysY_X0Y1S0>:
 8006cd8:	6840      	ldr	r0, [r0, #4]
 8006cda:	1a80      	subs	r0, r0, r2
 8006cdc:	3801      	subs	r0, #1
 8006cde:	4770      	bx	lr

08006ce0 <_Log2PhysY_X1Y1S0>:
 8006ce0:	6840      	ldr	r0, [r0, #4]
 8006ce2:	1a80      	subs	r0, r0, r2
 8006ce4:	3801      	subs	r0, #1
 8006ce6:	4770      	bx	lr

08006ce8 <_Log2PhysY_X0Y0S1>:
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4770      	bx	lr

08006cec <_Log2PhysY_X1Y0S1>:
 8006cec:	4608      	mov	r0, r1
 8006cee:	4770      	bx	lr

08006cf0 <_Log2PhysY_X0Y1S1>:
 8006cf0:	6800      	ldr	r0, [r0, #0]
 8006cf2:	1a40      	subs	r0, r0, r1
 8006cf4:	3801      	subs	r0, #1
 8006cf6:	4770      	bx	lr

08006cf8 <_Log2PhysY_X1Y1S1>:
 8006cf8:	6800      	ldr	r0, [r0, #0]
 8006cfa:	1a40      	subs	r0, r0, r1
 8006cfc:	3801      	subs	r0, #1
 8006cfe:	4770      	bx	lr

08006d00 <_SetPixelIndex>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	6884      	ldr	r4, [r0, #8]
 8006d04:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 8006d08:	47a0      	blx	r4
 8006d0a:	bd10      	pop	{r4, pc}

08006d0c <_GetPixelIndex>:
 8006d0c:	b508      	push	{r3, lr}
 8006d0e:	6883      	ldr	r3, [r0, #8]
 8006d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d14:	4798      	blx	r3
 8006d16:	bd08      	pop	{r3, pc}

08006d18 <_XorPixel>:
 8006d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	460f      	mov	r7, r1
 8006d1e:	4616      	mov	r6, r2
 8006d20:	6885      	ldr	r5, [r0, #8]
 8006d22:	f7ff fff3 	bl	8006d0c <_GetPixelIndex>
 8006d26:	9001      	str	r0, [sp, #4]
 8006d28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006d2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4639      	mov	r1, r7
 8006d32:	4632      	mov	r2, r6
 8006d34:	ea8e 0303 	eor.w	r3, lr, r3
 8006d38:	f7ff ffe2 	bl	8006d00 <_SetPixelIndex>
 8006d3c:	b003      	add	sp, #12
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d40 <_DrawHLine>:
 8006d40:	b513      	push	{r0, r1, r4, lr}
 8006d42:	6884      	ldr	r4, [r0, #8]
 8006d44:	9200      	str	r2, [sp, #0]
 8006d46:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8006d4a:	47a0      	blx	r4
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <_DrawVLine>:
 8006d50:	b513      	push	{r0, r1, r4, lr}
 8006d52:	6884      	ldr	r4, [r0, #8]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	47a0      	blx	r4
 8006d5e:	b002      	add	sp, #8
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <_FillRect>:
 8006d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d64:	9c06      	ldr	r4, [sp, #24]
 8006d66:	6885      	ldr	r5, [r0, #8]
 8006d68:	9400      	str	r4, [sp, #0]
 8006d6a:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
 8006d6e:	47a0      	blx	r4
 8006d70:	b003      	add	sp, #12
 8006d72:	bd30      	pop	{r4, r5, pc}

08006d74 <_DrawBitmap>:
 8006d74:	b530      	push	{r4, r5, lr}
 8006d76:	b087      	sub	sp, #28
 8006d78:	6885      	ldr	r5, [r0, #8]
 8006d7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d7c:	9400      	str	r4, [sp, #0]
 8006d7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d80:	9401      	str	r4, [sp, #4]
 8006d82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006d84:	9402      	str	r4, [sp, #8]
 8006d86:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006d88:	9403      	str	r4, [sp, #12]
 8006d8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006d8c:	9404      	str	r4, [sp, #16]
 8006d8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006d90:	9405      	str	r4, [sp, #20]
 8006d92:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
 8006d96:	47a0      	blx	r4
 8006d98:	b007      	add	sp, #28
 8006d9a:	bd30      	pop	{r4, r5, pc}

08006d9c <_GetDevFunc_SetRect>:
 8006d9c:	4770      	bx	lr
	...

08006da0 <_GetDevFunc_SetRectOutside>:
 8006da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006da2:	9e07      	ldr	r6, [sp, #28]
 8006da4:	6884      	ldr	r4, [r0, #8]
 8006da6:	4d0c      	ldr	r5, [pc, #48]	; (8006dd8 <_GetDevFunc_SetRectOutside+0x38>)
 8006da8:	b176      	cbz	r6, 8006dc8 <_GetDevFunc_SetRectOutside+0x28>
 8006daa:	6828      	ldr	r0, [r5, #0]
 8006dac:	b988      	cbnz	r0, 8006dd2 <_GetDevFunc_SetRectOutside+0x32>
 8006dae:	9806      	ldr	r0, [sp, #24]
 8006db0:	9000      	str	r0, [sp, #0]
 8006db2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006db6:	4620      	mov	r0, r4
 8006db8:	47b0      	blx	r6
 8006dba:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <_GetDevFunc_SetRectOutside+0x3c>)
 8006dc2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8006dc6:	e004      	b.n	8006dd2 <_GetDevFunc_SetRectOutside+0x32>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b113      	cbz	r3, 8006dd2 <_GetDevFunc_SetRectOutside+0x32>
 8006dcc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8006dd0:	602e      	str	r6, [r5, #0]
 8006dd2:	b002      	add	sp, #8
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200028c0 	.word	0x200028c0
 8006ddc:	08006d9d 	.word	0x08006d9d

08006de0 <_ReadPixelCust_16bpp>:
 8006de0:	b508      	push	{r3, lr}
 8006de2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006de4:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8006de8:	6990      	ldr	r0, [r2, #24]
 8006dea:	4798      	blx	r3
 8006dec:	bd08      	pop	{r3, pc}

08006dee <_ReadPixelCust_18bpp>:
 8006dee:	b508      	push	{r3, lr}
 8006df0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006df2:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8006df6:	6990      	ldr	r0, [r2, #24]
 8006df8:	4798      	blx	r3
 8006dfa:	bd08      	pop	{r3, pc}

08006dfc <_ReadRectCust_16bpp>:
 8006dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006e02:	6884      	ldr	r4, [r0, #8]
 8006e04:	9500      	str	r5, [sp, #0]
 8006e06:	4617      	mov	r7, r2
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006e0e:	4699      	mov	r9, r3
 8006e10:	4688      	mov	r8, r1
 8006e12:	1bed      	subs	r5, r5, r7
 8006e14:	47b0      	blx	r6
 8006e16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e18:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8006e1c:	6988      	ldr	r0, [r1, #24]
 8006e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e20:	ebc8 0809 	rsb	r8, r8, r9
 8006e24:	1c6a      	adds	r2, r5, #1
 8006e26:	fb08 2202 	mla	r2, r8, r2, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	b003      	add	sp, #12
 8006e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e32 <_ReadRectCust_18bpp>:
 8006e32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006e38:	6884      	ldr	r4, [r0, #8]
 8006e3a:	9500      	str	r5, [sp, #0]
 8006e3c:	4617      	mov	r7, r2
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006e44:	4699      	mov	r9, r3
 8006e46:	4688      	mov	r8, r1
 8006e48:	1bed      	subs	r5, r5, r7
 8006e4a:	47b0      	blx	r6
 8006e4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e4e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8006e52:	6988      	ldr	r0, [r1, #24]
 8006e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e56:	ebc8 0809 	rsb	r8, r8, r9
 8006e5a:	1c6a      	adds	r2, r5, #1
 8006e5c:	fb08 2202 	mla	r2, r8, r2, r2
 8006e60:	4798      	blx	r3
 8006e62:	b003      	add	sp, #12
 8006e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e68 <_GetDevFunc>:
 8006e68:	3901      	subs	r1, #1
 8006e6a:	2917      	cmp	r1, #23
 8006e6c:	d828      	bhi.n	8006ec0 <_GetDevFunc+0x58>
 8006e6e:	e8df f001 	tbb	[pc, r1]
 8006e72:	2714      	.short	0x2714
 8006e74:	27272727 	.word	0x27272727
 8006e78:	0e272727 	.word	0x0e272727
 8006e7c:	0c191210 	.word	0x0c191210
 8006e80:	27272729 	.word	0x27272729
 8006e84:	23272727 	.word	0x23272727
 8006e88:	251e      	.short	0x251e
 8006e8a:	480f      	ldr	r0, [pc, #60]	; (8006ec8 <_GetDevFunc+0x60>)
 8006e8c:	4770      	bx	lr
 8006e8e:	480f      	ldr	r0, [pc, #60]	; (8006ecc <_GetDevFunc+0x64>)
 8006e90:	4770      	bx	lr
 8006e92:	480f      	ldr	r0, [pc, #60]	; (8006ed0 <_GetDevFunc+0x68>)
 8006e94:	4770      	bx	lr
 8006e96:	480f      	ldr	r0, [pc, #60]	; (8006ed4 <_GetDevFunc+0x6c>)
 8006e98:	4770      	bx	lr
 8006e9a:	6803      	ldr	r3, [r0, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8006ea2:	4770      	bx	lr
 8006ea4:	6803      	ldr	r3, [r0, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8006eac:	4770      	bx	lr
 8006eae:	6803      	ldr	r3, [r0, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8006eb6:	4770      	bx	lr
 8006eb8:	4807      	ldr	r0, [pc, #28]	; (8006ed8 <_GetDevFunc+0x70>)
 8006eba:	4770      	bx	lr
 8006ebc:	4807      	ldr	r0, [pc, #28]	; (8006edc <_GetDevFunc+0x74>)
 8006ebe:	4770      	bx	lr
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4770      	bx	lr
 8006ec4:	4806      	ldr	r0, [pc, #24]	; (8006ee0 <_GetDevFunc+0x78>)
 8006ec6:	4770      	bx	lr
 8006ec8:	08007261 	.word	0x08007261
 8006ecc:	08007237 	.word	0x08007237
 8006ed0:	08007223 	.word	0x08007223
 8006ed4:	080071d9 	.word	0x080071d9
 8006ed8:	0800713d 	.word	0x0800713d
 8006edc:	08006da1 	.word	0x08006da1
 8006ee0:	0800724b 	.word	0x0800724b

08006ee4 <_GetDevProp>:
 8006ee4:	3901      	subs	r1, #1
 8006ee6:	6880      	ldr	r0, [r0, #8]
 8006ee8:	290d      	cmp	r1, #13
 8006eea:	d823      	bhi.n	8006f34 <_GetDevProp+0x50>
 8006eec:	e8df f001 	tbb	[pc, r1]
 8006ef0:	0f0d0b09 	.word	0x0f0d0b09
 8006ef4:	11222222 	.word	0x11222222
 8006ef8:	13252507 	.word	0x13252507
 8006efc:	1d18      	.short	0x1d18
 8006efe:	2000      	movs	r0, #0
 8006f00:	4770      	bx	lr
 8006f02:	6800      	ldr	r0, [r0, #0]
 8006f04:	4770      	bx	lr
 8006f06:	6840      	ldr	r0, [r0, #4]
 8006f08:	4770      	bx	lr
 8006f0a:	6880      	ldr	r0, [r0, #8]
 8006f0c:	4770      	bx	lr
 8006f0e:	68c0      	ldr	r0, [r0, #12]
 8006f10:	4770      	bx	lr
 8006f12:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006f14:	4770      	bx	lr
 8006f16:	b188      	cbz	r0, 8006f3c <_GetDevProp+0x58>
 8006f18:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006f1a:	f000 0001 	and.w	r0, r0, #1
 8006f1e:	4770      	bx	lr
 8006f20:	b160      	cbz	r0, 8006f3c <_GetDevProp+0x58>
 8006f22:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006f24:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006f28:	4770      	bx	lr
 8006f2a:	b138      	cbz	r0, 8006f3c <_GetDevProp+0x58>
 8006f2c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006f2e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8006f32:	4770      	bx	lr
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	4770      	bx	lr
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	4770      	bx	lr

08006f3e <_GetDevData>:
 8006f3e:	6883      	ldr	r3, [r0, #8]
 8006f40:	2901      	cmp	r1, #1
 8006f42:	bf0c      	ite	eq
 8006f44:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8006f46:	2000      	movne	r0, #0
 8006f48:	4770      	bx	lr

08006f4a <_GetRect>:
 8006f4a:	6883      	ldr	r3, [r0, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	800a      	strh	r2, [r1, #0]
 8006f50:	804a      	strh	r2, [r1, #2]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	3a01      	subs	r2, #1
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	808a      	strh	r2, [r1, #4]
 8006f5c:	80cb      	strh	r3, [r1, #6]
 8006f5e:	4770      	bx	lr

08006f60 <GUIDRV_FlexColor__SetLog2Phys>:
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	4d10      	ldr	r5, [pc, #64]	; (8006fa4 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8006f64:	462e      	mov	r6, r5
 8006f66:	4607      	mov	r7, r0
 8006f68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f6a:	b091      	sub	sp, #68	; 0x44
 8006f6c:	466c      	mov	r4, sp
 8006f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006f74:	3520      	adds	r5, #32
 8006f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f7c:	ac08      	add	r4, sp, #32
 8006f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8a:	aa10      	add	r2, sp, #64	; 0x40
 8006f8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f90:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8006f94:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006f98:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006f9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fa0:	b011      	add	sp, #68	; 0x44
 8006fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa4:	0800bd38 	.word	0x0800bd38

08006fa8 <_SetOrg>:
 8006fa8:	b507      	push	{r0, r1, r2, lr}
 8006faa:	6980      	ldr	r0, [r0, #24]
 8006fac:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006fb0:	2103      	movs	r1, #3
 8006fb2:	466a      	mov	r2, sp
 8006fb4:	f7f9 fcb2 	bl	800091c <LCD_X_DisplayDriver>
 8006fb8:	b003      	add	sp, #12
 8006fba:	f85d fb04 	ldr.w	pc, [sp], #4

08006fbe <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8006fbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fc2:	6884      	ldr	r4, [r0, #8]
 8006fc4:	4698      	mov	r8, r3
 8006fc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006fc8:	079b      	lsls	r3, r3, #30
 8006fca:	4689      	mov	r9, r1
 8006fcc:	4617      	mov	r7, r2
 8006fce:	d532      	bpl.n	8007036 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 8006fd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4798      	blx	r3
 8006fd8:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 8006fdc:	4606      	mov	r6, r0
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	47a8      	blx	r5
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	69a2      	ldr	r2, [r4, #24]
 8006fea:	429e      	cmp	r6, r3
 8006fec:	bfac      	ite	ge
 8006fee:	2300      	movge	r3, #0
 8006ff0:	2301      	movlt	r3, #1
 8006ff2:	4296      	cmp	r6, r2
 8006ff4:	bfd4      	ite	le
 8006ff6:	461a      	movle	r2, r3
 8006ff8:	f043 0201 	orrgt.w	r2, r3, #1
 8006ffc:	6963      	ldr	r3, [r4, #20]
 8006ffe:	4298      	cmp	r0, r3
 8007000:	bfac      	ite	ge
 8007002:	4613      	movge	r3, r2
 8007004:	f042 0301 	orrlt.w	r3, r2, #1
 8007008:	4605      	mov	r5, r0
 800700a:	b913      	cbnz	r3, 8007012 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800700c:	69e3      	ldr	r3, [r4, #28]
 800700e:	4298      	cmp	r0, r3
 8007010:	dd0a      	ble.n	8007028 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	3a01      	subs	r2, #1
 8007018:	9200      	str	r2, [sp, #0]
 800701a:	2100      	movs	r1, #0
 800701c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007020:	4620      	mov	r0, r4
 8007022:	460a      	mov	r2, r1
 8007024:	3b01      	subs	r3, #1
 8007026:	47b8      	blx	r7
 8007028:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800702c:	4620      	mov	r0, r4
 800702e:	4631      	mov	r1, r6
 8007030:	462a      	mov	r2, r5
 8007032:	47b8      	blx	r7
 8007034:	e003      	b.n	800703e <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8007036:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800703a:	4620      	mov	r0, r4
 800703c:	47a8      	blx	r5
 800703e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007042:	4620      	mov	r0, r4
 8007044:	4641      	mov	r1, r8
 8007046:	4798      	blx	r3
 8007048:	b003      	add	sp, #12
 800704a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800704e <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800704e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007050:	6884      	ldr	r4, [r0, #8]
 8007052:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007054:	079b      	lsls	r3, r3, #30
 8007056:	460f      	mov	r7, r1
 8007058:	4616      	mov	r6, r2
 800705a:	d545      	bpl.n	80070e8 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800705c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007060:	4620      	mov	r0, r4
 8007062:	4798      	blx	r3
 8007064:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8007068:	4632      	mov	r2, r6
 800706a:	4605      	mov	r5, r0
 800706c:	4639      	mov	r1, r7
 800706e:	4620      	mov	r0, r4
 8007070:	4798      	blx	r3
 8007072:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007076:	4606      	mov	r6, r0
 8007078:	b11b      	cbz	r3, 8007082 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800707a:	4620      	mov	r0, r4
 800707c:	2101      	movs	r1, #1
 800707e:	2200      	movs	r2, #0
 8007080:	4798      	blx	r3
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	69a2      	ldr	r2, [r4, #24]
 8007086:	429d      	cmp	r5, r3
 8007088:	bfac      	ite	ge
 800708a:	2300      	movge	r3, #0
 800708c:	2301      	movlt	r3, #1
 800708e:	4295      	cmp	r5, r2
 8007090:	bfd4      	ite	le
 8007092:	461a      	movle	r2, r3
 8007094:	f043 0201 	orrgt.w	r2, r3, #1
 8007098:	6963      	ldr	r3, [r4, #20]
 800709a:	429e      	cmp	r6, r3
 800709c:	bfac      	ite	ge
 800709e:	4613      	movge	r3, r2
 80070a0:	f042 0301 	orrlt.w	r3, r2, #1
 80070a4:	b913      	cbnz	r3, 80070ac <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 80070a6:	69e3      	ldr	r3, [r4, #28]
 80070a8:	429e      	cmp	r6, r3
 80070aa:	dd0a      	ble.n	80070c2 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 80070ac:	6862      	ldr	r2, [r4, #4]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	3a01      	subs	r2, #1
 80070b2:	9200      	str	r2, [sp, #0]
 80070b4:	2100      	movs	r1, #0
 80070b6:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80070ba:	4620      	mov	r0, r4
 80070bc:	460a      	mov	r2, r1
 80070be:	3b01      	subs	r3, #1
 80070c0:	47b8      	blx	r7
 80070c2:	4629      	mov	r1, r5
 80070c4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80070c8:	4620      	mov	r0, r4
 80070ca:	4632      	mov	r2, r6
 80070cc:	4798      	blx	r3
 80070ce:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80070d2:	4620      	mov	r0, r4
 80070d4:	4798      	blx	r3
 80070d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80070da:	4605      	mov	r5, r0
 80070dc:	b16b      	cbz	r3, 80070fa <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 80070de:	4620      	mov	r0, r4
 80070e0:	2100      	movs	r1, #0
 80070e2:	2201      	movs	r2, #1
 80070e4:	4798      	blx	r3
 80070e6:	e008      	b.n	80070fa <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 80070e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80070ec:	4620      	mov	r0, r4
 80070ee:	4798      	blx	r3
 80070f0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80070f4:	4620      	mov	r0, r4
 80070f6:	4798      	blx	r3
 80070f8:	4605      	mov	r5, r0
 80070fa:	4628      	mov	r0, r5
 80070fc:	b003      	add	sp, #12
 80070fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007100 <GUIDRV_FlexColor__InitOnce>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	6885      	ldr	r5, [r0, #8]
 8007104:	4604      	mov	r4, r0
 8007106:	b99d      	cbnz	r5, 8007130 <GUIDRV_FlexColor__InitOnce+0x30>
 8007108:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800710c:	f001 fd44 	bl	8008b98 <GUI_ALLOC_GetFixedBlock>
 8007110:	4b08      	ldr	r3, [pc, #32]	; (8007134 <GUIDRV_FlexColor__InitOnce+0x34>)
 8007112:	60a0      	str	r0, [r4, #8]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800711a:	4629      	mov	r1, r5
 800711c:	4798      	blx	r3
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	2202      	movs	r2, #2
 8007122:	84da      	strh	r2, [r3, #38]	; 0x26
 8007124:	2201      	movs	r2, #1
 8007126:	621a      	str	r2, [r3, #32]
 8007128:	4a03      	ldr	r2, [pc, #12]	; (8007138 <GUIDRV_FlexColor__InitOnce+0x38>)
 800712a:	641c      	str	r4, [r3, #64]	; 0x40
 800712c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8007130:	bd38      	pop	{r3, r4, r5, pc}
 8007132:	bf00      	nop
 8007134:	2000003c 	.word	0x2000003c
 8007138:	08006f61 	.word	0x08006f61

0800713c <_SetDevFunc>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4606      	mov	r6, r0
 8007140:	460d      	mov	r5, r1
 8007142:	4614      	mov	r4, r2
 8007144:	f7ff ffdc 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 8007148:	68b3      	ldr	r3, [r6, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d03b      	beq.n	80071c6 <_SetDevFunc+0x8a>
 800714e:	2d26      	cmp	r5, #38	; 0x26
 8007150:	d002      	beq.n	8007158 <_SetDevFunc+0x1c>
 8007152:	2d27      	cmp	r5, #39	; 0x27
 8007154:	d016      	beq.n	8007184 <_SetDevFunc+0x48>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715a:	2a10      	cmp	r2, #16
 800715c:	d002      	beq.n	8007164 <_SetDevFunc+0x28>
 800715e:	2a12      	cmp	r2, #18
 8007160:	d008      	beq.n	8007174 <_SetDevFunc+0x38>
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <_SetDevFunc+0x8c>)
 8007166:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800716a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800716e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <_SetDevFunc+0x90>)
 8007176:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800717a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800717e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007186:	2a10      	cmp	r2, #16
 8007188:	d002      	beq.n	8007190 <_SetDevFunc+0x54>
 800718a:	2a12      	cmp	r2, #18
 800718c:	d00e      	beq.n	80071ac <_SetDevFunc+0x70>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	b13c      	cbz	r4, 80071a2 <_SetDevFunc+0x66>
 8007192:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <_SetDevFunc+0x94>)
 8007194:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8007198:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800719c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 80071a6:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	b13c      	cbz	r4, 80071be <_SetDevFunc+0x82>
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <_SetDevFunc+0x98>)
 80071b0:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80071b4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80071b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 80071c2:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	08006de1 	.word	0x08006de1
 80071cc:	08006def 	.word	0x08006def
 80071d0:	08006dfd 	.word	0x08006dfd
 80071d4:	08006e33 	.word	0x08006e33

080071d8 <_GetDevFunc_Init>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4605      	mov	r5, r0
 80071dc:	f7ff ff90 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 80071e0:	68ac      	ldr	r4, [r5, #8]
 80071e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071e6:	f001 fcd7 	bl	8008b98 <GUI_ALLOC_GetFixedBlock>
 80071ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071ec:	66a0      	str	r0, [r4, #104]	; 0x68
 80071ee:	3307      	adds	r3, #7
 80071f0:	10d8      	asrs	r0, r3, #3
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	4358      	muls	r0, r3
 80071f6:	f001 fccf 	bl	8008b98 <GUI_ALLOC_GetFixedBlock>
 80071fa:	2101      	movs	r1, #1
 80071fc:	2200      	movs	r2, #0
 80071fe:	66e0      	str	r0, [r4, #108]	; 0x6c
 8007200:	69a8      	ldr	r0, [r5, #24]
 8007202:	f7f9 fb8b 	bl	800091c <LCD_X_DisplayDriver>
 8007206:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800720a:	4605      	mov	r5, r0
 800720c:	4620      	mov	r0, r4
 800720e:	4798      	blx	r3
 8007210:	4620      	mov	r0, r4
 8007212:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007216:	4798      	blx	r3
 8007218:	2d00      	cmp	r5, #0
 800721a:	bfd4      	ite	le
 800721c:	2000      	movle	r0, #0
 800721e:	2001      	movgt	r0, #1
 8007220:	bd38      	pop	{r3, r4, r5, pc}

08007222 <_GetDevFunc_SetSize>:
 8007222:	b570      	push	{r4, r5, r6, lr}
 8007224:	4604      	mov	r4, r0
 8007226:	460d      	mov	r5, r1
 8007228:	4616      	mov	r6, r2
 800722a:	f7ff ff69 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 800722e:	68a3      	ldr	r3, [r4, #8]
 8007230:	e883 0060 	stmia.w	r3, {r5, r6}
 8007234:	bd70      	pop	{r4, r5, r6, pc}

08007236 <_GetDevFunc_SetVSize>:
 8007236:	b570      	push	{r4, r5, r6, lr}
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	4616      	mov	r6, r2
 800723e:	f7ff ff5f 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 8007242:	68a3      	ldr	r3, [r4, #8]
 8007244:	609d      	str	r5, [r3, #8]
 8007246:	60de      	str	r6, [r3, #12]
 8007248:	bd70      	pop	{r4, r5, r6, pc}

0800724a <_GetDevFunc_Off>:
 800724a:	b510      	push	{r4, lr}
 800724c:	4604      	mov	r4, r0
 800724e:	f7ff ff57 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 8007252:	69a0      	ldr	r0, [r4, #24]
 8007254:	2106      	movs	r1, #6
 8007256:	2200      	movs	r2, #0
 8007258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725c:	f7f9 bb5e 	b.w	800091c <LCD_X_DisplayDriver>

08007260 <_GetDevFunc_On>:
 8007260:	b510      	push	{r4, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	f7ff ff4c 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 8007268:	69a0      	ldr	r0, [r4, #24]
 800726a:	2105      	movs	r1, #5
 800726c:	2200      	movs	r2, #0
 800726e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007272:	f7f9 bb53 	b.w	800091c <LCD_X_DisplayDriver>

08007276 <GUIDRV_FlexColor_Config>:
 8007276:	b538      	push	{r3, r4, r5, lr}
 8007278:	4605      	mov	r5, r0
 800727a:	460c      	mov	r4, r1
 800727c:	f7ff ff40 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 8007280:	68ab      	ldr	r3, [r5, #8]
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	62da      	str	r2, [r3, #44]	; 0x2c
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
 800728a:	68a2      	ldr	r2, [r4, #8]
 800728c:	635a      	str	r2, [r3, #52]	; 0x34
 800728e:	0752      	lsls	r2, r2, #29
 8007290:	d507      	bpl.n	80072a2 <GUIDRV_FlexColor_Config+0x2c>
 8007292:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	6059      	str	r1, [r3, #4]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	6899      	ldr	r1, [r3, #8]
 800729e:	60d9      	str	r1, [r3, #12]
 80072a0:	609a      	str	r2, [r3, #8]
 80072a2:	89a2      	ldrh	r2, [r4, #12]
 80072a4:	849a      	strh	r2, [r3, #36]	; 0x24
 80072a6:	6922      	ldr	r2, [r4, #16]
 80072a8:	b112      	cbz	r2, 80072b0 <GUIDRV_FlexColor_Config+0x3a>
 80072aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80072ae:	621a      	str	r2, [r3, #32]
 80072b0:	bd38      	pop	{r3, r4, r5, pc}

080072b2 <GUIDRV_FlexColor_SetFunc>:
 80072b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b6:	4604      	mov	r4, r0
 80072b8:	461f      	mov	r7, r3
 80072ba:	4616      	mov	r6, r2
 80072bc:	4688      	mov	r8, r1
 80072be:	f7ff ff1f 	bl	8007100 <GUIDRV_FlexColor__InitOnce>
 80072c2:	68a5      	ldr	r5, [r4, #8]
 80072c4:	4641      	mov	r1, r8
 80072c6:	2268      	movs	r2, #104	; 0x68
 80072c8:	f505 708a 	add.w	r0, r5, #276	; 0x114
 80072cc:	f004 fcba 	bl	800bc44 <memcpy>
 80072d0:	4620      	mov	r0, r4
 80072d2:	47b0      	blx	r6
 80072d4:	4620      	mov	r0, r4
 80072d6:	47b8      	blx	r7
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4798      	blx	r3
 80072de:	62a8      	str	r0, [r5, #40]	; 0x28
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072e4 <LCD_SetVSizeEx>:
 80072e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072e6:	460d      	mov	r5, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	f000 f8d9 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 80072ee:	9001      	str	r0, [sp, #4]
 80072f0:	b908      	cbnz	r0, 80072f6 <LCD_SetVSizeEx+0x12>
 80072f2:	2001      	movs	r0, #1
 80072f4:	e00c      	b.n	8007310 <LCD_SetVSizeEx+0x2c>
 80072f6:	68c3      	ldr	r3, [r0, #12]
 80072f8:	210a      	movs	r1, #10
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	a801      	add	r0, sp, #4
 80072fe:	4798      	blx	r3
 8007300:	4603      	mov	r3, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d0f5      	beq.n	80072f2 <LCD_SetVSizeEx+0xe>
 8007306:	9801      	ldr	r0, [sp, #4]
 8007308:	4629      	mov	r1, r5
 800730a:	4622      	mov	r2, r4
 800730c:	4798      	blx	r3
 800730e:	2000      	movs	r0, #0
 8007310:	b003      	add	sp, #12
 8007312:	bd30      	pop	{r4, r5, pc}

08007314 <LCD_SetSizeEx>:
 8007314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007316:	460d      	mov	r5, r1
 8007318:	4614      	mov	r4, r2
 800731a:	f000 f8c1 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800731e:	9001      	str	r0, [sp, #4]
 8007320:	b908      	cbnz	r0, 8007326 <LCD_SetSizeEx+0x12>
 8007322:	2001      	movs	r0, #1
 8007324:	e00c      	b.n	8007340 <LCD_SetSizeEx+0x2c>
 8007326:	68c3      	ldr	r3, [r0, #12]
 8007328:	210b      	movs	r1, #11
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	a801      	add	r0, sp, #4
 800732e:	4798      	blx	r3
 8007330:	4603      	mov	r3, r0
 8007332:	2800      	cmp	r0, #0
 8007334:	d0f5      	beq.n	8007322 <LCD_SetSizeEx+0xe>
 8007336:	9801      	ldr	r0, [sp, #4]
 8007338:	4629      	mov	r1, r5
 800733a:	4622      	mov	r2, r4
 800733c:	4798      	blx	r3
 800733e:	2000      	movs	r0, #0
 8007340:	b003      	add	sp, #12
 8007342:	bd30      	pop	{r4, r5, pc}

08007344 <LCD_SetLUTEntryEx>:
 8007344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007346:	460d      	mov	r5, r1
 8007348:	4614      	mov	r4, r2
 800734a:	f000 f8a9 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800734e:	9001      	str	r0, [sp, #4]
 8007350:	b908      	cbnz	r0, 8007356 <LCD_SetLUTEntryEx+0x12>
 8007352:	2001      	movs	r0, #1
 8007354:	e00c      	b.n	8007370 <LCD_SetLUTEntryEx+0x2c>
 8007356:	68c3      	ldr	r3, [r0, #12]
 8007358:	2110      	movs	r1, #16
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	a801      	add	r0, sp, #4
 800735e:	4798      	blx	r3
 8007360:	4603      	mov	r3, r0
 8007362:	2800      	cmp	r0, #0
 8007364:	d0f5      	beq.n	8007352 <LCD_SetLUTEntryEx+0xe>
 8007366:	9801      	ldr	r0, [sp, #4]
 8007368:	4629      	mov	r1, r5
 800736a:	4622      	mov	r2, r4
 800736c:	4798      	blx	r3
 800736e:	2000      	movs	r0, #0
 8007370:	b003      	add	sp, #12
 8007372:	bd30      	pop	{r4, r5, pc}

08007374 <GUI__IntersectRect>:
 8007374:	880b      	ldrh	r3, [r1, #0]
 8007376:	b510      	push	{r4, lr}
 8007378:	f9b0 4000 	ldrsh.w	r4, [r0]
 800737c:	b21a      	sxth	r2, r3
 800737e:	4294      	cmp	r4, r2
 8007380:	bfb8      	it	lt
 8007382:	8003      	strhlt	r3, [r0, #0]
 8007384:	884b      	ldrh	r3, [r1, #2]
 8007386:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800738a:	b21a      	sxth	r2, r3
 800738c:	4294      	cmp	r4, r2
 800738e:	bfb8      	it	lt
 8007390:	8043      	strhlt	r3, [r0, #2]
 8007392:	888b      	ldrh	r3, [r1, #4]
 8007394:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8007398:	b21a      	sxth	r2, r3
 800739a:	4294      	cmp	r4, r2
 800739c:	bfc8      	it	gt
 800739e:	8083      	strhgt	r3, [r0, #4]
 80073a0:	88cb      	ldrh	r3, [r1, #6]
 80073a2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80073a6:	b21a      	sxth	r2, r3
 80073a8:	4291      	cmp	r1, r2
 80073aa:	bfc8      	it	gt
 80073ac:	80c3      	strhgt	r3, [r0, #6]
 80073ae:	bd10      	pop	{r4, pc}

080073b0 <GUI__IntersectRects>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80073b6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80073ba:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80073be:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 80073c2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80073c6:	429c      	cmp	r4, r3
 80073c8:	bfb8      	it	lt
 80073ca:	461c      	movlt	r4, r3
 80073cc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80073d0:	429d      	cmp	r5, r3
 80073d2:	bfa8      	it	ge
 80073d4:	462b      	movge	r3, r5
 80073d6:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80073da:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80073de:	42ae      	cmp	r6, r5
 80073e0:	bfb8      	it	lt
 80073e2:	4635      	movlt	r5, r6
 80073e4:	b2a4      	uxth	r4, r4
 80073e6:	b2ad      	uxth	r5, r5
 80073e8:	4291      	cmp	r1, r2
 80073ea:	bfb8      	it	lt
 80073ec:	460a      	movlt	r2, r1
 80073ee:	8004      	strh	r4, [r0, #0]
 80073f0:	8085      	strh	r5, [r0, #4]
 80073f2:	b224      	sxth	r4, r4
 80073f4:	b22d      	sxth	r5, r5
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	b292      	uxth	r2, r2
 80073fa:	42a5      	cmp	r5, r4
 80073fc:	8043      	strh	r3, [r0, #2]
 80073fe:	80c2      	strh	r2, [r0, #6]
 8007400:	db06      	blt.n	8007410 <GUI__IntersectRects+0x60>
 8007402:	b210      	sxth	r0, r2
 8007404:	b21b      	sxth	r3, r3
 8007406:	4298      	cmp	r0, r3
 8007408:	bfb4      	ite	lt
 800740a:	2000      	movlt	r0, #0
 800740c:	2001      	movge	r0, #1
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	2000      	movs	r0, #0
 8007412:	bd70      	pop	{r4, r5, r6, pc}

08007414 <GUI__memset16>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	0784      	lsls	r4, r0, #30
 8007418:	d502      	bpl.n	8007420 <GUI__memset16+0xc>
 800741a:	8001      	strh	r1, [r0, #0]
 800741c:	3a01      	subs	r2, #1
 800741e:	3002      	adds	r0, #2
 8007420:	0855      	lsrs	r5, r2, #1
 8007422:	462b      	mov	r3, r5
 8007424:	b305      	cbz	r5, 8007468 <GUI__memset16+0x54>
 8007426:	2d03      	cmp	r5, #3
 8007428:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800742c:	dc02      	bgt.n	8007434 <GUI__memset16+0x20>
 800742e:	4606      	mov	r6, r0
 8007430:	461d      	mov	r5, r3
 8007432:	e012      	b.n	800745a <GUI__memset16+0x46>
 8007434:	4603      	mov	r3, r0
 8007436:	462e      	mov	r6, r5
 8007438:	3e04      	subs	r6, #4
 800743a:	2e03      	cmp	r6, #3
 800743c:	601c      	str	r4, [r3, #0]
 800743e:	605c      	str	r4, [r3, #4]
 8007440:	609c      	str	r4, [r3, #8]
 8007442:	60dc      	str	r4, [r3, #12]
 8007444:	f103 0310 	add.w	r3, r3, #16
 8007448:	dcf6      	bgt.n	8007438 <GUI__memset16+0x24>
 800744a:	3d04      	subs	r5, #4
 800744c:	08ab      	lsrs	r3, r5, #2
 800744e:	1c5e      	adds	r6, r3, #1
 8007450:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8007454:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8007458:	e7e9      	b.n	800742e <GUI__memset16+0x1a>
 800745a:	b11d      	cbz	r5, 8007464 <GUI__memset16+0x50>
 800745c:	f846 4b04 	str.w	r4, [r6], #4
 8007460:	3d01      	subs	r5, #1
 8007462:	e7fa      	b.n	800745a <GUI__memset16+0x46>
 8007464:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007468:	07d3      	lsls	r3, r2, #31
 800746a:	bf48      	it	mi
 800746c:	8001      	strhmi	r1, [r0, #0]
 800746e:	bd70      	pop	{r4, r5, r6, pc}

08007470 <GUI__Read16>:
 8007470:	6803      	ldr	r3, [r0, #0]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	7859      	ldrb	r1, [r3, #1]
 8007476:	3302      	adds	r3, #2
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 800747e:	4770      	bx	lr

08007480 <GUI__Read32>:
 8007480:	b510      	push	{r4, lr}
 8007482:	6803      	ldr	r3, [r0, #0]
 8007484:	789a      	ldrb	r2, [r3, #2]
 8007486:	785c      	ldrb	r4, [r3, #1]
 8007488:	7819      	ldrb	r1, [r3, #0]
 800748a:	0412      	lsls	r2, r2, #16
 800748c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8007490:	430a      	orrs	r2, r1
 8007492:	78d9      	ldrb	r1, [r3, #3]
 8007494:	3304      	adds	r3, #4
 8007496:	6003      	str	r3, [r0, #0]
 8007498:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 800749c:	bd10      	pop	{r4, pc}
	...

080074a0 <GUI_DEVICE__GetpDriver>:
 80074a0:	2801      	cmp	r0, #1
 80074a2:	dc09      	bgt.n	80074b8 <GUI_DEVICE__GetpDriver+0x18>
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <GUI_DEVICE__GetpDriver+0x1c>)
 80074a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80074aa:	b120      	cbz	r0, 80074b6 <GUI_DEVICE__GetpDriver+0x16>
 80074ac:	68c3      	ldr	r3, [r0, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	b11b      	cbz	r3, 80074ba <GUI_DEVICE__GetpDriver+0x1a>
 80074b2:	6800      	ldr	r0, [r0, #0]
 80074b4:	e7f9      	b.n	80074aa <GUI_DEVICE__GetpDriver+0xa>
 80074b6:	4770      	bx	lr
 80074b8:	2000      	movs	r0, #0
 80074ba:	4770      	bx	lr
 80074bc:	200037e8 	.word	0x200037e8

080074c0 <GUI_DEVICE_Delete>:
 80074c0:	f001 ba92 	b.w	80089e8 <GUI_ALLOC_FreeFixedBlock>

080074c4 <GUI_DEVICE_Create>:
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c8:	4606      	mov	r6, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	4617      	mov	r7, r2
 80074ce:	461c      	mov	r4, r3
 80074d0:	dd01      	ble.n	80074d6 <GUI_DEVICE_Create+0x12>
 80074d2:	2000      	movs	r0, #0
 80074d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d6:	201c      	movs	r0, #28
 80074d8:	f001 fb5e 	bl	8008b98 <GUI_ALLOC_GetFixedBlock>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d0f8      	beq.n	80074d2 <GUI_DEVICE_Create+0xe>
 80074e0:	b10d      	cbz	r5, 80074e6 <GUI_DEVICE_Create+0x22>
 80074e2:	6105      	str	r5, [r0, #16]
 80074e4:	e009      	b.n	80074fa <GUI_DEVICE_Create+0x36>
 80074e6:	4b09      	ldr	r3, [pc, #36]	; (800750c <GUI_DEVICE_Create+0x48>)
 80074e8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80074ec:	b129      	cbz	r1, 80074fa <GUI_DEVICE_Create+0x36>
 80074ee:	680b      	ldr	r3, [r1, #0]
 80074f0:	b10b      	cbz	r3, 80074f6 <GUI_DEVICE_Create+0x32>
 80074f2:	4619      	mov	r1, r3
 80074f4:	e7fb      	b.n	80074ee <GUI_DEVICE_Create+0x2a>
 80074f6:	690b      	ldr	r3, [r1, #16]
 80074f8:	6103      	str	r3, [r0, #16]
 80074fa:	2300      	movs	r3, #0
 80074fc:	6083      	str	r3, [r0, #8]
 80074fe:	6184      	str	r4, [r0, #24]
 8007500:	8287      	strh	r7, [r0, #20]
 8007502:	60c6      	str	r6, [r0, #12]
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	6043      	str	r3, [r0, #4]
 8007508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800750a:	bf00      	nop
 800750c:	200037e8 	.word	0x200037e8

08007510 <GUI_DEVICE_Unlink>:
 8007510:	6981      	ldr	r1, [r0, #24]
 8007512:	4a0b      	ldr	r2, [pc, #44]	; (8007540 <GUI_DEVICE_Unlink+0x30>)
 8007514:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007518:	4283      	cmp	r3, r0
 800751a:	d105      	bne.n	8007528 <GUI_DEVICE_Unlink+0x18>
 800751c:	6803      	ldr	r3, [r0, #0]
 800751e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007522:	b10b      	cbz	r3, 8007528 <GUI_DEVICE_Unlink+0x18>
 8007524:	2200      	movs	r2, #0
 8007526:	605a      	str	r2, [r3, #4]
 8007528:	6843      	ldr	r3, [r0, #4]
 800752a:	b10b      	cbz	r3, 8007530 <GUI_DEVICE_Unlink+0x20>
 800752c:	6802      	ldr	r2, [r0, #0]
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	6802      	ldr	r2, [r0, #0]
 8007532:	b102      	cbz	r2, 8007536 <GUI_DEVICE_Unlink+0x26>
 8007534:	6053      	str	r3, [r2, #4]
 8007536:	2300      	movs	r3, #0
 8007538:	6003      	str	r3, [r0, #0]
 800753a:	6043      	str	r3, [r0, #4]
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	200037e8 	.word	0x200037e8

08007544 <GUI_DEVICE_Link>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	b908      	cbnz	r0, 800754c <GUI_DEVICE_Link+0x8>
 8007548:	2001      	movs	r0, #1
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	6982      	ldr	r2, [r0, #24]
 800754e:	2a01      	cmp	r2, #1
 8007550:	dcfa      	bgt.n	8007548 <GUI_DEVICE_Link+0x4>
 8007552:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <GUI_DEVICE_Link+0x7c>)
 8007554:	7819      	ldrb	r1, [r3, #0]
 8007556:	428a      	cmp	r2, r1
 8007558:	bfa4      	itt	ge
 800755a:	1c51      	addge	r1, r2, #1
 800755c:	7019      	strbge	r1, [r3, #0]
 800755e:	4919      	ldr	r1, [pc, #100]	; (80075c4 <GUI_DEVICE_Link+0x80>)
 8007560:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8007564:	460d      	mov	r5, r1
 8007566:	b913      	cbnz	r3, 800756e <GUI_DEVICE_Link+0x2a>
 8007568:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800756c:	e01a      	b.n	80075a4 <GUI_DEVICE_Link+0x60>
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	b109      	cbz	r1, 8007576 <GUI_DEVICE_Link+0x32>
 8007572:	460b      	mov	r3, r1
 8007574:	e7fb      	b.n	800756e <GUI_DEVICE_Link+0x2a>
 8007576:	68c1      	ldr	r1, [r0, #12]
 8007578:	680e      	ldr	r6, [r1, #0]
 800757a:	68d9      	ldr	r1, [r3, #12]
 800757c:	680c      	ldr	r4, [r1, #0]
 800757e:	42b4      	cmp	r4, r6
 8007580:	dd03      	ble.n	800758a <GUI_DEVICE_Link+0x46>
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f8      	bne.n	800757a <GUI_DEVICE_Link+0x36>
 8007588:	e7de      	b.n	8007548 <GUI_DEVICE_Link+0x4>
 800758a:	d102      	bne.n	8007592 <GUI_DEVICE_Link+0x4e>
 800758c:	8a81      	ldrh	r1, [r0, #20]
 800758e:	2901      	cmp	r1, #1
 8007590:	d00f      	beq.n	80075b2 <GUI_DEVICE_Link+0x6e>
 8007592:	6859      	ldr	r1, [r3, #4]
 8007594:	b189      	cbz	r1, 80075ba <GUI_DEVICE_Link+0x76>
 8007596:	6008      	str	r0, [r1, #0]
 8007598:	6041      	str	r1, [r0, #4]
 800759a:	6058      	str	r0, [r3, #4]
 800759c:	4298      	cmp	r0, r3
 800759e:	bf08      	it	eq
 80075a0:	2300      	moveq	r3, #0
 80075a2:	6003      	str	r3, [r0, #0]
 80075a4:	2000      	movs	r0, #0
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	68cb      	ldr	r3, [r1, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	460b      	mov	r3, r1
 80075b0:	dbef      	blt.n	8007592 <GUI_DEVICE_Link+0x4e>
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d1f7      	bne.n	80075a8 <GUI_DEVICE_Link+0x64>
 80075b8:	e7eb      	b.n	8007592 <GUI_DEVICE_Link+0x4e>
 80075ba:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80075be:	e7ec      	b.n	800759a <GUI_DEVICE_Link+0x56>
 80075c0:	20003796 	.word	0x20003796
 80075c4:	200037e8 	.word	0x200037e8

080075c8 <GUI_DEVICE_CreateAndLink>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	461d      	mov	r5, r3
 80075cc:	f7ff ff7a 	bl	80074c4 <GUI_DEVICE_Create>
 80075d0:	4604      	mov	r4, r0
 80075d2:	b148      	cbz	r0, 80075e8 <GUI_DEVICE_CreateAndLink+0x20>
 80075d4:	f7ff ffb6 	bl	8007544 <GUI_DEVICE_Link>
 80075d8:	68e3      	ldr	r3, [r4, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	b923      	cbnz	r3, 80075e8 <GUI_DEVICE_CreateAndLink+0x20>
 80075de:	4b03      	ldr	r3, [pc, #12]	; (80075ec <GUI_DEVICE_CreateAndLink+0x24>)
 80075e0:	3516      	adds	r5, #22
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 80075e8:	4620      	mov	r0, r4
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000044 	.word	0x20000044

080075f0 <_OnExit>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <_OnExit+0x30>)
 80075f4:	4e0b      	ldr	r6, [pc, #44]	; (8007624 <_OnExit+0x34>)
 80075f6:	4d0c      	ldr	r5, [pc, #48]	; (8007628 <_OnExit+0x38>)
 80075f8:	2400      	movs	r4, #0
 80075fa:	601c      	str	r4, [r3, #0]
 80075fc:	4621      	mov	r1, r4
 80075fe:	6833      	ldr	r3, [r6, #0]
 8007600:	2270      	movs	r2, #112	; 0x70
 8007602:	4628      	mov	r0, r5
 8007604:	4798      	blx	r3
 8007606:	6833      	ldr	r3, [r6, #0]
 8007608:	4808      	ldr	r0, [pc, #32]	; (800762c <_OnExit+0x3c>)
 800760a:	4621      	mov	r1, r4
 800760c:	2208      	movs	r2, #8
 800760e:	4798      	blx	r3
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <_OnExit+0x40>)
 8007612:	601d      	str	r5, [r3, #0]
 8007614:	4b07      	ldr	r3, [pc, #28]	; (8007634 <_OnExit+0x44>)
 8007616:	701c      	strb	r4, [r3, #0]
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <_OnExit+0x48>)
 800761a:	601c      	str	r4, [r3, #0]
 800761c:	bd70      	pop	{r4, r5, r6, pc}
 800761e:	bf00      	nop
 8007620:	20002944 	.word	0x20002944
 8007624:	2000003c 	.word	0x2000003c
 8007628:	200028d4 	.word	0x200028d4
 800762c:	200037e8 	.word	0x200037e8
 8007630:	20000044 	.word	0x20000044
 8007634:	200037d0 	.word	0x200037d0
 8007638:	200037a8 	.word	0x200037a8

0800763c <_InitContext>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d19      	ldr	r5, [pc, #100]	; (80076a4 <_InitContext+0x68>)
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	63da      	str	r2, [r3, #60]	; 0x3c
 8007646:	f103 0208 	add.w	r2, r3, #8
 800764a:	639b      	str	r3, [r3, #56]	; 0x38
 800764c:	641b      	str	r3, [r3, #64]	; 0x40
 800764e:	6142      	str	r2, [r0, #20]
 8007650:	7c5a      	ldrb	r2, [r3, #17]
 8007652:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <_InitContext+0x6c>)
 8007654:	4604      	mov	r4, r0
 8007656:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800765a:	68c3      	ldr	r3, [r0, #12]
 800765c:	f104 0108 	add.w	r1, r4, #8
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	4798      	blx	r3
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <_InitContext+0x70>)
 8007666:	6663      	str	r3, [r4, #100]	; 0x64
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <_InitContext+0x74>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	61e3      	str	r3, [r4, #28]
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	6163      	str	r3, [r4, #20]
 8007674:	2301      	movs	r3, #1
 8007676:	7623      	strb	r3, [r4, #24]
 8007678:	f001 fc22 	bl	8008ec0 <WM_GetDesktopWindow>
 800767c:	2303      	movs	r3, #3
 800767e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8007682:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007686:	6323      	str	r3, [r4, #48]	; 0x30
 8007688:	6363      	str	r3, [r4, #52]	; 0x34
 800768a:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <_InitContext+0x78>)
 800768c:	64a0      	str	r0, [r4, #72]	; 0x48
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	f003 fcf8 	bl	800b084 <LCD_SetBkColor>
 8007694:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <_InitContext+0x7c>)
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	f003 fcfc 	bl	800b094 <LCD_SetColor>
 800769c:	4b07      	ldr	r3, [pc, #28]	; (80076bc <_InitContext+0x80>)
 800769e:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <_InitContext+0x84>)
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20000044 	.word	0x20000044
 80076a8:	200037e8 	.word	0x200037e8
 80076ac:	0800c914 	.word	0x0800c914
 80076b0:	20000048 	.word	0x20000048
 80076b4:	200028d0 	.word	0x200028d0
 80076b8:	2000004c 	.word	0x2000004c
 80076bc:	200037e0 	.word	0x200037e0
 80076c0:	0800cd14 	.word	0x0800cd14

080076c4 <GUI_SetDefaultFont>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	; (80076cc <GUI_SetDefaultFont+0x8>)
 80076c6:	6018      	str	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000048 	.word	0x20000048

080076d0 <GUI_ClearRect>:
 80076d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	4607      	mov	r7, r0
 80076d6:	2004      	movs	r0, #4
 80076d8:	469a      	mov	sl, r3
 80076da:	460e      	mov	r6, r1
 80076dc:	4691      	mov	r9, r2
 80076de:	f003 f9a5 	bl	800aa2c <LCD_SetDrawMode>
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <GUI_ClearRect+0x60>)
 80076e4:	681c      	ldr	r4, [r3, #0]
 80076e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80076e8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80076ea:	442f      	add	r7, r5
 80076ec:	4426      	add	r6, r4
 80076ee:	4680      	mov	r8, r0
 80076f0:	444d      	add	r5, r9
 80076f2:	4454      	add	r4, sl
 80076f4:	4668      	mov	r0, sp
 80076f6:	f8ad 7000 	strh.w	r7, [sp]
 80076fa:	f8ad 5004 	strh.w	r5, [sp, #4]
 80076fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 8007702:	f8ad 4006 	strh.w	r4, [sp, #6]
 8007706:	f002 f947 	bl	8009998 <WM__InitIVRSearch>
 800770a:	b928      	cbnz	r0, 8007718 <GUI_ClearRect+0x48>
 800770c:	4640      	mov	r0, r8
 800770e:	f003 f98d 	bl	800aa2c <LCD_SetDrawMode>
 8007712:	b002      	add	sp, #8
 8007714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007718:	4638      	mov	r0, r7
 800771a:	4631      	mov	r1, r6
 800771c:	462a      	mov	r2, r5
 800771e:	4623      	mov	r3, r4
 8007720:	f003 f9e0 	bl	800aae4 <LCD_FillRect>
 8007724:	f002 f876 	bl	8009814 <WM__GetNextIVR>
 8007728:	2800      	cmp	r0, #0
 800772a:	d1f5      	bne.n	8007718 <GUI_ClearRect+0x48>
 800772c:	e7ee      	b.n	800770c <GUI_ClearRect+0x3c>
 800772e:	bf00      	nop
 8007730:	20000044 	.word	0x20000044

08007734 <GUI_Clear>:
 8007734:	b510      	push	{r4, lr}
 8007736:	2000      	movs	r0, #0
 8007738:	4601      	mov	r1, r0
 800773a:	f000 f8fb 	bl	8007934 <GUI_GotoXY>
 800773e:	4804      	ldr	r0, [pc, #16]	; (8007750 <GUI_Clear+0x1c>)
 8007740:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007744:	4601      	mov	r1, r0
 8007746:	4613      	mov	r3, r2
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	f7ff bfc0 	b.w	80076d0 <GUI_ClearRect>
 8007750:	ffffc001 	.word	0xffffc001

08007754 <GUI__RegisterExit>:
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <GUI__RegisterExit+0x20>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	605a      	str	r2, [r3, #4]
 8007764:	4b03      	ldr	r3, [pc, #12]	; (8007774 <GUI__RegisterExit+0x20>)
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	200028c4 	.word	0x200028c4

08007778 <GUI__Config>:
 8007778:	b508      	push	{r3, lr}
 800777a:	4b08      	ldr	r3, [pc, #32]	; (800779c <GUI__Config+0x24>)
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	b962      	cbnz	r2, 800779a <GUI__Config+0x22>
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f7f8 fea0 	bl	80004c8 <GUI_X_Config>
 8007788:	f7f9 f876 	bl	8000878 <LCD_X_Config>
 800778c:	4804      	ldr	r0, [pc, #16]	; (80077a0 <GUI__Config+0x28>)
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <GUI__Config+0x2c>)
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007796:	f7ff bfdd 	b.w	8007754 <GUI__RegisterExit>
 800779a:	bd08      	pop	{r3, pc}
 800779c:	20002944 	.word	0x20002944
 80077a0:	200028c8 	.word	0x200028c8
 80077a4:	080075f1 	.word	0x080075f1

080077a8 <GUI_Init>:
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <GUI_Init+0xa0>)
 80077b0:	4a25      	ldr	r2, [pc, #148]	; (8007848 <GUI_Init+0xa0>)
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	f022 0201 	bic.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	4b24      	ldr	r3, [pc, #144]	; (800784c <GUI_Init+0xa4>)
 80077bc:	2201      	movs	r2, #1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	bf00      	nop
 80077c2:	4b22      	ldr	r3, [pc, #136]	; (800784c <GUI_Init+0xa4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1fb      	bne.n	80077c2 <GUI_Init+0x1a>
 80077ca:	4b21      	ldr	r3, [pc, #132]	; (8007850 <GUI_Init+0xa8>)
 80077cc:	4a21      	ldr	r2, [pc, #132]	; (8007854 <GUI_Init+0xac>)
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <GUI_Init+0xa8>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	4b20      	ldr	r3, [pc, #128]	; (8007858 <GUI_Init+0xb0>)
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d000      	beq.n	80077dc <GUI_Init+0x34>
 80077da:	e7fe      	b.n	80077da <GUI_Init+0x32>
 80077dc:	f7ff ffcc 	bl	8007778 <GUI__Config>
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <GUI_Init+0xb4>)
 80077e2:	222e      	movs	r2, #46	; 0x2e
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	f7f8 fe7f 	bl	80004e8 <GUI_X_Init>
 80077ea:	481d      	ldr	r0, [pc, #116]	; (8007860 <GUI_Init+0xb8>)
 80077ec:	f7ff ff26 	bl	800763c <_InitContext>
 80077f0:	f003 fb9c 	bl	800af2c <emWin_LCD_Init>
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	f003 f83b 	bl	800a870 <LCD_GetXSizeDisplay>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <GUI_Init+0x62>
 8007800:	f003 f83c 	bl	800a87c <LCD_GetYSizeDisplay>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <GUI_Init+0x76>
 800780a:	f003 f821 	bl	800a850 <LCD_GetXSizeMax>
 800780e:	4604      	mov	r4, r0
 8007810:	f003 f821 	bl	800a856 <LCD_GetYSizeMax>
 8007814:	4603      	mov	r3, r0
 8007816:	4620      	mov	r0, r4
 8007818:	4619      	mov	r1, r3
 800781a:	f003 f81f 	bl	800a85c <LCD_SetDisplaySize>
 800781e:	2000      	movs	r0, #0
 8007820:	2100      	movs	r1, #0
 8007822:	f000 f8b7 	bl	8007994 <GUI_SetOrg>
 8007826:	f002 f995 	bl	8009b54 <WM_Init>
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <GUI_Init+0xbc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <GUI_Init+0x90>
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <GUI_Init+0xbc>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4798      	blx	r3
 8007838:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <GUI_Init+0xc0>)
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	bd90      	pop	{r4, r7, pc}
 8007848:	e0002000 	.word	0xe0002000
 800784c:	40023008 	.word	0x40023008
 8007850:	40023000 	.word	0x40023000
 8007854:	f407a5c2 	.word	0xf407a5c2
 8007858:	b5e8b5cd 	.word	0xb5e8b5cd
 800785c:	2000379c 	.word	0x2000379c
 8007860:	200028d4 	.word	0x200028d4
 8007864:	200037c0 	.word	0x200037c0
 8007868:	200037c8 	.word	0x200037c8

0800786c <GUI_CalcColorDist>:
 800786c:	b2cb      	uxtb	r3, r1
 800786e:	b2c2      	uxtb	r2, r0
 8007870:	1ad2      	subs	r2, r2, r3
 8007872:	b292      	uxth	r2, r2
 8007874:	b293      	uxth	r3, r2
 8007876:	b530      	push	{r4, r5, lr}
 8007878:	041c      	lsls	r4, r3, #16
 800787a:	bf48      	it	mi
 800787c:	4253      	negmi	r3, r2
 800787e:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007882:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8007886:	ebc5 0202 	rsb	r2, r5, r2
 800788a:	bf48      	it	mi
 800788c:	b29b      	uxthmi	r3, r3
 800788e:	b292      	uxth	r2, r2
 8007890:	0c09      	lsrs	r1, r1, #16
 8007892:	fb13 f403 	smulbb	r4, r3, r3
 8007896:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800789a:	b293      	uxth	r3, r2
 800789c:	041d      	lsls	r5, r3, #16
 800789e:	b289      	uxth	r1, r1
 80078a0:	b288      	uxth	r0, r1
 80078a2:	bf44      	itt	mi
 80078a4:	4253      	negmi	r3, r2
 80078a6:	b29b      	uxthmi	r3, r3
 80078a8:	0402      	lsls	r2, r0, #16
 80078aa:	bf48      	it	mi
 80078ac:	4248      	negmi	r0, r1
 80078ae:	fb13 4303 	smlabb	r3, r3, r3, r4
 80078b2:	bf48      	it	mi
 80078b4:	b280      	uxthmi	r0, r0
 80078b6:	fb00 3000 	mla	r0, r0, r0, r3
 80078ba:	bd30      	pop	{r4, r5, pc}

080078bc <GUI_MergeRect>:
 80078bc:	b510      	push	{r4, lr}
 80078be:	b338      	cbz	r0, 8007910 <GUI_MergeRect+0x54>
 80078c0:	b309      	cbz	r1, 8007906 <GUI_MergeRect+0x4a>
 80078c2:	b30a      	cbz	r2, 8007908 <GUI_MergeRect+0x4c>
 80078c4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80078c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80078cc:	429c      	cmp	r4, r3
 80078ce:	bfb8      	it	lt
 80078d0:	4623      	movlt	r3, r4
 80078d2:	8003      	strh	r3, [r0, #0]
 80078d4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80078d8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80078dc:	429c      	cmp	r4, r3
 80078de:	bfb8      	it	lt
 80078e0:	4623      	movlt	r3, r4
 80078e2:	8043      	strh	r3, [r0, #2]
 80078e4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80078e8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80078ec:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80078f0:	429c      	cmp	r4, r3
 80078f2:	bfa8      	it	ge
 80078f4:	4623      	movge	r3, r4
 80078f6:	8083      	strh	r3, [r0, #4]
 80078f8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80078fc:	4299      	cmp	r1, r3
 80078fe:	bfa8      	it	ge
 8007900:	460b      	movge	r3, r1
 8007902:	80c3      	strh	r3, [r0, #6]
 8007904:	bd10      	pop	{r4, pc}
 8007906:	4611      	mov	r1, r2
 8007908:	680b      	ldr	r3, [r1, #0]
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	684b      	ldr	r3, [r1, #4]
 800790e:	6043      	str	r3, [r0, #4]
 8007910:	bd10      	pop	{r4, pc}

08007912 <GUI_MoveRect>:
 8007912:	b168      	cbz	r0, 8007930 <GUI_MoveRect+0x1e>
 8007914:	8803      	ldrh	r3, [r0, #0]
 8007916:	b289      	uxth	r1, r1
 8007918:	440b      	add	r3, r1
 800791a:	8003      	strh	r3, [r0, #0]
 800791c:	8883      	ldrh	r3, [r0, #4]
 800791e:	4419      	add	r1, r3
 8007920:	8843      	ldrh	r3, [r0, #2]
 8007922:	8081      	strh	r1, [r0, #4]
 8007924:	b292      	uxth	r2, r2
 8007926:	4413      	add	r3, r2
 8007928:	8043      	strh	r3, [r0, #2]
 800792a:	88c3      	ldrh	r3, [r0, #6]
 800792c:	441a      	add	r2, r3
 800792e:	80c2      	strh	r2, [r0, #6]
 8007930:	4770      	bx	lr
	...

08007934 <GUI_GotoXY>:
 8007934:	4b02      	ldr	r3, [pc, #8]	; (8007940 <GUI_GotoXY+0xc>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	8458      	strh	r0, [r3, #34]	; 0x22
 800793a:	8499      	strh	r1, [r3, #36]	; 0x24
 800793c:	2000      	movs	r0, #0
 800793e:	4770      	bx	lr
 8007940:	20000044 	.word	0x20000044

08007944 <GUI_RectsIntersect>:
 8007944:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007948:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800794c:	429a      	cmp	r2, r3
 800794e:	dc14      	bgt.n	800797a <GUI_RectsIntersect+0x36>
 8007950:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8007954:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007958:	429a      	cmp	r2, r3
 800795a:	dc0e      	bgt.n	800797a <GUI_RectsIntersect+0x36>
 800795c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007960:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	dc08      	bgt.n	800797a <GUI_RectsIntersect+0x36>
 8007968:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800796c:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007970:	429a      	cmp	r2, r3
 8007972:	bfcc      	ite	gt
 8007974:	2000      	movgt	r0, #0
 8007976:	2001      	movle	r0, #1
 8007978:	4770      	bx	lr
 800797a:	2000      	movs	r0, #0
 800797c:	4770      	bx	lr

0800797e <GUI_SelectLCD>:
 800797e:	b508      	push	{r3, lr}
 8007980:	f002 fee2 	bl	800a748 <LCD_SelectLCD>
 8007984:	f002 feb6 	bl	800a6f4 <LCD_UpdateColorIndices>
 8007988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800798c:	f002 b882 	b.w	8009a94 <WM_Activate>

08007990 <GUI_SetBkColor>:
 8007990:	f003 bb78 	b.w	800b084 <LCD_SetBkColor>

08007994 <GUI_SetOrg>:
 8007994:	460a      	mov	r2, r1
 8007996:	4908      	ldr	r1, [pc, #32]	; (80079b8 <GUI_SetOrg+0x24>)
 8007998:	b510      	push	{r4, lr}
 800799a:	8008      	strh	r0, [r1, #0]
 800799c:	4907      	ldr	r1, [pc, #28]	; (80079bc <GUI_SetOrg+0x28>)
 800799e:	800a      	strh	r2, [r1, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	; (80079c0 <GUI_SetOrg+0x2c>)
 80079a2:	6809      	ldr	r1, [r1, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	7c48      	ldrb	r0, [r1, #17]
 80079a8:	4906      	ldr	r1, [pc, #24]	; (80079c4 <GUI_SetOrg+0x30>)
 80079aa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80079ae:	68c1      	ldr	r1, [r0, #12]
 80079b0:	6a0c      	ldr	r4, [r1, #32]
 80079b2:	4619      	mov	r1, r3
 80079b4:	47a0      	blx	r4
 80079b6:	bd10      	pop	{r4, pc}
 80079b8:	200037bc 	.word	0x200037bc
 80079bc:	200037ac 	.word	0x200037ac
 80079c0:	20000044 	.word	0x20000044
 80079c4:	200037e8 	.word	0x200037e8

080079c8 <GUIMONO_DispChar>:
 80079c8:	4b52      	ldr	r3, [pc, #328]	; (8007b14 <GUIMONO_DispChar+0x14c>)
 80079ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69d9      	ldr	r1, [r3, #28]
 80079d2:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 80079d4:	69cc      	ldr	r4, [r1, #28]
 80079d6:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 80079d8:	89a2      	ldrh	r2, [r4, #12]
 80079da:	4290      	cmp	r0, r2
 80079dc:	b08b      	sub	sp, #44	; 0x2c
 80079de:	d308      	bcc.n	80079f2 <GUIMONO_DispChar+0x2a>
 80079e0:	89e6      	ldrh	r6, [r4, #14]
 80079e2:	4286      	cmp	r6, r0
 80079e4:	d305      	bcc.n	80079f2 <GUIMONO_DispChar+0x2a>
 80079e6:	f8d4 9000 	ldr.w	r9, [r4]
 80079ea:	1a82      	subs	r2, r0, r2
 80079ec:	f04f 3bff 	mov.w	fp, #4294967295
 80079f0:	e015      	b.n	8007a1e <GUIMONO_DispChar+0x56>
 80079f2:	68a2      	ldr	r2, [r4, #8]
 80079f4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80079f8:	2a00      	cmp	r2, #0
 80079fa:	f000 8081 	beq.w	8007b00 <GUIMONO_DispChar+0x138>
 80079fe:	8816      	ldrh	r6, [r2, #0]
 8007a00:	42b0      	cmp	r0, r6
 8007a02:	d37d      	bcc.n	8007b00 <GUIMONO_DispChar+0x138>
 8007a04:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8007a08:	4584      	cmp	ip, r0
 8007a0a:	d379      	bcc.n	8007b00 <GUIMONO_DispChar+0x138>
 8007a0c:	6852      	ldr	r2, [r2, #4]
 8007a0e:	1b80      	subs	r0, r0, r6
 8007a10:	b280      	uxth	r0, r0
 8007a12:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8007a16:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8007a1a:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8007a1e:	1c50      	adds	r0, r2, #1
 8007a20:	d06e      	beq.n	8007b00 <GUIMONO_DispChar+0x138>
 8007a22:	f891 8018 	ldrb.w	r8, [r1, #24]
 8007a26:	7ca1      	ldrb	r1, [r4, #18]
 8007a28:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8007a2c:	7c26      	ldrb	r6, [r4, #16]
 8007a2e:	9206      	str	r2, [sp, #24]
 8007a30:	fb18 f101 	smulbb	r1, r8, r1
 8007a34:	9107      	str	r1, [sp, #28]
 8007a36:	fa0f f18a 	sxth.w	r1, sl
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	9108      	str	r1, [sp, #32]
 8007a3e:	f002 fff5 	bl	800aa2c <LCD_SetDrawMode>
 8007a42:	4934      	ldr	r1, [pc, #208]	; (8007b14 <GUIMONO_DispChar+0x14c>)
 8007a44:	9009      	str	r0, [sp, #36]	; 0x24
 8007a46:	680b      	ldr	r3, [r1, #0]
 8007a48:	9a06      	ldr	r2, [sp, #24]
 8007a4a:	69d9      	ldr	r1, [r3, #28]
 8007a4c:	7e88      	ldrb	r0, [r1, #26]
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	7ec9      	ldrb	r1, [r1, #27]
 8007a52:	9101      	str	r1, [sp, #4]
 8007a54:	2101      	movs	r1, #1
 8007a56:	9102      	str	r1, [sp, #8]
 8007a58:	7ca1      	ldrb	r1, [r4, #18]
 8007a5a:	9103      	str	r1, [sp, #12]
 8007a5c:	9907      	ldr	r1, [sp, #28]
 8007a5e:	fb01 9202 	mla	r2, r1, r2, r9
 8007a62:	9204      	str	r2, [sp, #16]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	b23f      	sxth	r7, r7
 8007a6a:	b22d      	sxth	r5, r5
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4632      	mov	r2, r6
 8007a72:	4643      	mov	r3, r8
 8007a74:	f003 f93e 	bl	800acf4 <LCD_DrawBitmap>
 8007a78:	f1bb 3fff 	cmp.w	fp, #4294967295
 8007a7c:	d01b      	beq.n	8007ab6 <GUIMONO_DispChar+0xee>
 8007a7e:	f04a 0002 	orr.w	r0, sl, #2
 8007a82:	b200      	sxth	r0, r0
 8007a84:	f002 ffd2 	bl	800aa2c <LCD_SetDrawMode>
 8007a88:	4a22      	ldr	r2, [pc, #136]	; (8007b14 <GUIMONO_DispChar+0x14c>)
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	69da      	ldr	r2, [r3, #28]
 8007a8e:	7e91      	ldrb	r1, [r2, #26]
 8007a90:	9100      	str	r1, [sp, #0]
 8007a92:	7ed2      	ldrb	r2, [r2, #27]
 8007a94:	9201      	str	r2, [sp, #4]
 8007a96:	2101      	movs	r1, #1
 8007a98:	9102      	str	r1, [sp, #8]
 8007a9a:	9907      	ldr	r1, [sp, #28]
 8007a9c:	7ca2      	ldrb	r2, [r4, #18]
 8007a9e:	9203      	str	r2, [sp, #12]
 8007aa0:	fb01 920b 	mla	r2, r1, fp, r9
 8007aa4:	9204      	str	r2, [sp, #16]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	4638      	mov	r0, r7
 8007aac:	4629      	mov	r1, r5
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4643      	mov	r3, r8
 8007ab2:	f003 f91f 	bl	800acf4 <LCD_DrawBitmap>
 8007ab6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8007b14 <GUIMONO_DispChar+0x14c>
 8007aba:	f8d8 3000 	ldr.w	r3, [r8]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	7e5a      	ldrb	r2, [r3, #25]
 8007ac2:	7e1b      	ldrb	r3, [r3, #24]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d917      	bls.n	8007af8 <GUIMONO_DispChar+0x130>
 8007ac8:	9a08      	ldr	r2, [sp, #32]
 8007aca:	2a02      	cmp	r2, #2
 8007acc:	d014      	beq.n	8007af8 <GUIMONO_DispChar+0x130>
 8007ace:	f08a 0004 	eor.w	r0, sl, #4
 8007ad2:	b200      	sxth	r0, r0
 8007ad4:	f002 ffaa 	bl	800aa2c <LCD_SetDrawMode>
 8007ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f893 e018 	ldrb.w	lr, [r3, #24]
 8007ae2:	7ed9      	ldrb	r1, [r3, #27]
 8007ae4:	7e9a      	ldrb	r2, [r3, #26]
 8007ae6:	7e5b      	ldrb	r3, [r3, #25]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	fb0e 5101 	mla	r1, lr, r1, r5
 8007aee:	fb06 7202 	mla	r2, r6, r2, r7
 8007af2:	442b      	add	r3, r5
 8007af4:	f002 fff6 	bl	800aae4 <LCD_FillRect>
 8007af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afa:	b2d8      	uxtb	r0, r3
 8007afc:	f002 ff96 	bl	800aa2c <LCD_SetDrawMode>
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <GUIMONO_DispChar+0x14c>)
 8007b02:	7c61      	ldrb	r1, [r4, #17]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8007b08:	440a      	add	r2, r1
 8007b0a:	845a      	strh	r2, [r3, #34]	; 0x22
 8007b0c:	b00b      	add	sp, #44	; 0x2c
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	bf00      	nop
 8007b14:	20000044 	.word	0x20000044

08007b18 <GUIMONO_GetCharDistX>:
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <GUIMONO_GetCharDistX+0x14>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	b109      	cbz	r1, 8007b26 <GUIMONO_GetCharDistX+0xe>
 8007b22:	7c1a      	ldrb	r2, [r3, #16]
 8007b24:	600a      	str	r2, [r1, #0]
 8007b26:	7c58      	ldrb	r0, [r3, #17]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000044 	.word	0x20000044

08007b30 <GUIMONO_GetFontInfo>:
 8007b30:	2302      	movs	r3, #2
 8007b32:	800b      	strh	r3, [r1, #0]
 8007b34:	4770      	bx	lr

08007b36 <GUIMONO_IsInFont>:
 8007b36:	69c3      	ldr	r3, [r0, #28]
 8007b38:	899a      	ldrh	r2, [r3, #12]
 8007b3a:	428a      	cmp	r2, r1
 8007b3c:	d802      	bhi.n	8007b44 <GUIMONO_IsInFont+0xe>
 8007b3e:	89da      	ldrh	r2, [r3, #14]
 8007b40:	428a      	cmp	r2, r1
 8007b42:	d20f      	bcs.n	8007b64 <GUIMONO_IsInFont+0x2e>
 8007b44:	6898      	ldr	r0, [r3, #8]
 8007b46:	b180      	cbz	r0, 8007b6a <GUIMONO_IsInFont+0x34>
 8007b48:	8803      	ldrh	r3, [r0, #0]
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	d30c      	bcc.n	8007b68 <GUIMONO_IsInFont+0x32>
 8007b4e:	8842      	ldrh	r2, [r0, #2]
 8007b50:	428a      	cmp	r2, r1
 8007b52:	d309      	bcc.n	8007b68 <GUIMONO_IsInFont+0x32>
 8007b54:	1ac9      	subs	r1, r1, r3
 8007b56:	6842      	ldr	r2, [r0, #4]
 8007b58:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8007b5c:	43c0      	mvns	r0, r0
 8007b5e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8007b62:	4770      	bx	lr
 8007b64:	2001      	movs	r0, #1
 8007b66:	4770      	bx	lr
 8007b68:	2000      	movs	r0, #0
 8007b6a:	4770      	bx	lr

08007b6c <_GetClipParam>:
 8007b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6e:	4f33      	ldr	r7, [pc, #204]	; (8007c3c <_GetClipParam+0xd0>)
 8007b70:	9c07      	ldr	r4, [sp, #28]
 8007b72:	683f      	ldr	r7, [r7, #0]
 8007b74:	9e05      	ldr	r6, [sp, #20]
 8007b76:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 8007b7a:	9d06      	ldr	r5, [sp, #24]
 8007b7c:	ebc0 0c0c 	rsb	ip, r0, ip
 8007b80:	f1bc 0f00 	cmp.w	ip, #0
 8007b84:	bfc8      	it	gt
 8007b86:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 8007b8a:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 8007b8e:	ebc1 0c0c 	rsb	ip, r1, ip
 8007b92:	f1bc 0f00 	cmp.w	ip, #0
 8007b96:	bfc8      	it	gt
 8007b98:	f8c4 c010 	strgt.w	ip, [r4, #16]
 8007b9c:	4410      	add	r0, r2
 8007b9e:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 8007ba2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007ba6:	3801      	subs	r0, #1
 8007ba8:	4419      	add	r1, r3
 8007baa:	ebcc 0000 	rsb	r0, ip, r0
 8007bae:	3901      	subs	r1, #1
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	ebc2 0101 	rsb	r1, r2, r1
 8007bb6:	bfc8      	it	gt
 8007bb8:	60a0      	strgt	r0, [r4, #8]
 8007bba:	2900      	cmp	r1, #0
 8007bbc:	bfc8      	it	gt
 8007bbe:	6161      	strgt	r1, [r4, #20]
 8007bc0:	2e08      	cmp	r6, #8
 8007bc2:	d024      	beq.n	8007c0e <_GetClipParam+0xa2>
 8007bc4:	dc04      	bgt.n	8007bd0 <_GetClipParam+0x64>
 8007bc6:	2e01      	cmp	r6, #1
 8007bc8:	d00f      	beq.n	8007bea <_GetClipParam+0x7e>
 8007bca:	2e04      	cmp	r6, #4
 8007bcc:	d016      	beq.n	8007bfc <_GetClipParam+0x90>
 8007bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bd0:	2e18      	cmp	r6, #24
 8007bd2:	d021      	beq.n	8007c18 <_GetClipParam+0xac>
 8007bd4:	2e20      	cmp	r6, #32
 8007bd6:	d028      	beq.n	8007c2a <_GetClipParam+0xbe>
 8007bd8:	2e10      	cmp	r6, #16
 8007bda:	d12e      	bne.n	8007c3a <_GetClipParam+0xce>
 8007bdc:	68e3      	ldr	r3, [r4, #12]
 8007bde:	68a2      	ldr	r2, [r4, #8]
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 8007be8:	e025      	b.n	8007c36 <_GetClipParam+0xca>
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	10db      	asrs	r3, r3, #3
 8007bee:	00da      	lsls	r2, r3, #3
 8007bf0:	60e2      	str	r2, [r4, #12]
 8007bf2:	68a2      	ldr	r2, [r4, #8]
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 8007bfa:	e01c      	b.n	8007c36 <_GetClipParam+0xca>
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	105b      	asrs	r3, r3, #1
 8007c00:	005a      	lsls	r2, r3, #1
 8007c02:	60e2      	str	r2, [r4, #12]
 8007c04:	68a2      	ldr	r2, [r4, #8]
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 8007c0c:	e013      	b.n	8007c36 <_GetClipParam+0xca>
 8007c0e:	68a2      	ldr	r2, [r4, #8]
 8007c10:	68e3      	ldr	r3, [r4, #12]
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	1aad      	subs	r5, r5, r2
 8007c16:	e00e      	b.n	8007c36 <_GetClipParam+0xca>
 8007c18:	68e3      	ldr	r3, [r4, #12]
 8007c1a:	68a2      	ldr	r2, [r4, #8]
 8007c1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007c20:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	4415      	add	r5, r2
 8007c28:	e005      	b.n	8007c36 <_GetClipParam+0xca>
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	68a2      	ldr	r2, [r4, #8]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 8007c36:	1aeb      	subs	r3, r5, r3
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3c:	20000044 	.word	0x20000044

08007c40 <_GetBitfieldsPara>:
 8007c40:	2300      	movs	r3, #0
 8007c42:	600b      	str	r3, [r1, #0]
 8007c44:	07c3      	lsls	r3, r0, #31
 8007c46:	d403      	bmi.n	8007c50 <_GetBitfieldsPara+0x10>
 8007c48:	680b      	ldr	r3, [r1, #0]
 8007c4a:	0840      	lsrs	r0, r0, #1
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	e7f8      	b.n	8007c42 <_GetBitfieldsPara+0x2>
 8007c50:	2300      	movs	r3, #0
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	07c3      	lsls	r3, r0, #31
 8007c56:	d503      	bpl.n	8007c60 <_GetBitfieldsPara+0x20>
 8007c58:	6813      	ldr	r3, [r2, #0]
 8007c5a:	0840      	lsrs	r0, r0, #1
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	e7f8      	b.n	8007c52 <_GetBitfieldsPara+0x12>
 8007c60:	4770      	bx	lr

08007c62 <_DrawLine_RGB>:
 8007c62:	6983      	ldr	r3, [r0, #24]
 8007c64:	b513      	push	{r0, r1, r4, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	b1c3      	cbz	r3, 8007c9c <_DrawLine_RGB+0x3a>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	68e2      	ldr	r2, [r4, #12]
 8007c72:	4293      	cmp	r3, r2
 8007c74:	da2b      	bge.n	8007cce <_DrawLine_RGB+0x6c>
 8007c76:	6921      	ldr	r1, [r4, #16]
 8007c78:	6822      	ldr	r2, [r4, #0]
 8007c7a:	a802      	add	r0, sp, #8
 8007c7c:	fb01 2303 	mla	r3, r1, r3, r2
 8007c80:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007c84:	f7ff fbfc 	bl	8007480 <GUI__Read32>
 8007c88:	69a3      	ldr	r3, [r4, #24]
 8007c8a:	4798      	blx	r3
 8007c8c:	6963      	ldr	r3, [r4, #20]
 8007c8e:	4798      	blx	r3
 8007c90:	69e3      	ldr	r3, [r4, #28]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4798      	blx	r3
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	e7e7      	b.n	8007c6c <_DrawLine_RGB+0xa>
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	68e2      	ldr	r2, [r4, #12]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	da13      	bge.n	8007cce <_DrawLine_RGB+0x6c>
 8007ca6:	6922      	ldr	r2, [r4, #16]
 8007ca8:	6821      	ldr	r1, [r4, #0]
 8007caa:	435a      	muls	r2, r3
 8007cac:	188b      	adds	r3, r1, r2
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	7858      	ldrb	r0, [r3, #1]
 8007cb2:	5c8a      	ldrb	r2, [r1, r2]
 8007cb4:	0200      	lsls	r0, r0, #8
 8007cb6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007cba:	789a      	ldrb	r2, [r3, #2]
 8007cbc:	6963      	ldr	r3, [r4, #20]
 8007cbe:	4310      	orrs	r0, r2
 8007cc0:	4798      	blx	r3
 8007cc2:	69e3      	ldr	r3, [r4, #28]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4798      	blx	r3
 8007cc8:	6863      	ldr	r3, [r4, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	e7e6      	b.n	8007c9c <_DrawLine_RGB+0x3a>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	b113      	cbz	r3, 8007cd8 <_DrawLine_RGB+0x76>
 8007cd2:	69e3      	ldr	r3, [r4, #28]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	4798      	blx	r3
 8007cd8:	b002      	add	sp, #8
 8007cda:	bd10      	pop	{r4, pc}

08007cdc <_NextPixel_FlushBuffer>:
 8007cdc:	b530      	push	{r4, r5, lr}
 8007cde:	4c10      	ldr	r4, [pc, #64]	; (8007d20 <_NextPixel_FlushBuffer+0x44>)
 8007ce0:	6a22      	ldr	r2, [r4, #32]
 8007ce2:	b089      	sub	sp, #36	; 0x24
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	428a      	cmp	r2, r1
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	9306      	str	r3, [sp, #24]
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	bf08      	it	eq
 8007cf2:	ab06      	addeq	r3, sp, #24
 8007cf4:	6962      	ldr	r2, [r4, #20]
 8007cf6:	9305      	str	r3, [sp, #20]
 8007cf8:	2500      	movs	r5, #0
 8007cfa:	9100      	str	r1, [sp, #0]
 8007cfc:	9101      	str	r1, [sp, #4]
 8007cfe:	9503      	str	r5, [sp, #12]
 8007d00:	9204      	str	r2, [sp, #16]
 8007d02:	1d20      	adds	r0, r4, #4
 8007d04:	9107      	str	r1, [sp, #28]
 8007d06:	2301      	movs	r3, #1
 8007d08:	c807      	ldmia	r0, {r0, r1, r2}
 8007d0a:	f002 fff3 	bl	800acf4 <LCD_DrawBitmap>
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d12:	62a5      	str	r5, [r4, #40]	; 0x28
 8007d14:	4413      	add	r3, r2
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	6963      	ldr	r3, [r4, #20]
 8007d1a:	61a3      	str	r3, [r4, #24]
 8007d1c:	b009      	add	sp, #36	; 0x24
 8007d1e:	bd30      	pop	{r4, r5, pc}
 8007d20:	20002948 	.word	0x20002948

08007d24 <_NextPixel_NextLine>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4c06      	ldr	r4, [pc, #24]	; (8007d40 <_NextPixel_NextLine+0x1c>)
 8007d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d2a:	b10b      	cbz	r3, 8007d30 <_NextPixel_NextLine+0xc>
 8007d2c:	f7ff ffd6 	bl	8007cdc <_NextPixel_FlushBuffer>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	68a3      	ldr	r3, [r4, #8]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	60a3      	str	r3, [r4, #8]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d3e:	bd10      	pop	{r4, pc}
 8007d40:	20002948 	.word	0x20002948

08007d44 <_NextPixel_SetPixel>:
 8007d44:	4b33      	ldr	r3, [pc, #204]	; (8007e14 <_NextPixel_SetPixel+0xd0>)
 8007d46:	69da      	ldr	r2, [r3, #28]
 8007d48:	2a02      	cmp	r2, #2
 8007d4a:	b570      	push	{r4, r5, r6, lr}
 8007d4c:	d04e      	beq.n	8007dec <_NextPixel_SetPixel+0xa8>
 8007d4e:	2a04      	cmp	r2, #4
 8007d50:	d050      	beq.n	8007df4 <_NextPixel_SetPixel+0xb0>
 8007d52:	2a01      	cmp	r2, #1
 8007d54:	d152      	bne.n	8007dfc <_NextPixel_SetPixel+0xb8>
 8007d56:	6a19      	ldr	r1, [r3, #32]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	3901      	subs	r1, #1
 8007d5c:	2907      	cmp	r1, #7
 8007d5e:	d84d      	bhi.n	8007dfc <_NextPixel_SetPixel+0xb8>
 8007d60:	e8df f001 	tbb	[pc, r1]
 8007d64:	264c1504 	.word	0x264c1504
 8007d68:	404c4c4c 	.word	0x404c4c4c
 8007d6c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007d6e:	7816      	ldrb	r6, [r2, #0]
 8007d70:	4928      	ldr	r1, [pc, #160]	; (8007e14 <_NextPixel_SetPixel+0xd0>)
 8007d72:	f1c4 0407 	rsb	r4, r4, #7
 8007d76:	2501      	movs	r5, #1
 8007d78:	40a5      	lsls	r5, r4
 8007d7a:	ea26 0505 	bic.w	r5, r6, r5
 8007d7e:	fa00 f404 	lsl.w	r4, r0, r4
 8007d82:	ea45 0004 	orr.w	r0, r5, r4
 8007d86:	7010      	strb	r0, [r2, #0]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	3201      	adds	r2, #1
 8007d8c:	e020      	b.n	8007dd0 <_NextPixel_SetPixel+0x8c>
 8007d8e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007d90:	7816      	ldrb	r6, [r2, #0]
 8007d92:	4920      	ldr	r1, [pc, #128]	; (8007e14 <_NextPixel_SetPixel+0xd0>)
 8007d94:	f1c4 0406 	rsb	r4, r4, #6
 8007d98:	2503      	movs	r5, #3
 8007d9a:	40a5      	lsls	r5, r4
 8007d9c:	ea26 0505 	bic.w	r5, r6, r5
 8007da0:	fa00 f404 	lsl.w	r4, r0, r4
 8007da4:	ea45 0004 	orr.w	r0, r5, r4
 8007da8:	7010      	strb	r0, [r2, #0]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	3202      	adds	r2, #2
 8007dae:	e00f      	b.n	8007dd0 <_NextPixel_SetPixel+0x8c>
 8007db0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007db2:	7816      	ldrb	r6, [r2, #0]
 8007db4:	4917      	ldr	r1, [pc, #92]	; (8007e14 <_NextPixel_SetPixel+0xd0>)
 8007db6:	f1c4 0404 	rsb	r4, r4, #4
 8007dba:	250f      	movs	r5, #15
 8007dbc:	40a5      	lsls	r5, r4
 8007dbe:	ea26 0505 	bic.w	r5, r6, r5
 8007dc2:	fa00 f404 	lsl.w	r4, r0, r4
 8007dc6:	ea45 0004 	orr.w	r0, r5, r4
 8007dca:	7010      	strb	r0, [r2, #0]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dce:	3204      	adds	r2, #4
 8007dd0:	2a08      	cmp	r2, #8
 8007dd2:	d001      	beq.n	8007dd8 <_NextPixel_SetPixel+0x94>
 8007dd4:	62ca      	str	r2, [r1, #44]	; 0x2c
 8007dd6:	e011      	b.n	8007dfc <_NextPixel_SetPixel+0xb8>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	62ca      	str	r2, [r1, #44]	; 0x2c
 8007ddc:	698a      	ldr	r2, [r1, #24]
 8007dde:	3201      	adds	r2, #1
 8007de0:	618a      	str	r2, [r1, #24]
 8007de2:	e00b      	b.n	8007dfc <_NextPixel_SetPixel+0xb8>
 8007de4:	7010      	strb	r0, [r2, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	3201      	adds	r2, #1
 8007dea:	e006      	b.n	8007dfa <_NextPixel_SetPixel+0xb6>
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	f822 0b02 	strh.w	r0, [r2], #2
 8007df2:	e002      	b.n	8007dfa <_NextPixel_SetPixel+0xb6>
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	f842 0b04 	str.w	r0, [r2], #4
 8007dfa:	619a      	str	r2, [r3, #24]
 8007dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfe:	3201      	adds	r2, #1
 8007e00:	629a      	str	r2, [r3, #40]	; 0x28
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d103      	bne.n	8007e10 <_NextPixel_SetPixel+0xcc>
 8007e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e0c:	f7ff bf66 	b.w	8007cdc <_NextPixel_FlushBuffer>
 8007e10:	bd70      	pop	{r4, r5, r6, pc}
 8007e12:	bf00      	nop
 8007e14:	20002948 	.word	0x20002948

08007e18 <_NextPixel_End>:
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <_NextPixel_End+0x20>)
 8007e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	461c      	mov	r4, r3
 8007e20:	b10a      	cbz	r2, 8007e26 <_NextPixel_End+0xe>
 8007e22:	f7ff ff5b 	bl	8007cdc <_NextPixel_FlushBuffer>
 8007e26:	4805      	ldr	r0, [pc, #20]	; (8007e3c <_NextPixel_End+0x24>)
 8007e28:	f000 fe00 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8007e2c:	6920      	ldr	r0, [r4, #16]
 8007e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e32:	f000 be1b 	b.w	8008a6c <GUI_ALLOC_Free>
 8007e36:	bf00      	nop
 8007e38:	20002948 	.word	0x20002948
 8007e3c:	2000295c 	.word	0x2000295c

08007e40 <_NextPixel_Start>:
 8007e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	469a      	mov	sl, r3
 8007e46:	4b1f      	ldr	r3, [pc, #124]	; (8007ec4 <_NextPixel_Start+0x84>)
 8007e48:	4c1f      	ldr	r4, [pc, #124]	; (8007ec8 <_NextPixel_Start+0x88>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	1a12      	subs	r2, r2, r0
 8007e4e:	3201      	adds	r2, #1
 8007e50:	4606      	mov	r6, r0
 8007e52:	7c58      	ldrb	r0, [r3, #17]
 8007e54:	60e2      	str	r2, [r4, #12]
 8007e56:	f002 fcc5 	bl	800a7e4 <GUI_GetBitsPerPixelEx>
 8007e5a:	2817      	cmp	r0, #23
 8007e5c:	bfc8      	it	gt
 8007e5e:	2020      	movgt	r0, #32
 8007e60:	2808      	cmp	r0, #8
 8007e62:	6220      	str	r0, [r4, #32]
 8007e64:	dd04      	ble.n	8007e70 <_NextPixel_Start+0x30>
 8007e66:	2810      	cmp	r0, #16
 8007e68:	bfcc      	ite	gt
 8007e6a:	2504      	movgt	r5, #4
 8007e6c:	2502      	movle	r5, #2
 8007e6e:	e000      	b.n	8007e72 <_NextPixel_Start+0x32>
 8007e70:	2501      	movs	r5, #1
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8007ec8 <_NextPixel_Start+0x88>
 8007e78:	fb03 f805 	mul.w	r8, r3, r5
 8007e7c:	f000 fede 	bl	8008c3c <GUI_ALLOC_GetMaxSize>
 8007e80:	4540      	cmp	r0, r8
 8007e82:	bf3a      	itte	cc
 8007e84:	fbb0 f0f5 	udivcc	r0, r0, r5
 8007e88:	4368      	mulcc	r0, r5
 8007e8a:	4640      	movcs	r0, r8
 8007e8c:	fb90 f0f5 	sdiv	r0, r0, r5
 8007e90:	6260      	str	r0, [r4, #36]	; 0x24
 8007e92:	2700      	movs	r7, #0
 8007e94:	4640      	mov	r0, r8
 8007e96:	62a7      	str	r7, [r4, #40]	; 0x28
 8007e98:	6066      	str	r6, [r4, #4]
 8007e9a:	6026      	str	r6, [r4, #0]
 8007e9c:	f8c4 a008 	str.w	sl, [r4, #8]
 8007ea0:	61e5      	str	r5, [r4, #28]
 8007ea2:	62e7      	str	r7, [r4, #44]	; 0x2c
 8007ea4:	f000 ff5e 	bl	8008d64 <GUI_ALLOC_AllocNoInit>
 8007ea8:	6120      	str	r0, [r4, #16]
 8007eaa:	b140      	cbz	r0, 8007ebe <_NextPixel_Start+0x7e>
 8007eac:	f000 fdb0 	bl	8008a10 <GUI_ALLOC_LockH>
 8007eb0:	f8c9 0014 	str.w	r0, [r9, #20]
 8007eb4:	f8c9 0018 	str.w	r0, [r9, #24]
 8007eb8:	4638      	mov	r0, r7
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec4:	20000044 	.word	0x20000044
 8007ec8:	20002948 	.word	0x20002948

08007ecc <_GetEarlyOut.isra.0>:
 8007ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	6807      	ldr	r7, [r0, #0]
 8007ed2:	680e      	ldr	r6, [r1, #0]
 8007ed4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007ed8:	9c08      	ldr	r4, [sp, #32]
 8007eda:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007ede:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007ee0:	eb07 0906 	add.w	r9, r7, r6
 8007ee4:	681f      	ldr	r7, [r3, #0]
 8007ee6:	f8c0 9000 	str.w	r9, [r0]
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	dd04      	ble.n	8007ef8 <_GetEarlyOut.isra.0+0x2c>
 8007eee:	3f01      	subs	r7, #1
 8007ef0:	6027      	str	r7, [r4, #0]
 8007ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ef6:	e005      	b.n	8007f04 <_GetEarlyOut.isra.0+0x38>
 8007ef8:	d004      	beq.n	8007f04 <_GetEarlyOut.isra.0+0x38>
 8007efa:	427f      	negs	r7, r7
 8007efc:	2600      	movs	r6, #0
 8007efe:	601f      	str	r7, [r3, #0]
 8007f00:	6026      	str	r6, [r4, #0]
 8007f02:	2701      	movs	r7, #1
 8007f04:	f8c8 7000 	str.w	r7, [r8]
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	d032      	beq.n	8007f72 <_GetEarlyOut.isra.0+0xa6>
 8007f0c:	690f      	ldr	r7, [r1, #16]
 8007f0e:	694e      	ldr	r6, [r1, #20]
 8007f10:	443e      	add	r6, r7
 8007f12:	681f      	ldr	r7, [r3, #0]
 8007f14:	1bbe      	subs	r6, r7, r6
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	601e      	str	r6, [r3, #0]
 8007f1a:	dd2a      	ble.n	8007f72 <_GetEarlyOut.isra.0+0xa6>
 8007f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da08      	bge.n	8007f36 <_GetEarlyOut.isra.0+0x6a>
 8007f24:	694b      	ldr	r3, [r1, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd0e      	ble.n	8007f48 <_GetEarlyOut.isra.0+0x7c>
 8007f2a:	fb03 9605 	mla	r6, r3, r5, r9
 8007f2e:	6006      	str	r6, [r0, #0]
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	1ac3      	subs	r3, r0, r3
 8007f34:	e007      	b.n	8007f46 <_GetEarlyOut.isra.0+0x7a>
 8007f36:	690b      	ldr	r3, [r1, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dd05      	ble.n	8007f48 <_GetEarlyOut.isra.0+0x7c>
 8007f3c:	fb03 9605 	mla	r6, r3, r5, r9
 8007f40:	6006      	str	r6, [r0, #0]
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	4403      	add	r3, r0
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	6888      	ldr	r0, [r1, #8]
 8007f4a:	68cb      	ldr	r3, [r1, #12]
 8007f4c:	4403      	add	r3, r0
 8007f4e:	6810      	ldr	r0, [r2, #0]
 8007f50:	1ac3      	subs	r3, r0, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	dd0c      	ble.n	8007f72 <_GetEarlyOut.isra.0+0xa6>
 8007f58:	f8dc 2000 	ldr.w	r2, [ip]
 8007f5c:	68cb      	ldr	r3, [r1, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f8cc 3000 	str.w	r3, [ip]
 8007f64:	684b      	ldr	r3, [r1, #4]
 8007f66:	1aed      	subs	r5, r5, r3
 8007f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	601d      	str	r5, [r3, #0]
 8007f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f72:	2001      	movs	r0, #1
 8007f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007f78 <GUI_BMP__ReadData>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	460d      	mov	r5, r1
 8007f7e:	b10b      	cbz	r3, 8007f84 <GUI_BMP__ReadData+0xc>
 8007f80:	2300      	movs	r3, #0
 8007f82:	6043      	str	r3, [r0, #4]
 8007f84:	4611      	mov	r1, r2
 8007f86:	6826      	ldr	r6, [r4, #0]
 8007f88:	68a0      	ldr	r0, [r4, #8]
 8007f8a:	6863      	ldr	r3, [r4, #4]
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	47b0      	blx	r6
 8007f90:	42a8      	cmp	r0, r5
 8007f92:	d104      	bne.n	8007f9e <GUI_BMP__ReadData+0x26>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	441d      	add	r5, r3
 8007f98:	6065      	str	r5, [r4, #4]
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	bd70      	pop	{r4, r5, r6, pc}
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fa4 <GUI_BMP__ReadPalette>:
 8007fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460d      	mov	r5, r1
 8007faa:	2400      	movs	r4, #0
 8007fac:	42ac      	cmp	r4, r5
 8007fae:	da17      	bge.n	8007fe0 <GUI_BMP__ReadPalette+0x3c>
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	eb0d 0201 	add.w	r2, sp, r1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f7ff ffdd 	bl	8007f78 <GUI_BMP__ReadData>
 8007fbe:	b988      	cbnz	r0, 8007fe4 <GUI_BMP__ReadPalette+0x40>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	4a0a      	ldr	r2, [pc, #40]	; (8007fec <GUI_BMP__ReadPalette+0x48>)
 8007fc4:	7858      	ldrb	r0, [r3, #1]
 8007fc6:	6817      	ldr	r7, [r2, #0]
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	789b      	ldrb	r3, [r3, #2]
 8007fcc:	0200      	lsls	r0, r0, #8
 8007fce:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007fd2:	4318      	orrs	r0, r3
 8007fd4:	f002 fffe 	bl	800afd4 <LCD_Color2Index>
 8007fd8:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8007fdc:	3401      	adds	r4, #1
 8007fde:	e7e5      	b.n	8007fac <GUI_BMP__ReadPalette+0x8>
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e000      	b.n	8007fe6 <GUI_BMP__ReadPalette+0x42>
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	b003      	add	sp, #12
 8007fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20003914 	.word	0x20003914

08007ff0 <_ManageBitfields.part.2>:
 8007ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2110      	movs	r1, #16
 8007ff6:	aa01      	add	r2, sp, #4
 8007ff8:	f7ff ffbe 	bl	8007f78 <GUI_BMP__ReadData>
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	bb10      	cbnz	r0, 8008046 <_ManageBitfields.part.2+0x56>
 8008000:	a801      	add	r0, sp, #4
 8008002:	f7ff fa3d 	bl	8007480 <GUI__Read32>
 8008006:	4c12      	ldr	r4, [pc, #72]	; (8008050 <_ManageBitfields.part.2+0x60>)
 8008008:	6020      	str	r0, [r4, #0]
 800800a:	a801      	add	r0, sp, #4
 800800c:	f7ff fa38 	bl	8007480 <GUI__Read32>
 8008010:	6060      	str	r0, [r4, #4]
 8008012:	a801      	add	r0, sp, #4
 8008014:	f7ff fa34 	bl	8007480 <GUI__Read32>
 8008018:	4621      	mov	r1, r4
 800801a:	60a0      	str	r0, [r4, #8]
 800801c:	f104 0218 	add.w	r2, r4, #24
 8008020:	f851 0b0c 	ldr.w	r0, [r1], #12
 8008024:	f7ff fe0c 	bl	8007c40 <_GetBitfieldsPara>
 8008028:	6860      	ldr	r0, [r4, #4]
 800802a:	f104 0110 	add.w	r1, r4, #16
 800802e:	f104 021c 	add.w	r2, r4, #28
 8008032:	f7ff fe05 	bl	8007c40 <_GetBitfieldsPara>
 8008036:	68a0      	ldr	r0, [r4, #8]
 8008038:	f104 0114 	add.w	r1, r4, #20
 800803c:	f104 0220 	add.w	r2, r4, #32
 8008040:	f7ff fdfe 	bl	8007c40 <_GetBitfieldsPara>
 8008044:	e000      	b.n	8008048 <_ManageBitfields.part.2+0x58>
 8008046:	2501      	movs	r5, #1
 8008048:	4628      	mov	r0, r5
 800804a:	b003      	add	sp, #12
 800804c:	bd30      	pop	{r4, r5, pc}
 800804e:	bf00      	nop
 8008050:	20002978 	.word	0x20002978

08008054 <_Index2ColorBitfields>:
 8008054:	4b15      	ldr	r3, [pc, #84]	; (80080ac <_Index2ColorBitfields+0x58>)
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	6919      	ldr	r1, [r3, #16]
 800805a:	4002      	ands	r2, r0
 800805c:	40ca      	lsrs	r2, r1
 800805e:	69d9      	ldr	r1, [r3, #28]
 8008060:	b530      	push	{r4, r5, lr}
 8008062:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 8008066:	2201      	movs	r2, #1
 8008068:	fa02 f101 	lsl.w	r1, r2, r1
 800806c:	3901      	subs	r1, #1
 800806e:	fbb5 f5f1 	udiv	r5, r5, r1
 8008072:	6899      	ldr	r1, [r3, #8]
 8008074:	695c      	ldr	r4, [r3, #20]
 8008076:	4001      	ands	r1, r0
 8008078:	40e1      	lsrs	r1, r4
 800807a:	6a1c      	ldr	r4, [r3, #32]
 800807c:	fa02 f404 	lsl.w	r4, r2, r4
 8008080:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8008084:	3c01      	subs	r4, #1
 8008086:	fbb1 f4f4 	udiv	r4, r1, r4
 800808a:	0424      	lsls	r4, r4, #16
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 8008092:	68dc      	ldr	r4, [r3, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	4001      	ands	r1, r0
 8008098:	40e1      	lsrs	r1, r4
 800809a:	409a      	lsls	r2, r3
 800809c:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80080a0:	3a01      	subs	r2, #1
 80080a2:	fbb1 f0f2 	udiv	r0, r1, r2
 80080a6:	4328      	orrs	r0, r5
 80080a8:	bd30      	pop	{r4, r5, pc}
 80080aa:	bf00      	nop
 80080ac:	20002978 	.word	0x20002978

080080b0 <_DrawBitmap_RGB>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	b09d      	sub	sp, #116	; 0x74
 80080b6:	af0a      	add	r7, sp, #40	; 0x28
 80080b8:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 80080bc:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 80080c0:	9107      	str	r1, [sp, #28]
 80080c2:	4606      	mov	r6, r0
 80080c4:	468a      	mov	sl, r1
 80080c6:	4614      	mov	r4, r2
 80080c8:	2100      	movs	r1, #0
 80080ca:	2218      	movs	r2, #24
 80080cc:	4638      	mov	r0, r7
 80080ce:	469b      	mov	fp, r3
 80080d0:	9306      	str	r3, [sp, #24]
 80080d2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80080d4:	f003 fdda 	bl	800bc8c <memset>
 80080d8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80080dc:	e88d 0208 	stmia.w	sp, {r3, r9}
 80080e0:	4650      	mov	r0, sl
 80080e2:	4621      	mov	r1, r4
 80080e4:	465a      	mov	r2, fp
 80080e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080e8:	9702      	str	r7, [sp, #8]
 80080ea:	f7ff fd3f 	bl	8007b6c <_GetClipParam>
 80080ee:	ab07      	add	r3, sp, #28
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	ab12      	add	r3, sp, #72	; 0x48
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	ab08      	add	r3, sp, #32
 80080f8:	9302      	str	r3, [sp, #8]
 80080fa:	ab09      	add	r3, sp, #36	; 0x24
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	f8cd 9010 	str.w	r9, [sp, #16]
 8008102:	1d30      	adds	r0, r6, #4
 8008104:	4639      	mov	r1, r7
 8008106:	aa06      	add	r2, sp, #24
 8008108:	ab26      	add	r3, sp, #152	; 0x98
 800810a:	f7ff fedf 	bl	8007ecc <_GetEarlyOut.isra.0>
 800810e:	b108      	cbz	r0, 8008114 <_DrawBitmap_RGB+0x64>
 8008110:	2400      	movs	r4, #0
 8008112:	e04e      	b.n	80081b2 <_DrawBitmap_RGB+0x102>
 8008114:	4b29      	ldr	r3, [pc, #164]	; (80081bc <_DrawBitmap_RGB+0x10c>)
 8008116:	4f2a      	ldr	r7, [pc, #168]	; (80081c0 <_DrawBitmap_RGB+0x110>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	7c58      	ldrb	r0, [r3, #17]
 800811c:	f002 fb90 	bl	800a840 <GUI_GetpfColor2IndexEx>
 8008120:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008122:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 80081c4 <_DrawBitmap_RGB+0x114>
 8008126:	9015      	str	r0, [sp, #84]	; 0x54
 8008128:	42bd      	cmp	r5, r7
 800812a:	9316      	str	r3, [sp, #88]	; 0x58
 800812c:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8008130:	9807      	ldr	r0, [sp, #28]
 8008132:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008134:	9a06      	ldr	r2, [sp, #24]
 8008136:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008138:	d109      	bne.n	800814e <_DrawBitmap_RGB+0x9e>
 800813a:	4421      	add	r1, r4
 800813c:	4402      	add	r2, r0
 800813e:	440b      	add	r3, r1
 8008140:	f8de 4000 	ldr.w	r4, [lr]
 8008144:	3a01      	subs	r2, #1
 8008146:	3b01      	subs	r3, #1
 8008148:	47a0      	blx	r4
 800814a:	b148      	cbz	r0, 8008160 <_DrawBitmap_RGB+0xb0>
 800814c:	e01b      	b.n	8008186 <_DrawBitmap_RGB+0xd6>
 800814e:	440c      	add	r4, r1
 8008150:	9419      	str	r4, [sp, #100]	; 0x64
 8008152:	4402      	add	r2, r0
 8008154:	441c      	add	r4, r3
 8008156:	3a01      	subs	r2, #1
 8008158:	3c01      	subs	r4, #1
 800815a:	9018      	str	r0, [sp, #96]	; 0x60
 800815c:	921a      	str	r2, [sp, #104]	; 0x68
 800815e:	941b      	str	r4, [sp, #108]	; 0x6c
 8008160:	9b06      	ldr	r3, [sp, #24]
 8008162:	9313      	str	r3, [sp, #76]	; 0x4c
 8008164:	2300      	movs	r3, #0
 8008166:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800816a:	9311      	str	r3, [sp, #68]	; 0x44
 800816c:	4630      	mov	r0, r6
 800816e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008170:	aa10      	add	r2, sp, #64	; 0x40
 8008172:	2300      	movs	r3, #0
 8008174:	f7ff ff00 	bl	8007f78 <GUI_BMP__ReadData>
 8008178:	4604      	mov	r4, r0
 800817a:	b130      	cbz	r0, 800818a <_DrawBitmap_RGB+0xda>
 800817c:	42bd      	cmp	r5, r7
 800817e:	d102      	bne.n	8008186 <_DrawBitmap_RGB+0xd6>
 8008180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	4798      	blx	r3
 8008186:	2401      	movs	r4, #1
 8008188:	e013      	b.n	80081b2 <_DrawBitmap_RGB+0x102>
 800818a:	a810      	add	r0, sp, #64	; 0x40
 800818c:	47a8      	blx	r5
 800818e:	6872      	ldr	r2, [r6, #4]
 8008190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008192:	4413      	add	r3, r2
 8008194:	6073      	str	r3, [r6, #4]
 8008196:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	4413      	add	r3, r2
 800819c:	9312      	str	r3, [sp, #72]	; 0x48
 800819e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081a0:	3b01      	subs	r3, #1
 80081a2:	9326      	str	r3, [sp, #152]	; 0x98
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e1      	bne.n	800816c <_DrawBitmap_RGB+0xbc>
 80081a8:	42bd      	cmp	r5, r7
 80081aa:	d1b1      	bne.n	8008110 <_DrawBitmap_RGB+0x60>
 80081ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	4798      	blx	r3
 80081b2:	4620      	mov	r0, r4
 80081b4:	b01d      	add	sp, #116	; 0x74
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	bf00      	nop
 80081bc:	20000044 	.word	0x20000044
 80081c0:	08007c63 	.word	0x08007c63
 80081c4:	20000054 	.word	0x20000054

080081c8 <_DrawBitmap_16bpp>:
 80081c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081cc:	461f      	mov	r7, r3
 80081ce:	b093      	sub	sp, #76	; 0x4c
 80081d0:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80081d4:	ac0c      	add	r4, sp, #48	; 0x30
 80081d6:	f108 081f 	add.w	r8, r8, #31
 80081da:	4605      	mov	r5, r0
 80081dc:	4689      	mov	r9, r1
 80081de:	9107      	str	r1, [sp, #28]
 80081e0:	4616      	mov	r6, r2
 80081e2:	2100      	movs	r1, #0
 80081e4:	2218      	movs	r2, #24
 80081e6:	4620      	mov	r0, r4
 80081e8:	ea4f 1868 	mov.w	r8, r8, asr #5
 80081ec:	9306      	str	r3, [sp, #24]
 80081ee:	f003 fd4d 	bl	800bc8c <memset>
 80081f2:	463a      	mov	r2, r7
 80081f4:	2310      	movs	r3, #16
 80081f6:	ea4f 0788 	mov.w	r7, r8, lsl #2
 80081fa:	e88d 0088 	stmia.w	sp, {r3, r7}
 80081fe:	4648      	mov	r0, r9
 8008200:	4631      	mov	r1, r6
 8008202:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008204:	9402      	str	r4, [sp, #8]
 8008206:	f7ff fcb1 	bl	8007b6c <_GetClipParam>
 800820a:	ab07      	add	r3, sp, #28
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	ab09      	add	r3, sp, #36	; 0x24
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	ab0a      	add	r3, sp, #40	; 0x28
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	ab0b      	add	r3, sp, #44	; 0x2c
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	9704      	str	r7, [sp, #16]
 800821c:	1d28      	adds	r0, r5, #4
 800821e:	4621      	mov	r1, r4
 8008220:	aa06      	add	r2, sp, #24
 8008222:	ab1a      	add	r3, sp, #104	; 0x68
 8008224:	f7ff fe52 	bl	8007ecc <_GetEarlyOut.isra.0>
 8008228:	2800      	cmp	r0, #0
 800822a:	d142      	bne.n	80082b2 <_DrawBitmap_16bpp+0xea>
 800822c:	4b23      	ldr	r3, [pc, #140]	; (80082bc <_DrawBitmap_16bpp+0xf4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	7c58      	ldrb	r0, [r3, #17]
 8008232:	f002 fafd 	bl	800a830 <LCD_GetpfColor2IndexEx>
 8008236:	4607      	mov	r7, r0
 8008238:	b908      	cbnz	r0, 800823e <_DrawBitmap_16bpp+0x76>
 800823a:	2401      	movs	r4, #1
 800823c:	e03a      	b.n	80082b4 <_DrawBitmap_16bpp+0xec>
 800823e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008240:	9807      	ldr	r0, [sp, #28]
 8008242:	9a06      	ldr	r2, [sp, #24]
 8008244:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008246:	4431      	add	r1, r6
 8008248:	4e1d      	ldr	r6, [pc, #116]	; (80082c0 <_DrawBitmap_16bpp+0xf8>)
 800824a:	4402      	add	r2, r0
 800824c:	440b      	add	r3, r1
 800824e:	6834      	ldr	r4, [r6, #0]
 8008250:	3a01      	subs	r2, #1
 8008252:	3b01      	subs	r3, #1
 8008254:	47a0      	blx	r4
 8008256:	2800      	cmp	r0, #0
 8008258:	d1ef      	bne.n	800823a <_DrawBitmap_16bpp+0x72>
 800825a:	4628      	mov	r0, r5
 800825c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800825e:	aa08      	add	r2, sp, #32
 8008260:	2300      	movs	r3, #0
 8008262:	f7ff fe89 	bl	8007f78 <GUI_BMP__ReadData>
 8008266:	4604      	mov	r4, r0
 8008268:	2800      	cmp	r0, #0
 800826a:	d1e6      	bne.n	800823a <_DrawBitmap_16bpp+0x72>
 800826c:	4680      	mov	r8, r0
 800826e:	9b06      	ldr	r3, [sp, #24]
 8008270:	4598      	cmp	r8, r3
 8008272:	da0a      	bge.n	800828a <_DrawBitmap_16bpp+0xc2>
 8008274:	a808      	add	r0, sp, #32
 8008276:	f7ff f8fb 	bl	8007470 <GUI__Read16>
 800827a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800827c:	4798      	blx	r3
 800827e:	47b8      	blx	r7
 8008280:	6873      	ldr	r3, [r6, #4]
 8008282:	4798      	blx	r3
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	e7f1      	b.n	800826e <_DrawBitmap_16bpp+0xa6>
 800828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828c:	b10b      	cbz	r3, 8008292 <_DrawBitmap_16bpp+0xca>
 800828e:	68b3      	ldr	r3, [r6, #8]
 8008290:	4798      	blx	r3
 8008292:	686a      	ldr	r2, [r5, #4]
 8008294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008296:	4413      	add	r3, r2
 8008298:	606b      	str	r3, [r5, #4]
 800829a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829e:	4413      	add	r3, r2
 80082a0:	9309      	str	r3, [sp, #36]	; 0x24
 80082a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082a4:	3b01      	subs	r3, #1
 80082a6:	931a      	str	r3, [sp, #104]	; 0x68
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1d6      	bne.n	800825a <_DrawBitmap_16bpp+0x92>
 80082ac:	68f3      	ldr	r3, [r6, #12]
 80082ae:	4798      	blx	r3
 80082b0:	e000      	b.n	80082b4 <_DrawBitmap_16bpp+0xec>
 80082b2:	2400      	movs	r4, #0
 80082b4:	4620      	mov	r0, r4
 80082b6:	b013      	add	sp, #76	; 0x4c
 80082b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082bc:	20000044 	.word	0x20000044
 80082c0:	20000054 	.word	0x20000054

080082c4 <GUI_BMP__Init>:
 80082c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	468b      	mov	fp, r1
 80082ca:	4692      	mov	sl, r2
 80082cc:	4698      	mov	r8, r3
 80082ce:	2136      	movs	r1, #54	; 0x36
 80082d0:	aa01      	add	r2, sp, #4
 80082d2:	2301      	movs	r3, #1
 80082d4:	4605      	mov	r5, r0
 80082d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80082d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80082da:	f7ff fe4d 	bl	8007f78 <GUI_BMP__ReadData>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d15e      	bne.n	80083a0 <GUI_BMP__Init+0xdc>
 80082e2:	a801      	add	r0, sp, #4
 80082e4:	f7ff f8c4 	bl	8007470 <GUI__Read16>
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	4681      	mov	r9, r0
 80082ec:	330c      	adds	r3, #12
 80082ee:	a801      	add	r0, sp, #4
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	f7ff f8c5 	bl	8007480 <GUI__Read32>
 80082f6:	4607      	mov	r7, r0
 80082f8:	a801      	add	r0, sp, #4
 80082fa:	f7ff f8c1 	bl	8007480 <GUI__Read32>
 80082fe:	f8cb 0000 	str.w	r0, [fp]
 8008302:	a801      	add	r0, sp, #4
 8008304:	f7ff f8bc 	bl	8007480 <GUI__Read32>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	f8ca 0000 	str.w	r0, [sl]
 800830e:	3302      	adds	r3, #2
 8008310:	a801      	add	r0, sp, #4
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	f7ff f8ac 	bl	8007470 <GUI__Read16>
 8008318:	f8a8 0000 	strh.w	r0, [r8]
 800831c:	a801      	add	r0, sp, #4
 800831e:	f7ff f8af 	bl	8007480 <GUI__Read32>
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	6030      	str	r0, [r6, #0]
 8008326:	330c      	adds	r3, #12
 8008328:	a801      	add	r0, sp, #4
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	f7ff f8a8 	bl	8007480 <GUI__Read32>
 8008330:	f8b8 3000 	ldrh.w	r3, [r8]
 8008334:	2b08      	cmp	r3, #8
 8008336:	d00f      	beq.n	8008358 <GUI_BMP__Init+0x94>
 8008338:	d805      	bhi.n	8008346 <GUI_BMP__Init+0x82>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d00a      	beq.n	8008354 <GUI_BMP__Init+0x90>
 800833e:	2b04      	cmp	r3, #4
 8008340:	d12e      	bne.n	80083a0 <GUI_BMP__Init+0xdc>
 8008342:	2310      	movs	r3, #16
 8008344:	e00c      	b.n	8008360 <GUI_BMP__Init+0x9c>
 8008346:	2b18      	cmp	r3, #24
 8008348:	d009      	beq.n	800835e <GUI_BMP__Init+0x9a>
 800834a:	2b20      	cmp	r3, #32
 800834c:	d007      	beq.n	800835e <GUI_BMP__Init+0x9a>
 800834e:	2b10      	cmp	r3, #16
 8008350:	d126      	bne.n	80083a0 <GUI_BMP__Init+0xdc>
 8008352:	e004      	b.n	800835e <GUI_BMP__Init+0x9a>
 8008354:	2302      	movs	r3, #2
 8008356:	e003      	b.n	8008360 <GUI_BMP__Init+0x9c>
 8008358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800835c:	e000      	b.n	8008360 <GUI_BMP__Init+0x9c>
 800835e:	2300      	movs	r3, #0
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	b10b      	cbz	r3, 800836a <GUI_BMP__Init+0xa6>
 8008366:	b100      	cbz	r0, 800836a <GUI_BMP__Init+0xa6>
 8008368:	6020      	str	r0, [r4, #0]
 800836a:	6833      	ldr	r3, [r6, #0]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d105      	bne.n	800837c <GUI_BMP__Init+0xb8>
 8008370:	4628      	mov	r0, r5
 8008372:	f7ff fe3d 	bl	8007ff0 <_ManageBitfields.part.2>
 8008376:	686b      	ldr	r3, [r5, #4]
 8008378:	3b38      	subs	r3, #56	; 0x38
 800837a:	e001      	b.n	8008380 <GUI_BMP__Init+0xbc>
 800837c:	686b      	ldr	r3, [r5, #4]
 800837e:	3b28      	subs	r3, #40	; 0x28
 8008380:	441f      	add	r7, r3
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	606f      	str	r7, [r5, #4]
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	dc09      	bgt.n	80083a0 <GUI_BMP__Init+0xdc>
 800838c:	f644 5342 	movw	r3, #19778	; 0x4d42
 8008390:	4599      	cmp	r9, r3
 8008392:	d105      	bne.n	80083a0 <GUI_BMP__Init+0xdc>
 8008394:	6830      	ldr	r0, [r6, #0]
 8008396:	2803      	cmp	r0, #3
 8008398:	bf94      	ite	ls
 800839a:	2000      	movls	r0, #0
 800839c:	2001      	movhi	r0, #1
 800839e:	e000      	b.n	80083a2 <GUI_BMP__Init+0xde>
 80083a0:	2001      	movs	r0, #1
 80083a2:	b003      	add	sp, #12
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083a8 <GUI_BMP_DrawEx>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	b0a5      	sub	sp, #148	; 0x94
 80083ae:	461d      	mov	r5, r3
 80083b0:	ab10      	add	r3, sp, #64	; 0x40
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	ab11      	add	r3, sp, #68	; 0x44
 80083b6:	901b      	str	r0, [sp, #108]	; 0x6c
 80083b8:	911d      	str	r1, [sp, #116]	; 0x74
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	4617      	mov	r7, r2
 80083be:	a81b      	add	r0, sp, #108	; 0x6c
 80083c0:	a90e      	add	r1, sp, #56	; 0x38
 80083c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80083c4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80083c8:	f7ff ff7c 	bl	80082c4 <GUI_BMP__Init>
 80083cc:	4604      	mov	r4, r0
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f040 8229 	bne.w	8008826 <GUI_BMP_DrawEx+0x47e>
 80083d4:	4b9e      	ldr	r3, [pc, #632]	; (8008650 <GUI_BMP_DrawEx+0x2a8>)
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80083da:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80083dc:	eb05 0803 	add.w	r8, r5, r3
 80083e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e2:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 80083e6:	4407      	add	r7, r0
 80083e8:	3b01      	subs	r3, #1
 80083ea:	443b      	add	r3, r7
 80083ec:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 80083f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083f2:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 80083f6:	3b01      	subs	r3, #1
 80083f8:	4443      	add	r3, r8
 80083fa:	a819      	add	r0, sp, #100	; 0x64
 80083fc:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 8008400:	f001 faca 	bl	8009998 <WM__InitIVRSearch>
 8008404:	2800      	cmp	r0, #0
 8008406:	f000 8215 	beq.w	8008834 <GUI_BMP_DrawEx+0x48c>
 800840a:	9408      	str	r4, [sp, #32]
 800840c:	46a1      	mov	r9, r4
 800840e:	9a08      	ldr	r2, [sp, #32]
 8008410:	b15a      	cbz	r2, 800842a <GUI_BMP_DrawEx+0x82>
 8008412:	ab10      	add	r3, sp, #64	; 0x40
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	ab11      	add	r3, sp, #68	; 0x44
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	a81b      	add	r0, sp, #108	; 0x6c
 800841c:	a90e      	add	r1, sp, #56	; 0x38
 800841e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008420:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8008424:	f7ff ff4e 	bl	80082c4 <GUI_BMP__Init>
 8008428:	4681      	mov	r9, r0
 800842a:	f1b9 0f00 	cmp.w	r9, #0
 800842e:	f040 81f0 	bne.w	8008812 <GUI_BMP_DrawEx+0x46a>
 8008432:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	2b03      	cmp	r3, #3
 8008438:	f200 81eb 	bhi.w	8008812 <GUI_BMP_DrawEx+0x46a>
 800843c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008440:	00a40004 	.word	0x00a40004
 8008444:	01cd00a4 	.word	0x01cd00a4
 8008448:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 800844c:	2c08      	cmp	r4, #8
 800844e:	d012      	beq.n	8008476 <GUI_BMP_DrawEx+0xce>
 8008450:	d805      	bhi.n	800845e <GUI_BMP_DrawEx+0xb6>
 8008452:	2c01      	cmp	r4, #1
 8008454:	d00f      	beq.n	8008476 <GUI_BMP_DrawEx+0xce>
 8008456:	2c04      	cmp	r4, #4
 8008458:	f040 81d9 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 800845c:	e00b      	b.n	8008476 <GUI_BMP_DrawEx+0xce>
 800845e:	2c18      	cmp	r4, #24
 8008460:	d071      	beq.n	8008546 <GUI_BMP_DrawEx+0x19e>
 8008462:	2c20      	cmp	r4, #32
 8008464:	f000 8084 	beq.w	8008570 <GUI_BMP_DrawEx+0x1c8>
 8008468:	2c10      	cmp	r4, #16
 800846a:	f040 81d0 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 800846e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	4b78      	ldr	r3, [pc, #480]	; (8008654 <GUI_BMP_DrawEx+0x2ac>)
 8008474:	e1c3      	b.n	80087fe <GUI_BMP_DrawEx+0x456>
 8008476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008478:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800847a:	9313      	str	r3, [sp, #76]	; 0x4c
 800847c:	ae1e      	add	r6, sp, #120	; 0x78
 800847e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008480:	9712      	str	r7, [sp, #72]	; 0x48
 8008482:	2100      	movs	r1, #0
 8008484:	4630      	mov	r0, r6
 8008486:	2218      	movs	r2, #24
 8008488:	9314      	str	r3, [sp, #80]	; 0x50
 800848a:	f003 fbff 	bl	800bc8c <memset>
 800848e:	a81b      	add	r0, sp, #108	; 0x6c
 8008490:	4629      	mov	r1, r5
 8008492:	f7ff fd87 	bl	8007fa4 <GUI_BMP__ReadPalette>
 8008496:	2800      	cmp	r0, #0
 8008498:	f040 81b9 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 800849c:	2c04      	cmp	r4, #4
 800849e:	d005      	beq.n	80084ac <GUI_BMP_DrawEx+0x104>
 80084a0:	2c08      	cmp	r4, #8
 80084a2:	d009      	beq.n	80084b8 <GUI_BMP_DrawEx+0x110>
 80084a4:	2c01      	cmp	r4, #1
 80084a6:	d10c      	bne.n	80084c2 <GUI_BMP_DrawEx+0x11a>
 80084a8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80084aa:	e001      	b.n	80084b0 <GUI_BMP_DrawEx+0x108>
 80084ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80084ae:	00ad      	lsls	r5, r5, #2
 80084b0:	351f      	adds	r5, #31
 80084b2:	116d      	asrs	r5, r5, #5
 80084b4:	00ad      	lsls	r5, r5, #2
 80084b6:	e005      	b.n	80084c4 <GUI_BMP_DrawEx+0x11c>
 80084b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80084ba:	3503      	adds	r5, #3
 80084bc:	f025 0503 	bic.w	r5, r5, #3
 80084c0:	e000      	b.n	80084c4 <GUI_BMP_DrawEx+0x11c>
 80084c2:	4605      	mov	r5, r0
 80084c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084ca:	4641      	mov	r1, r8
 80084cc:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 80084d0:	f7ff fb4c 	bl	8007b6c <_GetClipParam>
 80084d4:	ab12      	add	r3, sp, #72	; 0x48
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	ab16      	add	r3, sp, #88	; 0x58
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	ab17      	add	r3, sp, #92	; 0x5c
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	ab18      	add	r3, sp, #96	; 0x60
 80084e2:	9303      	str	r3, [sp, #12]
 80084e4:	9504      	str	r5, [sp, #16]
 80084e6:	a81c      	add	r0, sp, #112	; 0x70
 80084e8:	4631      	mov	r1, r6
 80084ea:	aa13      	add	r2, sp, #76	; 0x4c
 80084ec:	ab14      	add	r3, sp, #80	; 0x50
 80084ee:	f7ff fced 	bl	8007ecc <_GetEarlyOut.isra.0>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f040 818d 	bne.w	8008812 <GUI_BMP_DrawEx+0x46a>
 80084f8:	a81b      	add	r0, sp, #108	; 0x6c
 80084fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80084fc:	aa15      	add	r2, sp, #84	; 0x54
 80084fe:	2300      	movs	r3, #0
 8008500:	f7ff fd3a 	bl	8007f78 <GUI_BMP__ReadData>
 8008504:	2800      	cmp	r0, #0
 8008506:	f040 8182 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 800850a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800850c:	9204      	str	r2, [sp, #16]
 800850e:	2301      	movs	r3, #1
 8008510:	4a51      	ldr	r2, [pc, #324]	; (8008658 <GUI_BMP_DrawEx+0x2b0>)
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	9402      	str	r4, [sp, #8]
 800851a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800851c:	6812      	ldr	r2, [r2, #0]
 800851e:	9205      	str	r2, [sp, #20]
 8008520:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008524:	4441      	add	r1, r8
 8008526:	f002 fbe5 	bl	800acf4 <LCD_DrawBitmap>
 800852a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800852c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800852e:	4413      	add	r3, r2
 8008530:	931c      	str	r3, [sp, #112]	; 0x70
 8008532:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008536:	4413      	add	r3, r2
 8008538:	9316      	str	r3, [sp, #88]	; 0x58
 800853a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800853c:	3b01      	subs	r3, #1
 800853e:	9314      	str	r3, [sp, #80]	; 0x50
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1d9      	bne.n	80084f8 <GUI_BMP_DrawEx+0x150>
 8008544:	e165      	b.n	8008812 <GUI_BMP_DrawEx+0x46a>
 8008546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800854a:	9200      	str	r2, [sp, #0]
 800854c:	435c      	muls	r4, r3
 800854e:	341f      	adds	r4, #31
 8008550:	1164      	asrs	r4, r4, #5
 8008552:	2203      	movs	r2, #3
 8008554:	00a4      	lsls	r4, r4, #2
 8008556:	9202      	str	r2, [sp, #8]
 8008558:	9401      	str	r4, [sp, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	9203      	str	r2, [sp, #12]
 800855e:	4a3f      	ldr	r2, [pc, #252]	; (800865c <GUI_BMP_DrawEx+0x2b4>)
 8008560:	9204      	str	r2, [sp, #16]
 8008562:	a81b      	add	r0, sp, #108	; 0x6c
 8008564:	4639      	mov	r1, r7
 8008566:	4642      	mov	r2, r8
 8008568:	f7ff fda2 	bl	80080b0 <_DrawBitmap_RGB>
 800856c:	4681      	mov	r9, r0
 800856e:	e150      	b.n	8008812 <GUI_BMP_DrawEx+0x46a>
 8008570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008572:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008574:	9200      	str	r2, [sp, #0]
 8008576:	009a      	lsls	r2, r3, #2
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	2204      	movs	r2, #4
 800857c:	9202      	str	r2, [sp, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	9203      	str	r2, [sp, #12]
 8008582:	4a37      	ldr	r2, [pc, #220]	; (8008660 <GUI_BMP_DrawEx+0x2b8>)
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	e7eb      	b.n	8008560 <GUI_BMP_DrawEx+0x1b8>
 8008588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	4b30      	ldr	r3, [pc, #192]	; (8008650 <GUI_BMP_DrawEx+0x2a8>)
 800858e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	a81b      	add	r0, sp, #108	; 0x6c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	930b      	str	r3, [sp, #44]	; 0x2c
 800859c:	f7ff fd02 	bl	8007fa4 <GUI_BMP__ReadPalette>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f040 8134 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 80085a6:	4445      	add	r5, r8
 80085a8:	3d01      	subs	r5, #1
 80085aa:	463c      	mov	r4, r7
 80085ac:	a81b      	add	r0, sp, #108	; 0x6c
 80085ae:	2102      	movs	r1, #2
 80085b0:	aa1e      	add	r2, sp, #120	; 0x78
 80085b2:	2300      	movs	r3, #0
 80085b4:	f7ff fce0 	bl	8007f78 <GUI_BMP__ReadData>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	f040 8128 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 80085be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	921e      	str	r2, [sp, #120]	; 0x78
 80085c4:	f893 b000 	ldrb.w	fp, [r3]
 80085c8:	785e      	ldrb	r6, [r3, #1]
 80085ca:	f1bb 0f00 	cmp.w	fp, #0
 80085ce:	f040 80c6 	bne.w	800875e <GUI_BMP_DrawEx+0x3b6>
 80085d2:	2e01      	cmp	r6, #1
 80085d4:	d019      	beq.n	800860a <GUI_BMP_DrawEx+0x262>
 80085d6:	d302      	bcc.n	80085de <GUI_BMP_DrawEx+0x236>
 80085d8:	2e02      	cmp	r6, #2
 80085da:	d043      	beq.n	8008664 <GUI_BMP_DrawEx+0x2bc>
 80085dc:	e062      	b.n	80086a4 <GUI_BMP_DrawEx+0x2fc>
 80085de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085e0:	443a      	add	r2, r7
 80085e2:	3a01      	subs	r2, #1
 80085e4:	4294      	cmp	r4, r2
 80085e6:	da0a      	bge.n	80085fe <GUI_BMP_DrawEx+0x256>
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <GUI_BMP_DrawEx+0x2b0>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6819      	ldr	r1, [r3, #0]
 80085ee:	4b18      	ldr	r3, [pc, #96]	; (8008650 <GUI_BMP_DrawEx+0x2a8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f4:	4620      	mov	r0, r4
 80085f6:	6019      	str	r1, [r3, #0]
 80085f8:	4629      	mov	r1, r5
 80085fa:	f002 fa4d 	bl	800aa98 <LCD_DrawHLine>
 80085fe:	3d01      	subs	r5, #1
 8008600:	4545      	cmp	r5, r8
 8008602:	f2c0 8104 	blt.w	800880e <GUI_BMP_DrawEx+0x466>
 8008606:	46ba      	mov	sl, r7
 8008608:	e0e5      	b.n	80087d6 <GUI_BMP_DrawEx+0x42e>
 800860a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800860e:	4e10      	ldr	r6, [pc, #64]	; (8008650 <GUI_BMP_DrawEx+0x2a8>)
 8008610:	44ba      	add	sl, r7
 8008612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008616:	4554      	cmp	r4, sl
 8008618:	da0a      	bge.n	8008630 <GUI_BMP_DrawEx+0x288>
 800861a:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <GUI_BMP_DrawEx+0x2b0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	6833      	ldr	r3, [r6, #0]
 8008622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008624:	4620      	mov	r0, r4
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	4629      	mov	r1, r5
 800862a:	4652      	mov	r2, sl
 800862c:	f002 fa34 	bl	800aa98 <LCD_DrawHLine>
 8008630:	4545      	cmp	r5, r8
 8008632:	f340 80fa 	ble.w	800882a <GUI_BMP_DrawEx+0x482>
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <GUI_BMP_DrawEx+0x2b0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	6833      	ldr	r3, [r6, #0]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	4638      	mov	r0, r7
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	4641      	mov	r1, r8
 8008646:	4652      	mov	r2, sl
 8008648:	1e6b      	subs	r3, r5, #1
 800864a:	f002 fa4b 	bl	800aae4 <LCD_FillRect>
 800864e:	e0ec      	b.n	800882a <GUI_BMP_DrawEx+0x482>
 8008650:	20000044 	.word	0x20000044
 8008654:	08008e9d 	.word	0x08008e9d
 8008658:	20003914 	.word	0x20003914
 800865c:	08007c63 	.word	0x08007c63
 8008660:	20000050 	.word	0x20000050
 8008664:	a81b      	add	r0, sp, #108	; 0x6c
 8008666:	4631      	mov	r1, r6
 8008668:	aa1e      	add	r2, sp, #120	; 0x78
 800866a:	465b      	mov	r3, fp
 800866c:	f7ff fc84 	bl	8007f78 <GUI_BMP__ReadData>
 8008670:	2800      	cmp	r0, #0
 8008672:	f040 80cc 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 8008676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	921e      	str	r2, [sp, #120]	; 0x78
 800867c:	f893 a000 	ldrb.w	sl, [r3]
 8008680:	785e      	ldrb	r6, [r3, #1]
 8008682:	4b6e      	ldr	r3, [pc, #440]	; (800883c <GUI_BMP_DrawEx+0x494>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	4b6d      	ldr	r3, [pc, #436]	; (8008840 <GUI_BMP_DrawEx+0x498>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	1bae      	subs	r6, r5, r6
 8008690:	44a2      	add	sl, r4
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	4620      	mov	r0, r4
 8008696:	462b      	mov	r3, r5
 8008698:	4631      	mov	r1, r6
 800869a:	4652      	mov	r2, sl
 800869c:	f002 fa22 	bl	800aae4 <LCD_FillRect>
 80086a0:	4635      	mov	r5, r6
 80086a2:	e098      	b.n	80087d6 <GUI_BMP_DrawEx+0x42e>
 80086a4:	9a07      	ldr	r2, [sp, #28]
 80086a6:	2a02      	cmp	r2, #2
 80086a8:	d12a      	bne.n	8008700 <GUI_BMP_DrawEx+0x358>
 80086aa:	1c73      	adds	r3, r6, #1
 80086ac:	ea4f 0a63 	mov.w	sl, r3, asr #1
 80086b0:	930a      	str	r3, [sp, #40]	; 0x28
 80086b2:	a81b      	add	r0, sp, #108	; 0x6c
 80086b4:	4651      	mov	r1, sl
 80086b6:	aa1e      	add	r2, sp, #120	; 0x78
 80086b8:	465b      	mov	r3, fp
 80086ba:	f7ff fc5d 	bl	8007f78 <GUI_BMP__ReadData>
 80086be:	4684      	mov	ip, r0
 80086c0:	2800      	cmp	r0, #0
 80086c2:	f040 80a4 	bne.w	800880e <GUI_BMP_DrawEx+0x466>
 80086c6:	2304      	movs	r3, #4
 80086c8:	9302      	str	r3, [sp, #8]
 80086ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	f04f 0b01 	mov.w	fp, #1
 80086d2:	4b5a      	ldr	r3, [pc, #360]	; (800883c <GUI_BMP_DrawEx+0x494>)
 80086d4:	f8cd a00c 	str.w	sl, [sp, #12]
 80086d8:	f8cd b000 	str.w	fp, [sp]
 80086dc:	f8cd b004 	str.w	fp, [sp, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	9305      	str	r3, [sp, #20]
 80086e4:	4632      	mov	r2, r6
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	465b      	mov	r3, fp
 80086ec:	f8cd c018 	str.w	ip, [sp, #24]
 80086f0:	f002 fb00 	bl	800acf4 <LCD_DrawBitmap>
 80086f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f6:	eb04 0a06 	add.w	sl, r4, r6
 80086fa:	f012 0f02 	tst.w	r2, #2
 80086fe:	e022      	b.n	8008746 <GUI_BMP_DrawEx+0x39e>
 8008700:	a81b      	add	r0, sp, #108	; 0x6c
 8008702:	4631      	mov	r1, r6
 8008704:	aa1e      	add	r2, sp, #120	; 0x78
 8008706:	465b      	mov	r3, fp
 8008708:	f7ff fc36 	bl	8007f78 <GUI_BMP__ReadData>
 800870c:	4684      	mov	ip, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	d17d      	bne.n	800880e <GUI_BMP_DrawEx+0x466>
 8008712:	2308      	movs	r3, #8
 8008714:	9302      	str	r3, [sp, #8]
 8008716:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	f04f 0b01 	mov.w	fp, #1
 800871e:	4b47      	ldr	r3, [pc, #284]	; (800883c <GUI_BMP_DrawEx+0x494>)
 8008720:	f8cd b000 	str.w	fp, [sp]
 8008724:	f8cd b004 	str.w	fp, [sp, #4]
 8008728:	9603      	str	r6, [sp, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	4620      	mov	r0, r4
 8008730:	4629      	mov	r1, r5
 8008732:	4632      	mov	r2, r6
 8008734:	465b      	mov	r3, fp
 8008736:	f8cd c018 	str.w	ip, [sp, #24]
 800873a:	eb04 0a06 	add.w	sl, r4, r6
 800873e:	f002 fad9 	bl	800acf4 <LCD_DrawBitmap>
 8008742:	f016 0f01 	tst.w	r6, #1
 8008746:	f8dd c018 	ldr.w	ip, [sp, #24]
 800874a:	d044      	beq.n	80087d6 <GUI_BMP_DrawEx+0x42e>
 800874c:	a81b      	add	r0, sp, #108	; 0x6c
 800874e:	4659      	mov	r1, fp
 8008750:	aa1e      	add	r2, sp, #120	; 0x78
 8008752:	4663      	mov	r3, ip
 8008754:	f7ff fc10 	bl	8007f78 <GUI_BMP__ReadData>
 8008758:	2800      	cmp	r0, #0
 800875a:	d03c      	beq.n	80087d6 <GUI_BMP_DrawEx+0x42e>
 800875c:	e057      	b.n	800880e <GUI_BMP_DrawEx+0x466>
 800875e:	9b07      	ldr	r3, [sp, #28]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d128      	bne.n	80087b6 <GUI_BMP_DrawEx+0x40e>
 8008764:	f006 030f 	and.w	r3, r6, #15
 8008768:	0936      	lsrs	r6, r6, #4
 800876a:	42b3      	cmp	r3, r6
 800876c:	b21b      	sxth	r3, r3
 800876e:	d003      	beq.n	8008778 <GUI_BMP_DrawEx+0x3d0>
 8008770:	00b6      	lsls	r6, r6, #2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4682      	mov	sl, r0
 8008776:	e004      	b.n	8008782 <GUI_BMP_DrawEx+0x3da>
 8008778:	4a30      	ldr	r2, [pc, #192]	; (800883c <GUI_BMP_DrawEx+0x494>)
 800877a:	6812      	ldr	r2, [r2, #0]
 800877c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008780:	e01d      	b.n	80087be <GUI_BMP_DrawEx+0x416>
 8008782:	45da      	cmp	sl, fp
 8008784:	eb0a 0004 	add.w	r0, sl, r4
 8008788:	da12      	bge.n	80087b0 <GUI_BMP_DrawEx+0x408>
 800878a:	4a2d      	ldr	r2, [pc, #180]	; (8008840 <GUI_BMP_DrawEx+0x498>)
 800878c:	492b      	ldr	r1, [pc, #172]	; (800883c <GUI_BMP_DrawEx+0x494>)
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	6809      	ldr	r1, [r1, #0]
 8008792:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008794:	f01a 0f01 	tst.w	sl, #1
 8008798:	bf14      	ite	ne
 800879a:	58c9      	ldrne	r1, [r1, r3]
 800879c:	5989      	ldreq	r1, [r1, r6]
 800879e:	6011      	str	r1, [r2, #0]
 80087a0:	4629      	mov	r1, r5
 80087a2:	9306      	str	r3, [sp, #24]
 80087a4:	f10a 0a01 	add.w	sl, sl, #1
 80087a8:	f002 f948 	bl	800aa3c <LCD_DrawPixel>
 80087ac:	9b06      	ldr	r3, [sp, #24]
 80087ae:	e7e8      	b.n	8008782 <GUI_BMP_DrawEx+0x3da>
 80087b0:	eb04 0a0b 	add.w	sl, r4, fp
 80087b4:	e00f      	b.n	80087d6 <GUI_BMP_DrawEx+0x42e>
 80087b6:	4b21      	ldr	r3, [pc, #132]	; (800883c <GUI_BMP_DrawEx+0x494>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <GUI_BMP_DrawEx+0x498>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c4:	eb04 0a0b 	add.w	sl, r4, fp
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f10a 32ff 	add.w	r2, sl, #4294967295
 80087d2:	f002 f961 	bl	800aa98 <LCD_DrawHLine>
 80087d6:	4654      	mov	r4, sl
 80087d8:	e6e8      	b.n	80085ac <GUI_BMP_DrawEx+0x204>
 80087da:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80087de:	2b10      	cmp	r3, #16
 80087e0:	d00a      	beq.n	80087f8 <GUI_BMP_DrawEx+0x450>
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	d113      	bne.n	800880e <GUI_BMP_DrawEx+0x466>
 80087e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087ea:	9200      	str	r2, [sp, #0]
 80087ec:	009a      	lsls	r2, r3, #2
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	2204      	movs	r2, #4
 80087f2:	9202      	str	r2, [sp, #8]
 80087f4:	4a13      	ldr	r2, [pc, #76]	; (8008844 <GUI_BMP_DrawEx+0x49c>)
 80087f6:	e6b1      	b.n	800855c <GUI_BMP_DrawEx+0x1b4>
 80087f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <GUI_BMP_DrawEx+0x49c>)
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	a81b      	add	r0, sp, #108	; 0x6c
 8008802:	4639      	mov	r1, r7
 8008804:	4642      	mov	r2, r8
 8008806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008808:	f7ff fcde 	bl	80081c8 <_DrawBitmap_16bpp>
 800880c:	e6ae      	b.n	800856c <GUI_BMP_DrawEx+0x1c4>
 800880e:	f04f 0901 	mov.w	r9, #1
 8008812:	f000 ffff 	bl	8009814 <WM__GetNextIVR>
 8008816:	9a08      	ldr	r2, [sp, #32]
 8008818:	3201      	adds	r2, #1
 800881a:	9208      	str	r2, [sp, #32]
 800881c:	2800      	cmp	r0, #0
 800881e:	f47f adf6 	bne.w	800840e <GUI_BMP_DrawEx+0x66>
 8008822:	4648      	mov	r0, r9
 8008824:	e006      	b.n	8008834 <GUI_BMP_DrawEx+0x48c>
 8008826:	2001      	movs	r0, #1
 8008828:	e004      	b.n	8008834 <GUI_BMP_DrawEx+0x48c>
 800882a:	6833      	ldr	r3, [r6, #0]
 800882c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800882e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e7ee      	b.n	8008812 <GUI_BMP_DrawEx+0x46a>
 8008834:	b025      	add	sp, #148	; 0x94
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	bf00      	nop
 800883c:	20003914 	.word	0x20003914
 8008840:	20000044 	.word	0x20000044
 8008844:	08008055 	.word	0x08008055

08008848 <_PushFreeBlock>:
 8008848:	4b07      	ldr	r3, [pc, #28]	; (8008868 <_PushFreeBlock+0x20>)
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800884e:	3201      	adds	r2, #1
 8008850:	b510      	push	{r4, lr}
 8008852:	605a      	str	r2, [r3, #4]
 8008854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008856:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800885a:	6061      	str	r1, [r4, #4]
 800885c:	2100      	movs	r1, #0
 800885e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8008862:	6258      	str	r0, [r3, #36]	; 0x24
 8008864:	bd10      	pop	{r4, pc}
 8008866:	bf00      	nop
 8008868:	200037f8 	.word	0x200037f8

0800886c <_RemoveFreeBlock>:
 800886c:	b510      	push	{r4, lr}
 800886e:	6842      	ldr	r2, [r0, #4]
 8008870:	230f      	movs	r3, #15
 8008872:	490d      	ldr	r1, [pc, #52]	; (80088a8 <_RemoveFreeBlock+0x3c>)
 8008874:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 8008878:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800887a:	42a2      	cmp	r2, r4
 800887c:	d203      	bcs.n	8008886 <_RemoveFreeBlock+0x1a>
 800887e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008882:	d2f6      	bcs.n	8008872 <_RemoveFreeBlock+0x6>
 8008884:	bd10      	pop	{r4, pc}
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d80c      	bhi.n	80088a4 <_RemoveFreeBlock+0x38>
 800888a:	680c      	ldr	r4, [r1, #0]
 800888c:	1aa2      	subs	r2, r4, r2
 800888e:	600a      	str	r2, [r1, #0]
 8008890:	6882      	ldr	r2, [r0, #8]
 8008892:	68c0      	ldr	r0, [r0, #12]
 8008894:	b102      	cbz	r2, 8008898 <_RemoveFreeBlock+0x2c>
 8008896:	6050      	str	r0, [r2, #4]
 8008898:	b108      	cbz	r0, 800889e <_RemoveFreeBlock+0x32>
 800889a:	6002      	str	r2, [r0, #0]
 800889c:	bd10      	pop	{r4, pc}
 800889e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80088a2:	645a      	str	r2, [r3, #68]	; 0x44
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	bf00      	nop
 80088a8:	200037f8 	.word	0x200037f8

080088ac <_AddFreeMemory>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	4e26      	ldr	r6, [pc, #152]	; (8008948 <_AddFreeMemory+0x9c>)
 80088b0:	68f3      	ldr	r3, [r6, #12]
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80088b6:	4605      	mov	r5, r0
 80088b8:	4413      	add	r3, r2
 80088ba:	1808      	adds	r0, r1, r0
 80088bc:	4298      	cmp	r0, r3
 80088be:	460c      	mov	r4, r1
 80088c0:	d805      	bhi.n	80088ce <_AddFreeMemory+0x22>
 80088c2:	594b      	ldr	r3, [r1, r5]
 80088c4:	b91b      	cbnz	r3, 80088ce <_AddFreeMemory+0x22>
 80088c6:	6843      	ldr	r3, [r0, #4]
 80088c8:	441d      	add	r5, r3
 80088ca:	f7ff ffcf 	bl	800886c <_RemoveFreeBlock>
 80088ce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80088d0:	429c      	cmp	r4, r3
 80088d2:	d90a      	bls.n	80088ea <_AddFreeMemory+0x3e>
 80088d4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80088d8:	1be7      	subs	r7, r4, r7
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	b92b      	cbnz	r3, 80088ea <_AddFreeMemory+0x3e>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4638      	mov	r0, r7
 80088e2:	441d      	add	r5, r3
 80088e4:	f7ff ffc2 	bl	800886c <_RemoveFreeBlock>
 80088e8:	463c      	mov	r4, r7
 80088ea:	230f      	movs	r3, #15
 80088ec:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80088f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80088f2:	4295      	cmp	r5, r2
 80088f4:	d203      	bcs.n	80088fe <_AddFreeMemory+0x52>
 80088f6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80088fa:	d2f7      	bcs.n	80088ec <_AddFreeMemory+0x40>
 80088fc:	e022      	b.n	8008944 <_AddFreeMemory+0x98>
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d820      	bhi.n	8008944 <_AddFreeMemory+0x98>
 8008902:	3308      	adds	r3, #8
 8008904:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008908:	1961      	adds	r1, r4, r5
 800890a:	6852      	ldr	r2, [r2, #4]
 800890c:	60a2      	str	r2, [r4, #8]
 800890e:	2000      	movs	r0, #0
 8008910:	e884 0021 	stmia.w	r4, {r0, r5}
 8008914:	6124      	str	r4, [r4, #16]
 8008916:	f841 5c04 	str.w	r5, [r1, #-4]
 800891a:	f104 0108 	add.w	r1, r4, #8
 800891e:	b102      	cbz	r2, 8008922 <_AddFreeMemory+0x76>
 8008920:	6051      	str	r1, [r2, #4]
 8008922:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8008926:	60e0      	str	r0, [r4, #12]
 8008928:	6059      	str	r1, [r3, #4]
 800892a:	6833      	ldr	r3, [r6, #0]
 800892c:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8008930:	4a05      	ldr	r2, [pc, #20]	; (8008948 <_AddFreeMemory+0x9c>)
 8008932:	442b      	add	r3, r5
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	b929      	cbnz	r1, 8008944 <_AddFreeMemory+0x98>
 8008938:	68d1      	ldr	r1, [r2, #12]
 800893a:	1acb      	subs	r3, r1, r3
 800893c:	6891      	ldr	r1, [r2, #8]
 800893e:	4299      	cmp	r1, r3
 8008940:	bf38      	it	cc
 8008942:	6093      	strcc	r3, [r2, #8]
 8008944:	4628      	mov	r0, r5
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008948:	200037f8 	.word	0x200037f8

0800894c <_RemoveHoles>:
 800894c:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <_RemoveHoles+0x98>)
 800894e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008956:	3a01      	subs	r2, #1
 8008958:	4682      	mov	sl, r0
 800895a:	eb02 0904 	add.w	r9, r2, r4
 800895e:	469b      	mov	fp, r3
 8008960:	e894 0028 	ldmia.w	r4, {r3, r5}
 8008964:	2b00      	cmp	r3, #0
 8008966:	d133      	bne.n	80089d0 <_RemoveHoles+0x84>
 8008968:	eb04 0805 	add.w	r8, r4, r5
 800896c:	45c8      	cmp	r8, r9
 800896e:	d22f      	bcs.n	80089d0 <_RemoveHoles+0x84>
 8008970:	f854 c005 	ldr.w	ip, [r4, r5]
 8008974:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8008978:	f1bc 0f00 	cmp.w	ip, #0
 800897c:	d028      	beq.n	80089d0 <_RemoveHoles+0x84>
 800897e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8008982:	4f18      	ldr	r7, [pc, #96]	; (80089e4 <_RemoveHoles+0x98>)
 8008984:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d121      	bne.n	80089d0 <_RemoveHoles+0x84>
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	4620      	mov	r0, r4
 8008990:	e88d 1008 	stmia.w	sp, {r3, ip}
 8008994:	f7ff ff6a 	bl	800886c <_RemoveFreeBlock>
 8008998:	f8d8 1000 	ldr.w	r1, [r8]
 800899c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800899e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80089a2:	4620      	mov	r0, r4
 80089a4:	6054      	str	r4, [r2, #4]
 80089a6:	4641      	mov	r1, r8
 80089a8:	4632      	mov	r2, r6
 80089aa:	f003 f956 	bl	800bc5a <memmove>
 80089ae:	e89d 1008 	ldmia.w	sp, {r3, ip}
 80089b2:	459c      	cmp	ip, r3
 80089b4:	d102      	bne.n	80089bc <_RemoveHoles+0x70>
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	1b5b      	subs	r3, r3, r5
 80089ba:	637b      	str	r3, [r7, #52]	; 0x34
 80089bc:	4628      	mov	r0, r5
 80089be:	19a1      	adds	r1, r4, r6
 80089c0:	f7ff ff74 	bl	80088ac <_AddFreeMemory>
 80089c4:	f1ba 0f00 	cmp.w	sl, #0
 80089c8:	d001      	beq.n	80089ce <_RemoveHoles+0x82>
 80089ca:	4582      	cmp	sl, r0
 80089cc:	d905      	bls.n	80089da <_RemoveHoles+0x8e>
 80089ce:	4635      	mov	r5, r6
 80089d0:	442c      	add	r4, r5
 80089d2:	454c      	cmp	r4, r9
 80089d4:	d3c4      	bcc.n	8008960 <_RemoveHoles+0x14>
 80089d6:	2001      	movs	r0, #1
 80089d8:	e000      	b.n	80089dc <_RemoveHoles+0x90>
 80089da:	2000      	movs	r0, #0
 80089dc:	b003      	add	sp, #12
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	bf00      	nop
 80089e4:	200037f8 	.word	0x200037f8

080089e8 <GUI_ALLOC_FreeFixedBlock>:
 80089e8:	b128      	cbz	r0, 80089f6 <GUI_ALLOC_FreeFixedBlock+0xe>
 80089ea:	4a03      	ldr	r2, [pc, #12]	; (80089f8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80089ec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80089ee:	6003      	str	r3, [r0, #0]
 80089f0:	b103      	cbz	r3, 80089f4 <GUI_ALLOC_FreeFixedBlock+0xc>
 80089f2:	6058      	str	r0, [r3, #4]
 80089f4:	63d0      	str	r0, [r2, #60]	; 0x3c
 80089f6:	4770      	bx	lr
 80089f8:	200037f8 	.word	0x200037f8

080089fc <GUI_ALLOC_h2p>:
 80089fc:	4b03      	ldr	r3, [pc, #12]	; (8008a0c <GUI_ALLOC_h2p+0x10>)
 80089fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a00:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008a04:	6840      	ldr	r0, [r0, #4]
 8008a06:	3008      	adds	r0, #8
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	200037f8 	.word	0x200037f8

08008a10 <GUI_ALLOC_LockH>:
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <GUI_ALLOC_LockH+0x18>)
 8008a12:	69d9      	ldr	r1, [r3, #28]
 8008a14:	3101      	adds	r1, #1
 8008a16:	61d9      	str	r1, [r3, #28]
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 8008a1e:	3101      	adds	r1, #1
 8008a20:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8008a24:	f7ff bfea 	b.w	80089fc <GUI_ALLOC_h2p>
 8008a28:	200037f8 	.word	0x200037f8

08008a2c <GUI_ALLOC_UnlockH>:
 8008a2c:	b530      	push	{r4, r5, lr}
 8008a2e:	6802      	ldr	r2, [r0, #0]
 8008a30:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <GUI_ALLOC_UnlockH+0x2c>)
 8008a32:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8008a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a38:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 8008a3c:	2c01      	cmp	r4, #1
 8008a3e:	d903      	bls.n	8008a48 <GUI_ALLOC_UnlockH+0x1c>
 8008a40:	69dd      	ldr	r5, [r3, #28]
 8008a42:	b10d      	cbz	r5, 8008a48 <GUI_ALLOC_UnlockH+0x1c>
 8008a44:	3d01      	subs	r5, #1
 8008a46:	61dd      	str	r5, [r3, #28]
 8008a48:	3c01      	subs	r4, #1
 8008a4a:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	bd30      	pop	{r4, r5, pc}
 8008a56:	bf00      	nop
 8008a58:	200037f8 	.word	0x200037f8

08008a5c <GUI_ALLOC_AssignMemory>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <GUI_ALLOC_AssignMemory+0xc>)
 8008a5e:	f021 0103 	bic.w	r1, r1, #3
 8008a62:	6018      	str	r0, [r3, #0]
 8008a64:	6059      	str	r1, [r3, #4]
 8008a66:	4770      	bx	lr
 8008a68:	2000299c 	.word	0x2000299c

08008a6c <GUI_ALLOC_Free>:
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	4604      	mov	r4, r0
 8008a70:	b160      	cbz	r0, 8008a8c <GUI_ALLOC_Free+0x20>
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <GUI_ALLOC_Free+0x24>)
 8008a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a76:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008a7a:	6859      	ldr	r1, [r3, #4]
 8008a7c:	6848      	ldr	r0, [r1, #4]
 8008a7e:	f7ff ff15 	bl	80088ac <_AddFreeMemory>
 8008a82:	4620      	mov	r0, r4
 8008a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a88:	f7ff bede 	b.w	8008848 <_PushFreeBlock>
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	bf00      	nop
 8008a90:	200037f8 	.word	0x200037f8

08008a94 <_EnlargeBlocks>:
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	4c23      	ldr	r4, [pc, #140]	; (8008b28 <_EnlargeBlocks+0x94>)
 8008a9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a9c:	b93b      	cbnz	r3, 8008aae <_EnlargeBlocks+0x1a>
 8008a9e:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <_EnlargeBlocks+0x98>)
 8008aa0:	689d      	ldr	r5, [r3, #8]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	3508      	adds	r5, #8
 8008aa6:	fbb3 f5f5 	udiv	r5, r3, r5
 8008aaa:	3502      	adds	r5, #2
 8008aac:	e003      	b.n	8008ab6 <_EnlargeBlocks+0x22>
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	1d1d      	adds	r5, r3, #4
 8008ab2:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 8008ab6:	00e8      	lsls	r0, r5, #3
 8008ab8:	f000 f8de 	bl	8008c78 <_Alloc>
 8008abc:	4680      	mov	r8, r0
 8008abe:	b368      	cbz	r0, 8008b1c <_EnlargeBlocks+0x88>
 8008ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac2:	6922      	ldr	r2, [r4, #16]
 8008ac4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008ac6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8008aca:	00d2      	lsls	r2, r2, #3
 8008acc:	685e      	ldr	r6, [r3, #4]
 8008ace:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <_EnlargeBlocks+0x9c>)
 8008ad0:	3608      	adds	r6, #8
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	4798      	blx	r3
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	6366      	str	r6, [r4, #52]	; 0x34
 8008adc:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 8008ae0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8008ae4:	3104      	adds	r1, #4
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	1e68      	subs	r0, r5, #1
 8008aea:	4283      	cmp	r3, r0
 8008aec:	f101 0108 	add.w	r1, r1, #8
 8008af0:	d203      	bcs.n	8008afa <_EnlargeBlocks+0x66>
 8008af2:	3301      	adds	r3, #1
 8008af4:	f841 3c08 	str.w	r3, [r1, #-8]
 8008af8:	e7f6      	b.n	8008ae8 <_EnlargeBlocks+0x54>
 8008afa:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8008afe:	2600      	movs	r6, #0
 8008b00:	605e      	str	r6, [r3, #4]
 8008b02:	6863      	ldr	r3, [r4, #4]
 8008b04:	6262      	str	r2, [r4, #36]	; 0x24
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	442b      	add	r3, r5
 8008b0a:	6063      	str	r3, [r4, #4]
 8008b0c:	6125      	str	r5, [r4, #16]
 8008b0e:	4638      	mov	r0, r7
 8008b10:	b13f      	cbz	r7, 8008b22 <_EnlargeBlocks+0x8e>
 8008b12:	f7ff ffab 	bl	8008a6c <GUI_ALLOC_Free>
 8008b16:	4630      	mov	r0, r6
 8008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b26:	bf00      	nop
 8008b28:	200037f8 	.word	0x200037f8
 8008b2c:	2000299c 	.word	0x2000299c
 8008b30:	20000040 	.word	0x20000040

08008b34 <_InitOnce>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4916      	ldr	r1, [pc, #88]	; (8008b90 <_InitOnce+0x5c>)
 8008b38:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8008b3c:	bb3b      	cbnz	r3, 8008b8e <_InitOnce+0x5a>
 8008b3e:	4a15      	ldr	r2, [pc, #84]	; (8008b94 <_InitOnce+0x60>)
 8008b40:	2301      	movs	r3, #1
 8008b42:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 8008b46:	6893      	ldr	r3, [r2, #8]
 8008b48:	b913      	cbnz	r3, 8008b50 <_InitOnce+0x1c>
 8008b4a:	6853      	ldr	r3, [r2, #4]
 8008b4c:	089b      	lsrs	r3, r3, #2
 8008b4e:	6093      	str	r3, [r2, #8]
 8008b50:	235a      	movs	r3, #90	; 0x5a
 8008b52:	620b      	str	r3, [r1, #32]
 8008b54:	2300      	movs	r3, #0
 8008b56:	2510      	movs	r5, #16
 8008b58:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 8008b5c:	409d      	lsls	r5, r3
 8008b5e:	3301      	adds	r3, #1
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	4c0b      	ldr	r4, [pc, #44]	; (8008b90 <_InitOnce+0x5c>)
 8008b64:	6405      	str	r5, [r0, #64]	; 0x40
 8008b66:	d1f6      	bne.n	8008b56 <_InitOnce+0x22>
 8008b68:	6850      	ldr	r0, [r2, #4]
 8008b6a:	6811      	ldr	r1, [r2, #0]
 8008b6c:	63a1      	str	r1, [r4, #56]	; 0x38
 8008b6e:	2302      	movs	r3, #2
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	f1a0 0314 	sub.w	r3, r0, #20
 8008b76:	440b      	add	r3, r1
 8008b78:	2501      	movs	r5, #1
 8008b7a:	6363      	str	r3, [r4, #52]	; 0x34
 8008b7c:	60e0      	str	r0, [r4, #12]
 8008b7e:	605d      	str	r5, [r3, #4]
 8008b80:	6265      	str	r5, [r4, #36]	; 0x24
 8008b82:	6065      	str	r5, [r4, #4]
 8008b84:	f7ff fe92 	bl	80088ac <_AddFreeMemory>
 8008b88:	f7ff ff84 	bl	8008a94 <_EnlargeBlocks>
 8008b8c:	6325      	str	r5, [r4, #48]	; 0x30
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	200037f8 	.word	0x200037f8
 8008b94:	2000299c 	.word	0x2000299c

08008b98 <GUI_ALLOC_GetFixedBlock>:
 8008b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	4e26      	ldr	r6, [pc, #152]	; (8008c38 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8008ba0:	3503      	adds	r5, #3
 8008ba2:	f7ff ffc7 	bl	8008b34 <_InitOnce>
 8008ba6:	f025 0503 	bic.w	r5, r5, #3
 8008baa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8008bac:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8008bae:	3504      	adds	r5, #4
 8008bb0:	429d      	cmp	r5, r3
 8008bb2:	bf38      	it	cc
 8008bb4:	461d      	movcc	r5, r3
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	b12c      	cbz	r4, 8008bc6 <GUI_ALLOC_GetFixedBlock+0x2e>
 8008bba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008bbe:	42ab      	cmp	r3, r5
 8008bc0:	d02c      	beq.n	8008c1c <GUI_ALLOC_GetFixedBlock+0x84>
 8008bc2:	6824      	ldr	r4, [r4, #0]
 8008bc4:	e7f8      	b.n	8008bb8 <GUI_ALLOC_GetFixedBlock+0x20>
 8008bc6:	68f3      	ldr	r3, [r6, #12]
 8008bc8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8008bca:	eb02 0803 	add.w	r8, r2, r3
 8008bce:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8008bd2:	ebc7 0708 	rsb	r7, r7, r8
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	b133      	cbz	r3, 8008be8 <GUI_ALLOC_GetFixedBlock+0x50>
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7ff feb6 	bl	800894c <_RemoveHoles>
 8008be0:	f858 7c04 	ldr.w	r7, [r8, #-4]
 8008be4:	ebc7 0708 	rsb	r7, r7, r8
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	bb13      	cbnz	r3, 8008c32 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	42ab      	cmp	r3, r5
 8008bf0:	db1f      	blt.n	8008c32 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	1d1c      	adds	r4, r3, #4
 8008bf6:	f7ff fe39 	bl	800886c <_RemoveFreeBlock>
 8008bfa:	68f3      	ldr	r3, [r6, #12]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	1b5b      	subs	r3, r3, r5
 8008c00:	60f3      	str	r3, [r6, #12]
 8008c02:	6973      	ldr	r3, [r6, #20]
 8008c04:	1b64      	subs	r4, r4, r5
 8008c06:	442b      	add	r3, r5
 8008c08:	1b40      	subs	r0, r0, r5
 8008c0a:	443c      	add	r4, r7
 8008c0c:	6173      	str	r3, [r6, #20]
 8008c0e:	d002      	beq.n	8008c16 <GUI_ALLOC_GetFixedBlock+0x7e>
 8008c10:	4639      	mov	r1, r7
 8008c12:	f7ff fe4b 	bl	80088ac <_AddFreeMemory>
 8008c16:	f844 5c04 	str.w	r5, [r4, #-4]
 8008c1a:	e00a      	b.n	8008c32 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	b10b      	cbz	r3, 8008c24 <GUI_ALLOC_GetFixedBlock+0x8c>
 8008c20:	6861      	ldr	r1, [r4, #4]
 8008c22:	6059      	str	r1, [r3, #4]
 8008c24:	6861      	ldr	r1, [r4, #4]
 8008c26:	b101      	cbz	r1, 8008c2a <GUI_ALLOC_GetFixedBlock+0x92>
 8008c28:	600b      	str	r3, [r1, #0]
 8008c2a:	42a2      	cmp	r2, r4
 8008c2c:	d101      	bne.n	8008c32 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008c32:	4620      	mov	r0, r4
 8008c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c38:	200037f8 	.word	0x200037f8

08008c3c <GUI_ALLOC_GetMaxSize>:
 8008c3c:	b508      	push	{r3, lr}
 8008c3e:	f7ff ff79 	bl	8008b34 <_InitOnce>
 8008c42:	2200      	movs	r2, #0
 8008c44:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <GUI_ALLOC_GetMaxSize+0x38>)
 8008c46:	4413      	add	r3, r2
 8008c48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008c4c:	b113      	cbz	r3, 8008c54 <GUI_ALLOC_GetMaxSize+0x18>
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2000      	movs	r0, #0
 8008c52:	e00b      	b.n	8008c6c <GUI_ALLOC_GetMaxSize+0x30>
 8008c54:	3a08      	subs	r2, #8
 8008c56:	f112 0f80 	cmn.w	r2, #128	; 0x80
 8008c5a:	d1f3      	bne.n	8008c44 <GUI_ALLOC_GetMaxSize+0x8>
 8008c5c:	e7f8      	b.n	8008c50 <GUI_ALLOC_GetMaxSize+0x14>
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	4290      	cmp	r0, r2
 8008c64:	bf38      	it	cc
 8008c66:	4610      	movcc	r0, r2
 8008c68:	b113      	cbz	r3, 8008c70 <GUI_ALLOC_GetMaxSize+0x34>
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1f6      	bne.n	8008c5e <GUI_ALLOC_GetMaxSize+0x22>
 8008c70:	380c      	subs	r0, #12
 8008c72:	bd08      	pop	{r3, pc}
 8008c74:	200037f8 	.word	0x200037f8

08008c78 <_Alloc>:
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	4d38      	ldr	r5, [pc, #224]	; (8008d60 <_Alloc+0xe8>)
 8008c7e:	4604      	mov	r4, r0
 8008c80:	f7ff ff58 	bl	8008b34 <_InitOnce>
 8008c84:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	42bc      	cmp	r4, r7
 8008c8a:	bf24      	itt	cs
 8008c8c:	1ce7      	addcs	r7, r4, #3
 8008c8e:	f027 0703 	biccs.w	r7, r7, #3
 8008c92:	370c      	adds	r7, #12
 8008c94:	429f      	cmp	r7, r3
 8008c96:	4c32      	ldr	r4, [pc, #200]	; (8008d60 <_Alloc+0xe8>)
 8008c98:	d83e      	bhi.n	8008d18 <_Alloc+0xa0>
 8008c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c9c:	6862      	ldr	r2, [r4, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d90f      	bls.n	8008cc2 <_Alloc+0x4a>
 8008ca2:	686b      	ldr	r3, [r5, #4]
 8008ca4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	606b      	str	r3, [r5, #4]
 8008caa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008cac:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8008cb0:	eb03 0209 	add.w	r2, r3, r9
 8008cb4:	6852      	ldr	r2, [r2, #4]
 8008cb6:	626a      	str	r2, [r5, #36]	; 0x24
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 8008cbe:	b956      	cbnz	r6, 8008cd6 <_Alloc+0x5e>
 8008cc0:	e02a      	b.n	8008d18 <_Alloc+0xa0>
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8008cc6:	f7ff fee5 	bl	8008a94 <_EnlargeBlocks>
 8008cca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ccc:	3301      	adds	r3, #1
 8008cce:	6323      	str	r3, [r4, #48]	; 0x30
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d0e6      	beq.n	8008ca2 <_Alloc+0x2a>
 8008cd4:	e020      	b.n	8008d18 <_Alloc+0xa0>
 8008cd6:	230f      	movs	r3, #15
 8008cd8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008cdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008cde:	4297      	cmp	r7, r2
 8008ce0:	d20c      	bcs.n	8008cfc <_Alloc+0x84>
 8008ce2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008ce6:	d2f7      	bcs.n	8008cd8 <_Alloc+0x60>
 8008ce8:	e008      	b.n	8008cfc <_Alloc+0x84>
 8008cea:	6894      	ldr	r4, [r2, #8]
 8008cec:	b12c      	cbz	r4, 8008cfa <_Alloc+0x82>
 8008cee:	6862      	ldr	r2, [r4, #4]
 8008cf0:	4297      	cmp	r7, r2
 8008cf2:	d914      	bls.n	8008d1e <_Alloc+0xa6>
 8008cf4:	68a2      	ldr	r2, [r4, #8]
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	d1f7      	bne.n	8008cea <_Alloc+0x72>
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	2b0f      	cmp	r3, #15
 8008cfe:	d803      	bhi.n	8008d08 <_Alloc+0x90>
 8008d00:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008d04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008d06:	e7f6      	b.n	8008cf6 <_Alloc+0x7e>
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff fe1f 	bl	800894c <_RemoveHoles>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d0e1      	beq.n	8008cd6 <_Alloc+0x5e>
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff fd98 	bl	8008848 <_PushFreeBlock>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8008d22:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8008d24:	ebc7 0208 	rsb	r2, r7, r8
 8008d28:	330c      	adds	r3, #12
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	bf38      	it	cc
 8008d30:	4647      	movcc	r7, r8
 8008d32:	f7ff fd9b 	bl	800886c <_RemoveFreeBlock>
 8008d36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008d38:	444b      	add	r3, r9
 8008d3a:	19e1      	adds	r1, r4, r7
 8008d3c:	605c      	str	r4, [r3, #4]
 8008d3e:	45b8      	cmp	r8, r7
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	e884 00c0 	stmia.w	r4, {r6, r7}
 8008d48:	60a3      	str	r3, [r4, #8]
 8008d4a:	6124      	str	r4, [r4, #16]
 8008d4c:	f841 7c04 	str.w	r7, [r1, #-4]
 8008d50:	dd03      	ble.n	8008d5a <_Alloc+0xe2>
 8008d52:	ebc7 0008 	rsb	r0, r7, r8
 8008d56:	f7ff fda9 	bl	80088ac <_AddFreeMemory>
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d60:	200037f8 	.word	0x200037f8

08008d64 <GUI_ALLOC_AllocNoInit>:
 8008d64:	b108      	cbz	r0, 8008d6a <GUI_ALLOC_AllocNoInit+0x6>
 8008d66:	f7ff bf87 	b.w	8008c78 <_Alloc>
 8008d6a:	4770      	bx	lr

08008d6c <GUI_ALLOC_AllocZero>:
 8008d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d6e:	4605      	mov	r5, r0
 8008d70:	f7ff fff8 	bl	8008d64 <GUI_ALLOC_AllocNoInit>
 8008d74:	4606      	mov	r6, r0
 8008d76:	b160      	cbz	r0, 8008d92 <GUI_ALLOC_AllocZero+0x26>
 8008d78:	f7ff fe4a 	bl	8008a10 <GUI_ALLOC_LockH>
 8008d7c:	ac02      	add	r4, sp, #8
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <GUI_ALLOC_AllocZero+0x2c>)
 8008d80:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2100      	movs	r1, #0
 8008d88:	462a      	mov	r2, r5
 8008d8a:	4798      	blx	r3
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7ff fe4d 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8008d92:	4630      	mov	r0, r6
 8008d94:	b002      	add	sp, #8
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	2000003c 	.word	0x2000003c

08008d9c <LCD_Index2Color_M565>:
 8008d9c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <LCD_Index2Color_M565+0x20>)
 8008da2:	f000 021f 	and.w	r2, r0, #31
 8008da6:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8008daa:	5c9a      	ldrb	r2, [r3, r2]
 8008dac:	5c5b      	ldrb	r3, [r3, r1]
 8008dae:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8008db2:	4a03      	ldr	r2, [pc, #12]	; (8008dc0 <LCD_Index2Color_M565+0x24>)
 8008db4:	5c10      	ldrb	r0, [r2, r0]
 8008db6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8008dba:	4770      	bx	lr
 8008dbc:	0800cbb4 	.word	0x0800cbb4
 8008dc0:	0800cbd4 	.word	0x0800cbd4

08008dc4 <_Color2Index_M565>:
 8008dc4:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <_Color2Index_M565+0x20>)
 8008dca:	b2c2      	uxtb	r2, r0
 8008dcc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008dd0:	5c9a      	ldrb	r2, [r3, r2]
 8008dd2:	5c5b      	ldrb	r3, [r3, r1]
 8008dd4:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8008dd8:	4a03      	ldr	r2, [pc, #12]	; (8008de8 <_Color2Index_M565+0x24>)
 8008dda:	5c10      	ldrb	r0, [r2, r0]
 8008ddc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	0800cab4 	.word	0x0800cab4
 8008de8:	0800cc14 	.word	0x0800cc14

08008dec <_GetIndexMask_M565>:
 8008dec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008df0:	4770      	bx	lr
	...

08008df4 <_Color2IndexBulk>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	4f0f      	ldr	r7, [pc, #60]	; (8008e34 <_Color2IndexBulk+0x40>)
 8008df8:	683f      	ldr	r7, [r7, #0]
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	4614      	mov	r4, r2
 8008e00:	469c      	mov	ip, r3
 8008e02:	b10f      	cbz	r7, 8008e08 <_Color2IndexBulk+0x14>
 8008e04:	47b8      	blx	r7
 8008e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e08:	f856 2b04 	ldr.w	r2, [r6], #4
 8008e0c:	490a      	ldr	r1, [pc, #40]	; (8008e38 <_Color2IndexBulk+0x44>)
 8008e0e:	b2d3      	uxtb	r3, r2
 8008e10:	3c01      	subs	r4, #1
 8008e12:	5cc8      	ldrb	r0, [r1, r3]
 8008e14:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8008e18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008e1c:	5ccb      	ldrb	r3, [r1, r3]
 8008e1e:	4907      	ldr	r1, [pc, #28]	; (8008e3c <_Color2IndexBulk+0x48>)
 8008e20:	5c8a      	ldrb	r2, [r1, r2]
 8008e22:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 8008e26:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008e2a:	802b      	strh	r3, [r5, #0]
 8008e2c:	4465      	add	r5, ip
 8008e2e:	d1eb      	bne.n	8008e08 <_Color2IndexBulk+0x14>
 8008e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200029ac 	.word	0x200029ac
 8008e38:	0800cab4 	.word	0x0800cab4
 8008e3c:	0800cc14 	.word	0x0800cc14

08008e40 <_Index2ColorBulk>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	4e13      	ldr	r6, [pc, #76]	; (8008e90 <_Index2ColorBulk+0x50>)
 8008e44:	6836      	ldr	r6, [r6, #0]
 8008e46:	4684      	mov	ip, r0
 8008e48:	4614      	mov	r4, r2
 8008e4a:	461d      	mov	r5, r3
 8008e4c:	b10e      	cbz	r6, 8008e52 <_Index2ColorBulk+0x12>
 8008e4e:	47b0      	blx	r6
 8008e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e52:	1e50      	subs	r0, r2, #1
 8008e54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008e58:	3a01      	subs	r2, #1
 8008e5a:	fb03 c000 	mla	r0, r3, r0, ip
 8008e5e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e62:	8802      	ldrh	r2, [r0, #0]
 8008e64:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <_Index2ColorBulk+0x54>)
 8008e66:	f002 061f 	and.w	r6, r2, #31
 8008e6a:	0ad7      	lsrs	r7, r2, #11
 8008e6c:	5d9e      	ldrb	r6, [r3, r6]
 8008e6e:	5ddb      	ldrb	r3, [r3, r7]
 8008e70:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8008e74:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8008e78:	4e07      	ldr	r6, [pc, #28]	; (8008e98 <_Index2ColorBulk+0x58>)
 8008e7a:	5cb2      	ldrb	r2, [r6, r2]
 8008e7c:	3c01      	subs	r4, #1
 8008e7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008e82:	f841 3904 	str.w	r3, [r1], #-4
 8008e86:	ebc5 0000 	rsb	r0, r5, r0
 8008e8a:	d1ea      	bne.n	8008e62 <_Index2ColorBulk+0x22>
 8008e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200029a8 	.word	0x200029a8
 8008e94:	0800cbb4 	.word	0x0800cbb4
 8008e98:	0800cbd4 	.word	0x0800cbd4

08008e9c <LCD_Index2Color_M555>:
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <LCD_Index2Color_M555+0x20>)
 8008e9e:	f000 021f 	and.w	r2, r0, #31
 8008ea2:	5c99      	ldrb	r1, [r3, r2]
 8008ea4:	f3c0 2284 	ubfx	r2, r0, #10, #5
 8008ea8:	f3c0 1044 	ubfx	r0, r0, #5, #5
 8008eac:	5c9a      	ldrb	r2, [r3, r2]
 8008eae:	5c18      	ldrb	r0, [r3, r0]
 8008eb0:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8008eb4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	0800cbb4 	.word	0x0800cbb4

08008ec0 <WM_GetDesktopWindow>:
 8008ec0:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <WM_GetDesktopWindow+0x10>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	7c5a      	ldrb	r2, [r3, #17]
 8008ec6:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <WM_GetDesktopWindow+0x14>)
 8008ec8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20000044 	.word	0x20000044
 8008ed4:	200038c0 	.word	0x200038c0

08008ed8 <WM_GetFirstChild>:
 8008ed8:	b508      	push	{r3, lr}
 8008eda:	4603      	mov	r3, r0
 8008edc:	b110      	cbz	r0, 8008ee4 <WM_GetFirstChild+0xc>
 8008ede:	f7ff fd8d 	bl	80089fc <GUI_ALLOC_h2p>
 8008ee2:	69c3      	ldr	r3, [r0, #28]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	bd08      	pop	{r3, pc}

08008ee8 <WM_GetParent>:
 8008ee8:	b508      	push	{r3, lr}
 8008eea:	4603      	mov	r3, r0
 8008eec:	b110      	cbz	r0, 8008ef4 <WM_GetParent+0xc>
 8008eee:	f7ff fd85 	bl	80089fc <GUI_ALLOC_h2p>
 8008ef2:	6983      	ldr	r3, [r0, #24]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	bd08      	pop	{r3, pc}

08008ef8 <WM_BringToBottom>:
 8008ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008efc:	4604      	mov	r4, r0
 8008efe:	b087      	sub	sp, #28
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d039      	beq.n	8008f78 <WM_BringToBottom+0x80>
 8008f04:	f7ff fd84 	bl	8008a10 <GUI_ALLOC_LockH>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	9001      	str	r0, [sp, #4]
 8008f0c:	c803      	ldmia	r0, {r0, r1}
 8008f0e:	ad04      	add	r5, sp, #16
 8008f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f14:	a801      	add	r0, sp, #4
 8008f16:	6a1e      	ldr	r6, [r3, #32]
 8008f18:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8008f1c:	f7ff fd86 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8008f20:	4620      	mov	r0, r4
 8008f22:	f002 f95f 	bl	800b1e4 <WM__GetPrevSibling>
 8008f26:	4607      	mov	r7, r0
 8008f28:	b330      	cbz	r0, 8008f78 <WM_BringToBottom+0x80>
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7ff ffdc 	bl	8008ee8 <WM_GetParent>
 8008f30:	f019 0f02 	tst.w	r9, #2
 8008f34:	4680      	mov	r8, r0
 8008f36:	d004      	beq.n	8008f42 <WM_BringToBottom+0x4a>
 8008f38:	4628      	mov	r0, r5
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	f000 fb52 	bl	80095e6 <WM__InvalidateRectEx>
 8008f42:	4620      	mov	r0, r4
 8008f44:	f7ff fd64 	bl	8008a10 <GUI_ALLOC_LockH>
 8008f48:	9001      	str	r0, [sp, #4]
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff fd60 	bl	8008a10 <GUI_ALLOC_LockH>
 8008f50:	9003      	str	r0, [sp, #12]
 8008f52:	4638      	mov	r0, r7
 8008f54:	f7ff fd5c 	bl	8008a10 <GUI_ALLOC_LockH>
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	69d9      	ldr	r1, [r3, #28]
 8008f5e:	6206      	str	r6, [r0, #32]
 8008f60:	9002      	str	r0, [sp, #8]
 8008f62:	6211      	str	r1, [r2, #32]
 8008f64:	a801      	add	r0, sp, #4
 8008f66:	61dc      	str	r4, [r3, #28]
 8008f68:	f7ff fd60 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8008f6c:	a803      	add	r0, sp, #12
 8008f6e:	f7ff fd5d 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8008f72:	a802      	add	r0, sp, #8
 8008f74:	f7ff fd5a 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8008f78:	b007      	add	sp, #28
 8008f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008f7e <WM_SendToParent>:
 8008f7e:	b538      	push	{r3, r4, r5, lr}
 8008f80:	4605      	mov	r5, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	b141      	cbz	r1, 8008f98 <WM_SendToParent+0x1a>
 8008f86:	f7ff ffaf 	bl	8008ee8 <WM_GetParent>
 8008f8a:	b128      	cbz	r0, 8008f98 <WM_SendToParent+0x1a>
 8008f8c:	60a5      	str	r5, [r4, #8]
 8008f8e:	4621      	mov	r1, r4
 8008f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f94:	f002 b93a 	b.w	800b20c <WM__SendMessage>
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
	...

08008f9c <_OnExit>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4b19      	ldr	r3, [pc, #100]	; (8009004 <_OnExit+0x68>)
 8008fa0:	4d19      	ldr	r5, [pc, #100]	; (8009008 <_OnExit+0x6c>)
 8008fa2:	4a1a      	ldr	r2, [pc, #104]	; (800900c <_OnExit+0x70>)
 8008fa4:	481a      	ldr	r0, [pc, #104]	; (8009010 <_OnExit+0x74>)
 8008fa6:	2400      	movs	r4, #0
 8008fa8:	701c      	strb	r4, [r3, #0]
 8008faa:	4b1a      	ldr	r3, [pc, #104]	; (8009014 <_OnExit+0x78>)
 8008fac:	6014      	str	r4, [r2, #0]
 8008fae:	601c      	str	r4, [r3, #0]
 8008fb0:	4b19      	ldr	r3, [pc, #100]	; (8009018 <_OnExit+0x7c>)
 8008fb2:	6054      	str	r4, [r2, #4]
 8008fb4:	601c      	str	r4, [r3, #0]
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <_OnExit+0x80>)
 8008fb8:	601c      	str	r4, [r3, #0]
 8008fba:	605c      	str	r4, [r3, #4]
 8008fbc:	4b18      	ldr	r3, [pc, #96]	; (8009020 <_OnExit+0x84>)
 8008fbe:	601c      	str	r4, [r3, #0]
 8008fc0:	4b18      	ldr	r3, [pc, #96]	; (8009024 <_OnExit+0x88>)
 8008fc2:	601c      	str	r4, [r3, #0]
 8008fc4:	4b18      	ldr	r3, [pc, #96]	; (8009028 <_OnExit+0x8c>)
 8008fc6:	601c      	str	r4, [r3, #0]
 8008fc8:	4b18      	ldr	r3, [pc, #96]	; (800902c <_OnExit+0x90>)
 8008fca:	601c      	str	r4, [r3, #0]
 8008fcc:	4b18      	ldr	r3, [pc, #96]	; (8009030 <_OnExit+0x94>)
 8008fce:	4621      	mov	r1, r4
 8008fd0:	601c      	str	r4, [r3, #0]
 8008fd2:	2218      	movs	r2, #24
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	4798      	blx	r3
 8008fd8:	4b16      	ldr	r3, [pc, #88]	; (8009034 <_OnExit+0x98>)
 8008fda:	4817      	ldr	r0, [pc, #92]	; (8009038 <_OnExit+0x9c>)
 8008fdc:	601c      	str	r4, [r3, #0]
 8008fde:	4b17      	ldr	r3, [pc, #92]	; (800903c <_OnExit+0xa0>)
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	601c      	str	r4, [r3, #0]
 8008fe4:	605c      	str	r4, [r3, #4]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	4798      	blx	r3
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	4814      	ldr	r0, [pc, #80]	; (8009040 <_OnExit+0xa4>)
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	2210      	movs	r2, #16
 8008ff4:	4798      	blx	r3
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	4812      	ldr	r0, [pc, #72]	; (8009044 <_OnExit+0xa8>)
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	4798      	blx	r3
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	bf00      	nop
 8009004:	200029d8 	.word	0x200029d8
 8009008:	2000003c 	.word	0x2000003c
 800900c:	200038d0 	.word	0x200038d0
 8009010:	200029bc 	.word	0x200029bc
 8009014:	200029b8 	.word	0x200029b8
 8009018:	200038fc 	.word	0x200038fc
 800901c:	20003904 	.word	0x20003904
 8009020:	20003910 	.word	0x20003910
 8009024:	200038bc 	.word	0x200038bc
 8009028:	200038f0 	.word	0x200038f0
 800902c:	20003900 	.word	0x20003900
 8009030:	200029d4 	.word	0x200029d4
 8009034:	200038cc 	.word	0x200038cc
 8009038:	20003938 	.word	0x20003938
 800903c:	200038c0 	.word	0x200038c0
 8009040:	20003928 	.word	0x20003928
 8009044:	20003918 	.word	0x20003918

08009048 <_Findy1>:
 8009048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904a:	4605      	mov	r5, r0
 800904c:	b085      	sub	sp, #20
 800904e:	460c      	mov	r4, r1
 8009050:	4616      	mov	r6, r2
 8009052:	2d00      	cmp	r5, #0
 8009054:	d04c      	beq.n	80090f0 <_Findy1+0xa8>
 8009056:	4628      	mov	r0, r5
 8009058:	f7ff fcda 	bl	8008a10 <GUI_ALLOC_LockH>
 800905c:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800905e:	9001      	str	r0, [sp, #4]
 8009060:	07bb      	lsls	r3, r7, #30
 8009062:	4601      	mov	r1, r0
 8009064:	d53d      	bpl.n	80090e2 <_Findy1+0x9a>
 8009066:	ad02      	add	r5, sp, #8
 8009068:	b126      	cbz	r6, 8009074 <_Findy1+0x2c>
 800906a:	4628      	mov	r0, r5
 800906c:	4632      	mov	r2, r6
 800906e:	f7fe f99f 	bl	80073b0 <GUI__IntersectRects>
 8009072:	e002      	b.n	800907a <_Findy1+0x32>
 8009074:	c803      	ldmia	r0, {r0, r1}
 8009076:	e885 0003 	stmia.w	r5, {r0, r1}
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7fe fc61 	bl	8007944 <GUI_RectsIntersect>
 8009082:	b370      	cbz	r0, 80090e2 <_Findy1+0x9a>
 8009084:	f017 0f01 	tst.w	r7, #1
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	d11e      	bne.n	80090ca <_Findy1+0x82>
 800908c:	b13e      	cbz	r6, 800909e <_Findy1+0x56>
 800908e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009092:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8009096:	429a      	cmp	r2, r3
 8009098:	bfa8      	it	ge
 800909a:	4613      	movge	r3, r2
 800909c:	e001      	b.n	80090a2 <_Findy1+0x5a>
 800909e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80090a2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80090ac:	dd06      	ble.n	80090bc <_Findy1+0x74>
 80090ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80090b2:	b219      	sxth	r1, r3
 80090b4:	428a      	cmp	r2, r1
 80090b6:	db14      	blt.n	80090e2 <_Findy1+0x9a>
 80090b8:	3b01      	subs	r3, #1
 80090ba:	e004      	b.n	80090c6 <_Findy1+0x7e>
 80090bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80090c0:	b219      	sxth	r1, r3
 80090c2:	428a      	cmp	r2, r1
 80090c4:	dd0d      	ble.n	80090e2 <_Findy1+0x9a>
 80090c6:	80e3      	strh	r3, [r4, #6]
 80090c8:	e00b      	b.n	80090e2 <_Findy1+0x9a>
 80090ca:	69df      	ldr	r7, [r3, #28]
 80090cc:	b14f      	cbz	r7, 80090e2 <_Findy1+0x9a>
 80090ce:	4638      	mov	r0, r7
 80090d0:	4621      	mov	r1, r4
 80090d2:	462a      	mov	r2, r5
 80090d4:	f7ff ffb8 	bl	8009048 <_Findy1>
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff fc8f 	bl	80089fc <GUI_ALLOC_h2p>
 80090de:	6a07      	ldr	r7, [r0, #32]
 80090e0:	e7f4      	b.n	80090cc <_Findy1+0x84>
 80090e2:	a804      	add	r0, sp, #16
 80090e4:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80090e8:	6a1d      	ldr	r5, [r3, #32]
 80090ea:	f7ff fc9f 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80090ee:	e7b0      	b.n	8009052 <_Findy1+0xa>
 80090f0:	b005      	add	sp, #20
 80090f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090f4 <_Findx0>:
 80090f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80090f8:	4604      	mov	r4, r0
 80090fa:	460f      	mov	r7, r1
 80090fc:	4690      	mov	r8, r2
 80090fe:	2500      	movs	r5, #0
 8009100:	2c00      	cmp	r4, #0
 8009102:	d037      	beq.n	8009174 <_Findx0+0x80>
 8009104:	4620      	mov	r0, r4
 8009106:	f7ff fc83 	bl	8008a10 <GUI_ALLOC_LockH>
 800910a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800910c:	9001      	str	r0, [sp, #4]
 800910e:	07b2      	lsls	r2, r6, #30
 8009110:	4601      	mov	r1, r0
 8009112:	d528      	bpl.n	8009166 <_Findx0+0x72>
 8009114:	ac02      	add	r4, sp, #8
 8009116:	f1b8 0f00 	cmp.w	r8, #0
 800911a:	d004      	beq.n	8009126 <_Findx0+0x32>
 800911c:	4620      	mov	r0, r4
 800911e:	4642      	mov	r2, r8
 8009120:	f7fe f946 	bl	80073b0 <GUI__IntersectRects>
 8009124:	e002      	b.n	800912c <_Findx0+0x38>
 8009126:	c803      	ldmia	r0, {r0, r1}
 8009128:	e884 0003 	stmia.w	r4, {r0, r1}
 800912c:	4638      	mov	r0, r7
 800912e:	4621      	mov	r1, r4
 8009130:	f7fe fc08 	bl	8007944 <GUI_RectsIntersect>
 8009134:	b1b8      	cbz	r0, 8009166 <_Findx0+0x72>
 8009136:	07f3      	lsls	r3, r6, #31
 8009138:	d405      	bmi.n	8009146 <_Findx0+0x52>
 800913a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	803b      	strh	r3, [r7, #0]
 8009142:	2501      	movs	r5, #1
 8009144:	e00f      	b.n	8009166 <_Findx0+0x72>
 8009146:	9b01      	ldr	r3, [sp, #4]
 8009148:	69de      	ldr	r6, [r3, #28]
 800914a:	b166      	cbz	r6, 8009166 <_Findx0+0x72>
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	4622      	mov	r2, r4
 8009152:	f7ff ffcf 	bl	80090f4 <_Findx0>
 8009156:	2800      	cmp	r0, #0
 8009158:	4630      	mov	r0, r6
 800915a:	bf18      	it	ne
 800915c:	2501      	movne	r5, #1
 800915e:	f7ff fc4d 	bl	80089fc <GUI_ALLOC_h2p>
 8009162:	6a06      	ldr	r6, [r0, #32]
 8009164:	e7f1      	b.n	800914a <_Findx0+0x56>
 8009166:	a804      	add	r0, sp, #16
 8009168:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800916c:	6a1c      	ldr	r4, [r3, #32]
 800916e:	f7ff fc5d 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009172:	e7c5      	b.n	8009100 <_Findx0+0xc>
 8009174:	4628      	mov	r0, r5
 8009176:	b004      	add	sp, #16
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800917c <_Findx1>:
 800917c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917e:	4604      	mov	r4, r0
 8009180:	b085      	sub	sp, #20
 8009182:	460e      	mov	r6, r1
 8009184:	4617      	mov	r7, r2
 8009186:	2c00      	cmp	r4, #0
 8009188:	d031      	beq.n	80091ee <_Findx1+0x72>
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fc40 	bl	8008a10 <GUI_ALLOC_LockH>
 8009190:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8009192:	9001      	str	r0, [sp, #4]
 8009194:	07aa      	lsls	r2, r5, #30
 8009196:	4601      	mov	r1, r0
 8009198:	d522      	bpl.n	80091e0 <_Findx1+0x64>
 800919a:	ac02      	add	r4, sp, #8
 800919c:	b127      	cbz	r7, 80091a8 <_Findx1+0x2c>
 800919e:	4620      	mov	r0, r4
 80091a0:	463a      	mov	r2, r7
 80091a2:	f7fe f905 	bl	80073b0 <GUI__IntersectRects>
 80091a6:	e002      	b.n	80091ae <_Findx1+0x32>
 80091a8:	c803      	ldmia	r0, {r0, r1}
 80091aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80091ae:	4630      	mov	r0, r6
 80091b0:	4621      	mov	r1, r4
 80091b2:	f7fe fbc7 	bl	8007944 <GUI_RectsIntersect>
 80091b6:	b198      	cbz	r0, 80091e0 <_Findx1+0x64>
 80091b8:	07eb      	lsls	r3, r5, #31
 80091ba:	d404      	bmi.n	80091c6 <_Findx1+0x4a>
 80091bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	80b3      	strh	r3, [r6, #4]
 80091c4:	e00c      	b.n	80091e0 <_Findx1+0x64>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	69dd      	ldr	r5, [r3, #28]
 80091ca:	b14d      	cbz	r5, 80091e0 <_Findx1+0x64>
 80091cc:	4628      	mov	r0, r5
 80091ce:	4631      	mov	r1, r6
 80091d0:	4622      	mov	r2, r4
 80091d2:	f7ff ffd3 	bl	800917c <_Findx1>
 80091d6:	4628      	mov	r0, r5
 80091d8:	f7ff fc10 	bl	80089fc <GUI_ALLOC_h2p>
 80091dc:	6a05      	ldr	r5, [r0, #32]
 80091de:	e7f4      	b.n	80091ca <_Findx1+0x4e>
 80091e0:	a804      	add	r0, sp, #16
 80091e2:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80091e6:	6a1c      	ldr	r4, [r3, #32]
 80091e8:	f7ff fc20 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80091ec:	e7cb      	b.n	8009186 <_Findx1+0xa>
 80091ee:	b005      	add	sp, #20
 80091f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080091f4 <WM__ClipAtParentBorders>:
 80091f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f6:	4607      	mov	r7, r0
 80091f8:	460d      	mov	r5, r1
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7ff fc08 	bl	8008a10 <GUI_ALLOC_LockH>
 8009200:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009202:	ac02      	add	r4, sp, #8
 8009204:	f013 0602 	ands.w	r6, r3, #2
 8009208:	4601      	mov	r1, r0
 800920a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800920e:	d104      	bne.n	800921a <WM__ClipAtParentBorders+0x26>
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff fc0b 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009216:	4630      	mov	r0, r6
 8009218:	e016      	b.n	8009248 <WM__ClipAtParentBorders+0x54>
 800921a:	4638      	mov	r0, r7
 800921c:	f7fe f8aa 	bl	8007374 <GUI__IntersectRect>
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	699e      	ldr	r6, [r3, #24]
 8009224:	4620      	mov	r0, r4
 8009226:	b956      	cbnz	r6, 800923e <WM__ClipAtParentBorders+0x4a>
 8009228:	f7ff fc00 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800922c:	4b07      	ldr	r3, [pc, #28]	; (800924c <WM__ClipAtParentBorders+0x58>)
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	4295      	cmp	r5, r2
 8009232:	d008      	beq.n	8009246 <WM__ClipAtParentBorders+0x52>
 8009234:	6858      	ldr	r0, [r3, #4]
 8009236:	1a2b      	subs	r3, r5, r0
 8009238:	4258      	negs	r0, r3
 800923a:	4158      	adcs	r0, r3
 800923c:	e004      	b.n	8009248 <WM__ClipAtParentBorders+0x54>
 800923e:	f7ff fbf5 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009242:	4635      	mov	r5, r6
 8009244:	e7d9      	b.n	80091fa <WM__ClipAtParentBorders+0x6>
 8009246:	2001      	movs	r0, #1
 8009248:	b003      	add	sp, #12
 800924a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924c:	200038c0 	.word	0x200038c0

08009250 <WM__InsertWindowIntoList>:
 8009250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	b085      	sub	sp, #20
 8009256:	460d      	mov	r5, r1
 8009258:	2900      	cmp	r1, #0
 800925a:	d049      	beq.n	80092f0 <WM__InsertWindowIntoList+0xa0>
 800925c:	f7ff fbd8 	bl	8008a10 <GUI_ALLOC_LockH>
 8009260:	2300      	movs	r3, #0
 8009262:	6203      	str	r3, [r0, #32]
 8009264:	6185      	str	r5, [r0, #24]
 8009266:	9001      	str	r0, [sp, #4]
 8009268:	4628      	mov	r0, r5
 800926a:	f7ff fbd1 	bl	8008a10 <GUI_ALLOC_LockH>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	69c5      	ldr	r5, [r0, #28]
 8009272:	9002      	str	r0, [sp, #8]
 8009274:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8009276:	b92d      	cbnz	r5, 8009284 <WM__InsertWindowIntoList+0x34>
 8009278:	61c4      	str	r4, [r0, #28]
 800927a:	a801      	add	r0, sp, #4
 800927c:	f7ff fbd6 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009280:	a802      	add	r0, sp, #8
 8009282:	e033      	b.n	80092ec <WM__InsertWindowIntoList+0x9c>
 8009284:	4628      	mov	r0, r5
 8009286:	f7ff fbc3 	bl	8008a10 <GUI_ALLOC_LockH>
 800928a:	ae04      	add	r6, sp, #16
 800928c:	f007 0708 	and.w	r7, r7, #8
 8009290:	f846 0d04 	str.w	r0, [r6, #-4]!
 8009294:	b977      	cbnz	r7, 80092b4 <WM__InsertWindowIntoList+0x64>
 8009296:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009298:	071a      	lsls	r2, r3, #28
 800929a:	d50b      	bpl.n	80092b4 <WM__InsertWindowIntoList+0x64>
 800929c:	9b01      	ldr	r3, [sp, #4]
 800929e:	621d      	str	r5, [r3, #32]
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	a801      	add	r0, sp, #4
 80092a4:	61dc      	str	r4, [r3, #28]
 80092a6:	f7ff fbc1 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80092aa:	a802      	add	r0, sp, #8
 80092ac:	f7ff fbbe 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80092b0:	4630      	mov	r0, r6
 80092b2:	e01b      	b.n	80092ec <WM__InsertWindowIntoList+0x9c>
 80092b4:	a802      	add	r0, sp, #8
 80092b6:	f7ff fbb9 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff fbb6 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7ff fb9b 	bl	80089fc <GUI_ALLOC_h2p>
 80092c6:	9003      	str	r0, [sp, #12]
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	6a1d      	ldr	r5, [r3, #32]
 80092cc:	b90d      	cbnz	r5, 80092d2 <WM__InsertWindowIntoList+0x82>
 80092ce:	621c      	str	r4, [r3, #32]
 80092d0:	e00b      	b.n	80092ea <WM__InsertWindowIntoList+0x9a>
 80092d2:	4628      	mov	r0, r5
 80092d4:	f7ff fb92 	bl	80089fc <GUI_ALLOC_h2p>
 80092d8:	2f00      	cmp	r7, #0
 80092da:	d1f4      	bne.n	80092c6 <WM__InsertWindowIntoList+0x76>
 80092dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092de:	071b      	lsls	r3, r3, #28
 80092e0:	d5f1      	bpl.n	80092c6 <WM__InsertWindowIntoList+0x76>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	621c      	str	r4, [r3, #32]
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	621d      	str	r5, [r3, #32]
 80092ea:	a801      	add	r0, sp, #4
 80092ec:	f7ff fb9e 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80092f0:	b005      	add	sp, #20
 80092f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092f4 <WM__Client2Screen>:
 80092f4:	4603      	mov	r3, r0
 80092f6:	4608      	mov	r0, r1
 80092f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80092fc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009300:	f7fe bb07 	b.w	8007912 <GUI_MoveRect>

08009304 <_SetClipRectUserIntersect>:
 8009304:	4b11      	ldr	r3, [pc, #68]	; (800934c <_SetClipRectUserIntersect+0x48>)
 8009306:	b530      	push	{r4, r5, lr}
 8009308:	681c      	ldr	r4, [r3, #0]
 800930a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800930c:	b085      	sub	sp, #20
 800930e:	4605      	mov	r5, r0
 8009310:	b1ba      	cbz	r2, 8009342 <_SetClipRectUserIntersect+0x3e>
 8009312:	6810      	ldr	r0, [r2, #0]
 8009314:	6851      	ldr	r1, [r2, #4]
 8009316:	ab02      	add	r3, sp, #8
 8009318:	c303      	stmia	r3!, {r0, r1}
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <_SetClipRectUserIntersect+0x4c>)
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	b900      	cbnz	r0, 8009322 <_SetClipRectUserIntersect+0x1e>
 8009320:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009322:	f7ff fb75 	bl	8008a10 <GUI_ALLOC_LockH>
 8009326:	ac04      	add	r4, sp, #16
 8009328:	a902      	add	r1, sp, #8
 800932a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800932e:	f7ff ffe1 	bl	80092f4 <WM__Client2Screen>
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff fb7a 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009338:	a802      	add	r0, sp, #8
 800933a:	4629      	mov	r1, r5
 800933c:	f7fe f81a 	bl	8007374 <GUI__IntersectRect>
 8009340:	a802      	add	r0, sp, #8
 8009342:	f001 f9e9 	bl	800a718 <LCD_SetClipRectEx>
 8009346:	b005      	add	sp, #20
 8009348:	bd30      	pop	{r4, r5, pc}
 800934a:	bf00      	nop
 800934c:	20000044 	.word	0x20000044
 8009350:	200038bc 	.word	0x200038bc

08009354 <WM__ActivateClipRect>:
 8009354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009356:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <WM__ActivateClipRect+0x3c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800935e:	b10a      	cbz	r2, 8009364 <WM__ActivateClipRect+0x10>
 8009360:	480c      	ldr	r0, [pc, #48]	; (8009394 <WM__ActivateClipRect+0x40>)
 8009362:	e011      	b.n	8009388 <WM__ActivateClipRect+0x34>
 8009364:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009366:	f7ff fb53 	bl	8008a10 <GUI_ALLOC_LockH>
 800936a:	9001      	str	r0, [sp, #4]
 800936c:	c803      	ldmia	r0, {r0, r1}
 800936e:	ac02      	add	r4, sp, #8
 8009370:	e884 0003 	stmia.w	r4, {r0, r1}
 8009374:	a801      	add	r0, sp, #4
 8009376:	f7ff fb59 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800937a:	4b07      	ldr	r3, [pc, #28]	; (8009398 <WM__ActivateClipRect+0x44>)
 800937c:	6819      	ldr	r1, [r3, #0]
 800937e:	b111      	cbz	r1, 8009386 <WM__ActivateClipRect+0x32>
 8009380:	4620      	mov	r0, r4
 8009382:	f7ff ff37 	bl	80091f4 <WM__ClipAtParentBorders>
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff ffbc 	bl	8009304 <_SetClipRectUserIntersect>
 800938c:	b004      	add	sp, #16
 800938e:	bd10      	pop	{r4, pc}
 8009390:	20000044 	.word	0x20000044
 8009394:	200029c4 	.word	0x200029c4
 8009398:	200038bc 	.word	0x200038bc

0800939c <WM__InvalidateDrawAndDescs>:
 800939c:	b513      	push	{r0, r1, r4, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	b300      	cbz	r0, 80093e4 <WM__InvalidateDrawAndDescs+0x48>
 80093a2:	f7ff fb35 	bl	8008a10 <GUI_ALLOC_LockH>
 80093a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80093a8:	9001      	str	r0, [sp, #4]
 80093aa:	0793      	lsls	r3, r2, #30
 80093ac:	d517      	bpl.n	80093de <WM__InvalidateDrawAndDescs+0x42>
 80093ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80093b0:	b140      	cbz	r0, 80093c4 <WM__InvalidateDrawAndDescs+0x28>
 80093b2:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <WM__InvalidateDrawAndDescs+0x4c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	d004      	beq.n	80093c4 <WM__InvalidateDrawAndDescs+0x28>
 80093ba:	f001 f979 	bl	800a6b0 <GUI_MEMDEV_Delete>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24
 80093c4:	4620      	mov	r0, r4
 80093c6:	f7ff fd87 	bl	8008ed8 <WM_GetFirstChild>
 80093ca:	4604      	mov	r4, r0
 80093cc:	b13c      	cbz	r4, 80093de <WM__InvalidateDrawAndDescs+0x42>
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff ffe4 	bl	800939c <WM__InvalidateDrawAndDescs>
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7ff fb11 	bl	80089fc <GUI_ALLOC_h2p>
 80093da:	6a04      	ldr	r4, [r0, #32]
 80093dc:	e7f6      	b.n	80093cc <WM__InvalidateDrawAndDescs+0x30>
 80093de:	a801      	add	r0, sp, #4
 80093e0:	f7ff fb24 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80093e4:	b002      	add	sp, #8
 80093e6:	bd10      	pop	{r4, pc}
 80093e8:	2000390c 	.word	0x2000390c

080093ec <WM__RectIsNZ>:
 80093ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 80093f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	dc08      	bgt.n	800940a <WM__RectIsNZ+0x1e>
 80093f8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80093fc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009400:	429a      	cmp	r2, r3
 8009402:	bfcc      	ite	gt
 8009404:	2000      	movgt	r0, #0
 8009406:	2001      	movle	r0, #1
 8009408:	4770      	bx	lr
 800940a:	2000      	movs	r0, #0
 800940c:	4770      	bx	lr

0800940e <WM__SendMsgNoData>:
 800940e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009410:	ab04      	add	r3, sp, #16
 8009412:	9001      	str	r0, [sp, #4]
 8009414:	f843 1d10 	str.w	r1, [r3, #-16]!
 8009418:	4669      	mov	r1, sp
 800941a:	f001 fef7 	bl	800b20c <WM__SendMessage>
 800941e:	b005      	add	sp, #20
 8009420:	f85d fb04 	ldr.w	pc, [sp], #4

08009424 <WM__GetClientRectWin>:
 8009424:	2300      	movs	r3, #0
 8009426:	800b      	strh	r3, [r1, #0]
 8009428:	8882      	ldrh	r2, [r0, #4]
 800942a:	804b      	strh	r3, [r1, #2]
 800942c:	8803      	ldrh	r3, [r0, #0]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	808b      	strh	r3, [r1, #4]
 8009432:	88c2      	ldrh	r2, [r0, #6]
 8009434:	8843      	ldrh	r3, [r0, #2]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	80cb      	strh	r3, [r1, #6]
 800943a:	4770      	bx	lr

0800943c <WM__GetTopLevelLayer>:
 800943c:	b510      	push	{r4, lr}
 800943e:	4604      	mov	r4, r0
 8009440:	f7ff fadc 	bl	80089fc <GUI_ALLOC_h2p>
 8009444:	6980      	ldr	r0, [r0, #24]
 8009446:	2800      	cmp	r0, #0
 8009448:	d1f9      	bne.n	800943e <WM__GetTopLevelLayer+0x2>
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <WM__GetTopLevelLayer+0x24>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4294      	cmp	r4, r2
 8009450:	d005      	beq.n	800945e <WM__GetTopLevelLayer+0x22>
 8009452:	6858      	ldr	r0, [r3, #4]
 8009454:	4284      	cmp	r4, r0
 8009456:	bf14      	ite	ne
 8009458:	f04f 30ff 	movne.w	r0, #4294967295
 800945c:	2001      	moveq	r0, #1
 800945e:	bd10      	pop	{r4, pc}
 8009460:	200038c0 	.word	0x200038c0

08009464 <_Invalidate1Abs>:
 8009464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009466:	b085      	sub	sp, #20
 8009468:	4606      	mov	r6, r0
 800946a:	460d      	mov	r5, r1
 800946c:	4617      	mov	r7, r2
 800946e:	f7ff fac5 	bl	80089fc <GUI_ALLOC_h2p>
 8009472:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009474:	9001      	str	r0, [sp, #4]
 8009476:	07a3      	lsls	r3, r4, #30
 8009478:	d53e      	bpl.n	80094f8 <_Invalidate1Abs+0x94>
 800947a:	4628      	mov	r0, r5
 800947c:	f7ff ffb6 	bl	80093ec <WM__RectIsNZ>
 8009480:	2800      	cmp	r0, #0
 8009482:	d039      	beq.n	80094f8 <_Invalidate1Abs+0x94>
 8009484:	f640 0301 	movw	r3, #2049	; 0x801
 8009488:	4023      	ands	r3, r4
 800948a:	2b01      	cmp	r3, #1
 800948c:	d034      	beq.n	80094f8 <_Invalidate1Abs+0x94>
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff fabe 	bl	8008a10 <GUI_ALLOC_LockH>
 8009494:	ac02      	add	r4, sp, #8
 8009496:	4602      	mov	r2, r0
 8009498:	9001      	str	r0, [sp, #4]
 800949a:	4629      	mov	r1, r5
 800949c:	4620      	mov	r0, r4
 800949e:	f7fd ff87 	bl	80073b0 <GUI__IntersectRects>
 80094a2:	4620      	mov	r0, r4
 80094a4:	f7ff ffa2 	bl	80093ec <WM__RectIsNZ>
 80094a8:	b318      	cbz	r0, 80094f2 <_Invalidate1Abs+0x8e>
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094ae:	f244 0120 	movw	r1, #16416	; 0x4020
 80094b2:	4011      	ands	r1, r2
 80094b4:	f103 0508 	add.w	r5, r3, #8
 80094b8:	b129      	cbz	r1, 80094c6 <_Invalidate1Abs+0x62>
 80094ba:	4628      	mov	r0, r5
 80094bc:	4629      	mov	r1, r5
 80094be:	4622      	mov	r2, r4
 80094c0:	f7fe f9fc 	bl	80078bc <GUI_MergeRect>
 80094c4:	e015      	b.n	80094f2 <_Invalidate1Abs+0x8e>
 80094c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094ca:	4317      	orrs	r7, r2
 80094cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80094d0:	629f      	str	r7, [r3, #40]	; 0x28
 80094d2:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <_Invalidate1Abs+0x98>)
 80094d4:	881a      	ldrh	r2, [r3, #0]
 80094d6:	4630      	mov	r0, r6
 80094d8:	3201      	adds	r2, #1
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	f7ff ffae 	bl	800943c <WM__GetTopLevelLayer>
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <_Invalidate1Abs+0x9c>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	fa02 f000 	lsl.w	r0, r2, r0
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4302      	orrs	r2, r0
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	f001 fdd9 	bl	800b0a4 <GUI_SignalEvent>
 80094f2:	a801      	add	r0, sp, #4
 80094f4:	f7ff fa9a 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80094f8:	b005      	add	sp, #20
 80094fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094fc:	200038d8 	.word	0x200038d8
 8009500:	200038e8 	.word	0x200038e8

08009504 <WM__Invalidate1Abs>:
 8009504:	2220      	movs	r2, #32
 8009506:	f7ff bfad 	b.w	8009464 <_Invalidate1Abs>

0800950a <WM_InvalidateWindowAndDescsEx>:
 800950a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950c:	460f      	mov	r7, r1
 800950e:	b085      	sub	sp, #20
 8009510:	4615      	mov	r5, r2
 8009512:	4606      	mov	r6, r0
 8009514:	b348      	cbz	r0, 800956a <WM_InvalidateWindowAndDescsEx+0x60>
 8009516:	f7ff fa7b 	bl	8008a10 <GUI_ALLOC_LockH>
 800951a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800951c:	ac04      	add	r4, sp, #16
 800951e:	079b      	lsls	r3, r3, #30
 8009520:	4602      	mov	r2, r0
 8009522:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8009526:	d403      	bmi.n	8009530 <WM_InvalidateWindowAndDescsEx+0x26>
 8009528:	4620      	mov	r0, r4
 800952a:	f7ff fa7f 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800952e:	e01c      	b.n	800956a <WM_InvalidateWindowAndDescsEx+0x60>
 8009530:	a802      	add	r0, sp, #8
 8009532:	4639      	mov	r1, r7
 8009534:	f7fd ff3c 	bl	80073b0 <GUI__IntersectRects>
 8009538:	2800      	cmp	r0, #0
 800953a:	d0f5      	beq.n	8009528 <WM_InvalidateWindowAndDescsEx+0x1e>
 800953c:	4620      	mov	r0, r4
 800953e:	f7ff fa75 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009542:	4630      	mov	r0, r6
 8009544:	a902      	add	r1, sp, #8
 8009546:	462a      	mov	r2, r5
 8009548:	f7ff ff8c 	bl	8009464 <_Invalidate1Abs>
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fcc3 	bl	8008ed8 <WM_GetFirstChild>
 8009552:	4604      	mov	r4, r0
 8009554:	b14c      	cbz	r4, 800956a <WM_InvalidateWindowAndDescsEx+0x60>
 8009556:	4620      	mov	r0, r4
 8009558:	a902      	add	r1, sp, #8
 800955a:	462a      	mov	r2, r5
 800955c:	f7ff ffd5 	bl	800950a <WM_InvalidateWindowAndDescsEx>
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff fa4b 	bl	80089fc <GUI_ALLOC_h2p>
 8009566:	6a04      	ldr	r4, [r0, #32]
 8009568:	e7f4      	b.n	8009554 <WM_InvalidateWindowAndDescsEx+0x4a>
 800956a:	b005      	add	sp, #20
 800956c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800956e <WM__InvalidateRect>:
 800956e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009572:	4680      	mov	r8, r0
 8009574:	4617      	mov	r7, r2
 8009576:	461d      	mov	r5, r3
 8009578:	460c      	mov	r4, r1
 800957a:	2900      	cmp	r1, #0
 800957c:	d030      	beq.n	80095e0 <WM__InvalidateRect+0x72>
 800957e:	4608      	mov	r0, r1
 8009580:	f7ff fa46 	bl	8008a10 <GUI_ALLOC_LockH>
 8009584:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009586:	9001      	str	r0, [sp, #4]
 8009588:	07b3      	lsls	r3, r6, #30
 800958a:	4602      	mov	r2, r0
 800958c:	d525      	bpl.n	80095da <WM__InvalidateRect+0x6c>
 800958e:	a802      	add	r0, sp, #8
 8009590:	4641      	mov	r1, r8
 8009592:	f7fd ff0d 	bl	80073b0 <GUI__IntersectRects>
 8009596:	b300      	cbz	r0, 80095da <WM__InvalidateRect+0x6c>
 8009598:	f640 0301 	movw	r3, #2049	; 0x801
 800959c:	4033      	ands	r3, r6
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d107      	bne.n	80095b2 <WM__InvalidateRect+0x44>
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	a802      	add	r0, sp, #8
 80095a6:	6999      	ldr	r1, [r3, #24]
 80095a8:	6a1a      	ldr	r2, [r3, #32]
 80095aa:	462b      	mov	r3, r5
 80095ac:	f7ff ffdf 	bl	800956e <WM__InvalidateRect>
 80095b0:	e004      	b.n	80095bc <WM__InvalidateRect+0x4e>
 80095b2:	4620      	mov	r0, r4
 80095b4:	a902      	add	r1, sp, #8
 80095b6:	462a      	mov	r2, r5
 80095b8:	f7ff ff54 	bl	8009464 <_Invalidate1Abs>
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	69dc      	ldr	r4, [r3, #28]
 80095c0:	b15c      	cbz	r4, 80095da <WM__InvalidateRect+0x6c>
 80095c2:	42bc      	cmp	r4, r7
 80095c4:	d009      	beq.n	80095da <WM__InvalidateRect+0x6c>
 80095c6:	4620      	mov	r0, r4
 80095c8:	a902      	add	r1, sp, #8
 80095ca:	462a      	mov	r2, r5
 80095cc:	f7ff ff9d 	bl	800950a <WM_InvalidateWindowAndDescsEx>
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7ff fa13 	bl	80089fc <GUI_ALLOC_h2p>
 80095d6:	6a04      	ldr	r4, [r0, #32]
 80095d8:	e7f2      	b.n	80095c0 <WM__InvalidateRect+0x52>
 80095da:	a801      	add	r0, sp, #4
 80095dc:	f7ff fa26 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80095e0:	b004      	add	sp, #16
 80095e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095e6 <WM__InvalidateRectEx>:
 80095e6:	2320      	movs	r3, #32
 80095e8:	f7ff bfc1 	b.w	800956e <WM__InvalidateRect>

080095ec <WM_InvalidateRect>:
 80095ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ee:	460f      	mov	r7, r1
 80095f0:	b087      	sub	sp, #28
 80095f2:	4605      	mov	r5, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d033      	beq.n	8009660 <WM_InvalidateRect+0x74>
 80095f8:	f7ff fa0a 	bl	8008a10 <GUI_ALLOC_LockH>
 80095fc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80095fe:	9001      	str	r0, [sp, #4]
 8009600:	07b2      	lsls	r2, r6, #30
 8009602:	d52a      	bpl.n	800965a <WM_InvalidateRect+0x6e>
 8009604:	c803      	ldmia	r0, {r0, r1}
 8009606:	ac04      	add	r4, sp, #16
 8009608:	03f3      	lsls	r3, r6, #15
 800960a:	e884 0003 	stmia.w	r4, {r0, r1}
 800960e:	d502      	bpl.n	8009616 <WM_InvalidateRect+0x2a>
 8009610:	4628      	mov	r0, r5
 8009612:	f7ff fec3 	bl	800939c <WM__InvalidateDrawAndDescs>
 8009616:	b15f      	cbz	r7, 8009630 <WM_InvalidateRect+0x44>
 8009618:	6838      	ldr	r0, [r7, #0]
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	ab02      	add	r3, sp, #8
 800961e:	c303      	stmia	r3!, {r0, r1}
 8009620:	9801      	ldr	r0, [sp, #4]
 8009622:	a902      	add	r1, sp, #8
 8009624:	f7ff fe66 	bl	80092f4 <WM__Client2Screen>
 8009628:	4620      	mov	r0, r4
 800962a:	a902      	add	r1, sp, #8
 800962c:	f7fd fea2 	bl	8007374 <GUI__IntersectRect>
 8009630:	4620      	mov	r0, r4
 8009632:	4629      	mov	r1, r5
 8009634:	f7ff fdde 	bl	80091f4 <WM__ClipAtParentBorders>
 8009638:	b178      	cbz	r0, 800965a <WM_InvalidateRect+0x6e>
 800963a:	f640 0301 	movw	r3, #2049	; 0x801
 800963e:	4033      	ands	r3, r6
 8009640:	2b01      	cmp	r3, #1
 8009642:	d106      	bne.n	8009652 <WM_InvalidateRect+0x66>
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	4620      	mov	r0, r4
 8009648:	6999      	ldr	r1, [r3, #24]
 800964a:	6a1a      	ldr	r2, [r3, #32]
 800964c:	f7ff ffcb 	bl	80095e6 <WM__InvalidateRectEx>
 8009650:	e003      	b.n	800965a <WM_InvalidateRect+0x6e>
 8009652:	4628      	mov	r0, r5
 8009654:	4621      	mov	r1, r4
 8009656:	f7ff ff55 	bl	8009504 <WM__Invalidate1Abs>
 800965a:	a801      	add	r0, sp, #4
 800965c:	f7ff f9e6 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009660:	b007      	add	sp, #28
 8009662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009664 <WM_InvalidateWindow>:
 8009664:	2100      	movs	r1, #0
 8009666:	f7ff bfc1 	b.w	80095ec <WM_InvalidateRect>

0800966a <WM__SelectTopLevelLayer>:
 800966a:	b508      	push	{r3, lr}
 800966c:	f7ff fee6 	bl	800943c <WM__GetTopLevelLayer>
 8009670:	2800      	cmp	r0, #0
 8009672:	db03      	blt.n	800967c <WM__SelectTopLevelLayer+0x12>
 8009674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009678:	f001 bd26 	b.w	800b0c8 <GUI_SelectLayer>
 800967c:	bd08      	pop	{r3, pc}
	...

08009680 <WM_SelectWindow>:
 8009680:	4a0d      	ldr	r2, [pc, #52]	; (80096b8 <WM_SelectWindow+0x38>)
 8009682:	6813      	ldr	r3, [r2, #0]
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8009688:	4604      	mov	r4, r0
 800968a:	4616      	mov	r6, r2
 800968c:	b908      	cbnz	r0, 8009692 <WM_SelectWindow+0x12>
 800968e:	4a0b      	ldr	r2, [pc, #44]	; (80096bc <WM_SelectWindow+0x3c>)
 8009690:	6814      	ldr	r4, [r2, #0]
 8009692:	649c      	str	r4, [r3, #72]	; 0x48
 8009694:	4620      	mov	r0, r4
 8009696:	f7ff ffe8 	bl	800966a <WM__SelectTopLevelLayer>
 800969a:	f001 fc37 	bl	800af0c <LCD_SetClipRectMax>
 800969e:	4620      	mov	r0, r4
 80096a0:	f7ff f9ac 	bl	80089fc <GUI_ALLOC_h2p>
 80096a4:	6833      	ldr	r3, [r6, #0]
 80096a6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80096aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80096ae:	64d9      	str	r1, [r3, #76]	; 0x4c
 80096b0:	651a      	str	r2, [r3, #80]	; 0x50
 80096b2:	4628      	mov	r0, r5
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	bf00      	nop
 80096b8:	20000044 	.word	0x20000044
 80096bc:	200038dc 	.word	0x200038dc

080096c0 <WM_CreateWindowAsChild>:
 80096c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c6:	469b      	mov	fp, r3
 80096c8:	4b4b      	ldr	r3, [pc, #300]	; (80097f8 <WM_CreateWindowAsChild+0x138>)
 80096ca:	4607      	mov	r7, r0
 80096cc:	4688      	mov	r8, r1
 80096ce:	4692      	mov	sl, r2
 80096d0:	681e      	ldr	r6, [r3, #0]
 80096d2:	bb65      	cbnz	r5, 800972e <WM_CreateWindowAsChild+0x6e>
 80096d4:	4b49      	ldr	r3, [pc, #292]	; (80097fc <WM_CreateWindowAsChild+0x13c>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b363      	cbz	r3, 8009734 <WM_CreateWindowAsChild+0x74>
 80096da:	4b49      	ldr	r3, [pc, #292]	; (8009800 <WM_CreateWindowAsChild+0x140>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	7c5a      	ldrb	r2, [r3, #17]
 80096e0:	4b48      	ldr	r3, [pc, #288]	; (8009804 <WM_CreateWindowAsChild+0x144>)
 80096e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	d024      	beq.n	8009734 <WM_CreateWindowAsChild+0x74>
 80096ea:	b31b      	cbz	r3, 8009734 <WM_CreateWindowAsChild+0x74>
 80096ec:	461d      	mov	r5, r3
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7ff f98e 	bl	8008a10 <GUI_ALLOC_LockH>
 80096f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80096f8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80096fc:	9001      	str	r0, [sp, #4]
 80096fe:	4417      	add	r7, r2
 8009700:	4498      	add	r8, r3
 8009702:	f1ba 0f00 	cmp.w	sl, #0
 8009706:	d105      	bne.n	8009714 <WM_CreateWindowAsChild+0x54>
 8009708:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800970c:	ebc2 0a0a 	rsb	sl, r2, sl
 8009710:	f10a 0a01 	add.w	sl, sl, #1
 8009714:	f1bb 0f00 	cmp.w	fp, #0
 8009718:	d105      	bne.n	8009726 <WM_CreateWindowAsChild+0x66>
 800971a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800971e:	ebc3 0b0b 	rsb	fp, r3, fp
 8009722:	f10b 0b01 	add.w	fp, fp, #1
 8009726:	a801      	add	r0, sp, #4
 8009728:	f7ff f980 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800972c:	e002      	b.n	8009734 <WM_CreateWindowAsChild+0x74>
 800972e:	1c6b      	adds	r3, r5, #1
 8009730:	d1dd      	bne.n	80096ee <WM_CreateWindowAsChild+0x2e>
 8009732:	2500      	movs	r5, #0
 8009734:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009736:	302c      	adds	r0, #44	; 0x2c
 8009738:	f7ff fb18 	bl	8008d6c <GUI_ALLOC_AllocZero>
 800973c:	4604      	mov	r4, r0
 800973e:	2800      	cmp	r0, #0
 8009740:	d056      	beq.n	80097f0 <WM_CreateWindowAsChild+0x130>
 8009742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009744:	431e      	orrs	r6, r3
 8009746:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <WM_CreateWindowAsChild+0x13c>)
 8009748:	881a      	ldrh	r2, [r3, #0]
 800974a:	3201      	adds	r2, #1
 800974c:	801a      	strh	r2, [r3, #0]
 800974e:	f7ff f95f 	bl	8008a10 <GUI_ALLOC_LockH>
 8009752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009754:	6103      	str	r3, [r0, #16]
 8009756:	f10d 0908 	add.w	r9, sp, #8
 800975a:	4b2b      	ldr	r3, [pc, #172]	; (8009808 <WM_CreateWindowAsChild+0x148>)
 800975c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800975e:	f849 0d08 	str.w	r0, [r9, #-8]!
 8009762:	4033      	ands	r3, r6
 8009764:	8007      	strh	r7, [r0, #0]
 8009766:	f8a0 8002 	strh.w	r8, [r0, #2]
 800976a:	4457      	add	r7, sl
 800976c:	44d8      	add	r8, fp
 800976e:	4313      	orrs	r3, r2
 8009770:	3f01      	subs	r7, #1
 8009772:	f108 38ff 	add.w	r8, r8, #4294967295
 8009776:	6283      	str	r3, [r0, #40]	; 0x28
 8009778:	8087      	strh	r7, [r0, #4]
 800977a:	f8a0 8006 	strh.w	r8, [r0, #6]
 800977e:	4668      	mov	r0, sp
 8009780:	f7ff f954 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009784:	4b21      	ldr	r3, [pc, #132]	; (800980c <WM_CreateWindowAsChild+0x14c>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	b148      	cbz	r0, 800979e <WM_CreateWindowAsChild+0xde>
 800978a:	f7ff f937 	bl	80089fc <GUI_ALLOC_h2p>
 800978e:	4607      	mov	r7, r0
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff f933 	bl	80089fc <GUI_ALLOC_h2p>
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6143      	str	r3, [r0, #20]
 800979a:	617c      	str	r4, [r7, #20]
 800979c:	e000      	b.n	80097a0 <WM_CreateWindowAsChild+0xe0>
 800979e:	601c      	str	r4, [r3, #0]
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff fd54 	bl	8009250 <WM__InsertWindowIntoList>
 80097a8:	06b5      	lsls	r5, r6, #26
 80097aa:	d502      	bpl.n	80097b2 <WM_CreateWindowAsChild+0xf2>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7ff ff67 	bl	8009680 <WM_SelectWindow>
 80097b2:	07f0      	lsls	r0, r6, #31
 80097b4:	d503      	bpl.n	80097be <WM_CreateWindowAsChild+0xfe>
 80097b6:	4b16      	ldr	r3, [pc, #88]	; (8009810 <WM_CreateWindowAsChild+0x150>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	3201      	adds	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	0671      	lsls	r1, r6, #25
 80097c0:	d502      	bpl.n	80097c8 <WM_CreateWindowAsChild+0x108>
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7ff fb98 	bl	8008ef8 <WM_BringToBottom>
 80097c8:	07b2      	lsls	r2, r6, #30
 80097ca:	d50d      	bpl.n	80097e8 <WM_CreateWindowAsChild+0x128>
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff f91f 	bl	8008a10 <GUI_ALLOC_LockH>
 80097d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80097d4:	9000      	str	r0, [sp, #0]
 80097d6:	f043 0302 	orr.w	r3, r3, #2
 80097da:	6283      	str	r3, [r0, #40]	; 0x28
 80097dc:	4668      	mov	r0, sp
 80097de:	f7ff f925 	bl	8008a2c <GUI_ALLOC_UnlockH>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff ff3e 	bl	8009664 <WM_InvalidateWindow>
 80097e8:	4620      	mov	r0, r4
 80097ea:	2101      	movs	r1, #1
 80097ec:	f7ff fe0f 	bl	800940e <WM__SendMsgNoData>
 80097f0:	4620      	mov	r0, r4
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f8:	200038f0 	.word	0x200038f0
 80097fc:	200038b8 	.word	0x200038b8
 8009800:	20000044 	.word	0x20000044
 8009804:	200038c0 	.word	0x200038c0
 8009808:	003f3f9f 	.word	0x003f3f9f
 800980c:	200038dc 	.word	0x200038dc
 8009810:	20003910 	.word	0x20003910

08009814 <WM__GetNextIVR>:
 8009814:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009818:	4f5d      	ldr	r7, [pc, #372]	; (8009990 <WM__GetNextIVR+0x17c>)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009820:	2800      	cmp	r0, #0
 8009822:	f000 80b2 	beq.w	800998a <WM__GetNextIVR+0x176>
 8009826:	4b5b      	ldr	r3, [pc, #364]	; (8009994 <WM__GetNextIVR+0x180>)
 8009828:	695a      	ldr	r2, [r3, #20]
 800982a:	2a01      	cmp	r2, #1
 800982c:	461c      	mov	r4, r3
 800982e:	dd03      	ble.n	8009838 <WM__GetNextIVR+0x24>
 8009830:	3a01      	subs	r2, #1
 8009832:	615a      	str	r2, [r3, #20]
 8009834:	2000      	movs	r0, #0
 8009836:	e0a8      	b.n	800998a <WM__GetNextIVR+0x176>
 8009838:	f104 0608 	add.w	r6, r4, #8
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009842:	3301      	adds	r3, #1
 8009844:	ad02      	add	r5, sp, #8
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	e885 0003 	stmia.w	r5, {r0, r1}
 800984c:	b923      	cbnz	r3, 8009858 <WM__GetNextIVR+0x44>
 800984e:	8823      	ldrh	r3, [r4, #0]
 8009850:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009854:	8863      	ldrh	r3, [r4, #2]
 8009856:	e011      	b.n	800987c <WM__GetNextIVR+0x68>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	8962      	ldrh	r2, [r4, #10]
 800985c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8009860:	3301      	adds	r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009868:	f8ad 3008 	strh.w	r3, [sp, #8]
 800986c:	b21b      	sxth	r3, r3
 800986e:	429a      	cmp	r2, r3
 8009870:	da06      	bge.n	8009880 <WM__GetNextIVR+0x6c>
 8009872:	8823      	ldrh	r3, [r4, #0]
 8009874:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009878:	89e3      	ldrh	r3, [r4, #14]
 800987a:	3301      	adds	r3, #1
 800987c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009880:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8009884:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8009888:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8009994 <WM__GetNextIVR+0x180>
 800988c:	429a      	cmp	r2, r3
 800988e:	dd04      	ble.n	800989a <WM__GetNextIVR+0x86>
 8009890:	6963      	ldr	r3, [r4, #20]
 8009892:	3b01      	subs	r3, #1
 8009894:	2000      	movs	r0, #0
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	e077      	b.n	800998a <WM__GetNextIVR+0x176>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800989e:	f7ff f8b7 	bl	8008a10 <GUI_ALLOC_LockH>
 80098a2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80098a6:	f9b8 3000 	ldrsh.w	r3, [r8]
 80098aa:	9001      	str	r0, [sp, #4]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d11c      	bne.n	80098ea <WM__GetNextIVR+0xd6>
 80098b0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80098b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80098b8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80098bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80098c0:	4b33      	ldr	r3, [pc, #204]	; (8009990 <WM__GetNextIVR+0x17c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098c6:	b15a      	cbz	r2, 80098e0 <WM__GetNextIVR+0xcc>
 80098c8:	4610      	mov	r0, r2
 80098ca:	f7ff f897 	bl	80089fc <GUI_ALLOC_h2p>
 80098ce:	4680      	mov	r8, r0
 80098d0:	2200      	movs	r2, #0
 80098d2:	6a00      	ldr	r0, [r0, #32]
 80098d4:	4629      	mov	r1, r5
 80098d6:	f7ff fbb7 	bl	8009048 <_Findy1>
 80098da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80098de:	e7f2      	b.n	80098c6 <WM__GetNextIVR+0xb2>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	4629      	mov	r1, r5
 80098e4:	69d8      	ldr	r0, [r3, #28]
 80098e6:	f7ff fbaf 	bl	8009048 <_Findy1>
 80098ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80098ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098f6:	b16a      	cbz	r2, 8009914 <WM__GetNextIVR+0x100>
 80098f8:	4610      	mov	r0, r2
 80098fa:	f7ff f87f 	bl	80089fc <GUI_ALLOC_h2p>
 80098fe:	4629      	mov	r1, r5
 8009900:	4680      	mov	r8, r0
 8009902:	2200      	movs	r2, #0
 8009904:	6a00      	ldr	r0, [r0, #32]
 8009906:	f7ff fbf5 	bl	80090f4 <_Findx0>
 800990a:	2800      	cmp	r0, #0
 800990c:	d1ed      	bne.n	80098ea <WM__GetNextIVR+0xd6>
 800990e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009912:	e7f0      	b.n	80098f6 <WM__GetNextIVR+0xe2>
 8009914:	9b01      	ldr	r3, [sp, #4]
 8009916:	4629      	mov	r1, r5
 8009918:	69d8      	ldr	r0, [r3, #28]
 800991a:	f7ff fbeb 	bl	80090f4 <_Findx0>
 800991e:	2800      	cmp	r0, #0
 8009920:	d1e3      	bne.n	80098ea <WM__GetNextIVR+0xd6>
 8009922:	88a3      	ldrh	r3, [r4, #4]
 8009924:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009928:	f8ad 300c 	strh.w	r3, [sp, #12]
 800992c:	b21b      	sxth	r3, r3
 800992e:	429a      	cmp	r2, r3
 8009930:	dd07      	ble.n	8009942 <WM__GetNextIVR+0x12e>
 8009932:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009936:	e886 0003 	stmia.w	r6, {r0, r1}
 800993a:	a801      	add	r0, sp, #4
 800993c:	f7ff f876 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009940:	e797      	b.n	8009872 <WM__GetNextIVR+0x5e>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009946:	b152      	cbz	r2, 800995e <WM__GetNextIVR+0x14a>
 8009948:	4610      	mov	r0, r2
 800994a:	f7ff f857 	bl	80089fc <GUI_ALLOC_h2p>
 800994e:	4607      	mov	r7, r0
 8009950:	2200      	movs	r2, #0
 8009952:	6a00      	ldr	r0, [r0, #32]
 8009954:	4629      	mov	r1, r5
 8009956:	f7ff fc11 	bl	800917c <_Findx1>
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	e7f3      	b.n	8009946 <WM__GetNextIVR+0x132>
 800995e:	af04      	add	r7, sp, #16
 8009960:	4629      	mov	r1, r5
 8009962:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8009966:	69d8      	ldr	r0, [r3, #28]
 8009968:	f7ff fc08 	bl	800917c <_Findx1>
 800996c:	4638      	mov	r0, r7
 800996e:	f7ff f85d 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009978:	4293      	cmp	r3, r2
 800997a:	dc89      	bgt.n	8009890 <WM__GetNextIVR+0x7c>
 800997c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009980:	e886 0003 	stmia.w	r6, {r0, r1}
 8009984:	f7ff fce6 	bl	8009354 <WM__ActivateClipRect>
 8009988:	2001      	movs	r0, #1
 800998a:	b004      	add	sp, #16
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	20000044 	.word	0x20000044
 8009994:	200029bc 	.word	0x200029bc

08009998 <WM__InitIVRSearch>:
 8009998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999c:	4f39      	ldr	r7, [pc, #228]	; (8009a84 <WM__InitIVRSearch+0xec>)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80099a4:	b086      	sub	sp, #24
 80099a6:	4606      	mov	r6, r0
 80099a8:	b912      	cbnz	r2, 80099b0 <WM__InitIVRSearch+0x18>
 80099aa:	f7ff fcd3 	bl	8009354 <WM__ActivateClipRect>
 80099ae:	e064      	b.n	8009a7a <WM__InitIVRSearch+0xe2>
 80099b0:	4d35      	ldr	r5, [pc, #212]	; (8009a88 <WM__InitIVRSearch+0xf0>)
 80099b2:	696a      	ldr	r2, [r5, #20]
 80099b4:	3201      	adds	r2, #1
 80099b6:	2a01      	cmp	r2, #1
 80099b8:	616a      	str	r2, [r5, #20]
 80099ba:	462c      	mov	r4, r5
 80099bc:	dc5d      	bgt.n	8009a7a <WM__InitIVRSearch+0xe2>
 80099be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80099c0:	f7ff f826 	bl	8008a10 <GUI_ALLOC_LockH>
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	612a      	str	r2, [r5, #16]
 80099ca:	4a30      	ldr	r2, [pc, #192]	; (8009a8c <WM__InitIVRSearch+0xf4>)
 80099cc:	9000      	str	r0, [sp, #0]
 80099ce:	7812      	ldrb	r2, [r2, #0]
 80099d0:	b12a      	cbz	r2, 80099de <WM__InitIVRSearch+0x46>
 80099d2:	f100 0308 	add.w	r3, r0, #8
 80099d6:	aa02      	add	r2, sp, #8
 80099d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099dc:	e005      	b.n	80099ea <WM__InitIVRSearch+0x52>
 80099de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80099e0:	f012 0802 	ands.w	r8, r2, #2
 80099e4:	d00a      	beq.n	80099fc <WM__InitIVRSearch+0x64>
 80099e6:	c803      	ldmia	r0, {r0, r1}
 80099e8:	aa02      	add	r2, sp, #8
 80099ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80099ee:	ad02      	add	r5, sp, #8
 80099f0:	b166      	cbz	r6, 8009a0c <WM__InitIVRSearch+0x74>
 80099f2:	4628      	mov	r0, r5
 80099f4:	4631      	mov	r1, r6
 80099f6:	f7fd fcbd 	bl	8007374 <GUI__IntersectRect>
 80099fa:	e007      	b.n	8009a0c <WM__InitIVRSearch+0x74>
 80099fc:	696b      	ldr	r3, [r5, #20]
 80099fe:	4668      	mov	r0, sp
 8009a00:	3b01      	subs	r3, #1
 8009a02:	616b      	str	r3, [r5, #20]
 8009a04:	f7ff f812 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009a08:	4640      	mov	r0, r8
 8009a0a:	e037      	b.n	8009a7c <WM__InitIVRSearch+0xe4>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	4e20      	ldr	r6, [pc, #128]	; (8009a90 <WM__InitIVRSearch+0xf8>)
 8009a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a12:	b1c2      	cbz	r2, 8009a46 <WM__InitIVRSearch+0xae>
 8009a14:	9b00      	ldr	r3, [sp, #0]
 8009a16:	6810      	ldr	r0, [r2, #0]
 8009a18:	6851      	ldr	r1, [r2, #4]
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	ab04      	add	r3, sp, #16
 8009a1e:	c303      	stmia	r3!, {r0, r1}
 8009a20:	6833      	ldr	r3, [r6, #0]
 8009a22:	b133      	cbz	r3, 8009a32 <WM__InitIVRSearch+0x9a>
 8009a24:	a801      	add	r0, sp, #4
 8009a26:	f7ff f801 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009a2a:	6830      	ldr	r0, [r6, #0]
 8009a2c:	f7fe fff0 	bl	8008a10 <GUI_ALLOC_LockH>
 8009a30:	9001      	str	r0, [sp, #4]
 8009a32:	9801      	ldr	r0, [sp, #4]
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	f7ff fc5d 	bl	80092f4 <WM__Client2Screen>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	a904      	add	r1, sp, #16
 8009a3e:	f7fd fc99 	bl	8007374 <GUI__IntersectRect>
 8009a42:	a801      	add	r0, sp, #4
 8009a44:	e000      	b.n	8009a48 <WM__InitIVRSearch+0xb0>
 8009a46:	4668      	mov	r0, sp
 8009a48:	f7fe fff0 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009a4c:	6831      	ldr	r1, [r6, #0]
 8009a4e:	b119      	cbz	r1, 8009a58 <WM__InitIVRSearch+0xc0>
 8009a50:	4628      	mov	r0, r5
 8009a52:	f7ff fbcf 	bl	80091f4 <WM__ClipAtParentBorders>
 8009a56:	b128      	cbz	r0, 8009a64 <WM__InitIVRSearch+0xcc>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009a5e:	f7ff fbc9 	bl	80091f4 <WM__ClipAtParentBorders>
 8009a62:	b918      	cbnz	r0, 8009a6c <WM__InitIVRSearch+0xd4>
 8009a64:	6963      	ldr	r3, [r4, #20]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	6163      	str	r3, [r4, #20]
 8009a6a:	e007      	b.n	8009a7c <WM__InitIVRSearch+0xe4>
 8009a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a70:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a74:	f7ff fece 	bl	8009814 <WM__GetNextIVR>
 8009a78:	e000      	b.n	8009a7c <WM__InitIVRSearch+0xe4>
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	b006      	add	sp, #24
 8009a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a82:	bf00      	nop
 8009a84:	20000044 	.word	0x20000044
 8009a88:	200029bc 	.word	0x200029bc
 8009a8c:	200038ec 	.word	0x200038ec
 8009a90:	200038bc 	.word	0x200038bc

08009a94 <WM_Activate>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <WM_Activate+0xc>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009a9e:	4770      	bx	lr
 8009aa0:	20000044 	.word	0x20000044

08009aa4 <WM_DefaultProc>:
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	6840      	ldr	r0, [r0, #4]
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	68e1      	ldr	r1, [r4, #12]
 8009aae:	2b17      	cmp	r3, #23
 8009ab0:	d00f      	beq.n	8009ad2 <WM_DefaultProc+0x2e>
 8009ab2:	dc06      	bgt.n	8009ac2 <WM_DefaultProc+0x1e>
 8009ab4:	2b0e      	cmp	r3, #14
 8009ab6:	d00e      	beq.n	8009ad6 <WM_DefaultProc+0x32>
 8009ab8:	2b14      	cmp	r3, #20
 8009aba:	d114      	bne.n	8009ae6 <WM_DefaultProc+0x42>
 8009abc:	f001 fbcc 	bl	800b258 <WM__GetClientRectEx>
 8009ac0:	e011      	b.n	8009ae6 <WM_DefaultProc+0x42>
 8009ac2:	2b22      	cmp	r3, #34	; 0x22
 8009ac4:	d00c      	beq.n	8009ae0 <WM_DefaultProc+0x3c>
 8009ac6:	2b28      	cmp	r3, #40	; 0x28
 8009ac8:	d10d      	bne.n	8009ae6 <WM_DefaultProc+0x42>
 8009aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ace:	f7ff bdc9 	b.w	8009664 <WM_InvalidateWindow>
 8009ad2:	60e0      	str	r0, [r4, #12]
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009adc:	f7ff ba4f 	b.w	8008f7e <WM_SendToParent>
 8009ae0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009ae4:	e000      	b.n	8009ae8 <WM_DefaultProc+0x44>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60e3      	str	r3, [r4, #12]
 8009aea:	bd10      	pop	{r4, pc}

08009aec <_cbBackWin>:
 8009aec:	6803      	ldr	r3, [r0, #0]
 8009aee:	2b0e      	cmp	r3, #14
 8009af0:	b510      	push	{r4, lr}
 8009af2:	4604      	mov	r4, r0
 8009af4:	d002      	beq.n	8009afc <_cbBackWin+0x10>
 8009af6:	2b0f      	cmp	r3, #15
 8009af8:	d009      	beq.n	8009b0e <_cbBackWin+0x22>
 8009afa:	e020      	b.n	8009b3e <_cbBackWin+0x52>
 8009afc:	68c3      	ldr	r3, [r0, #12]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	2a01      	cmp	r2, #1
 8009b02:	d121      	bne.n	8009b48 <_cbBackWin+0x5c>
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b0a:	f001 baf3 	b.w	800b0f4 <GUI_StoreKey>
 8009b0e:	4a0f      	ldr	r2, [pc, #60]	; (8009b4c <_cbBackWin+0x60>)
 8009b10:	6843      	ldr	r3, [r0, #4]
 8009b12:	6811      	ldr	r1, [r2, #0]
 8009b14:	428b      	cmp	r3, r1
 8009b16:	d006      	beq.n	8009b26 <_cbBackWin+0x3a>
 8009b18:	6852      	ldr	r2, [r2, #4]
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	bf14      	ite	ne
 8009b1e:	f04f 33ff 	movne.w	r3, #4294967295
 8009b22:	2301      	moveq	r3, #1
 8009b24:	e000      	b.n	8009b28 <_cbBackWin+0x3c>
 8009b26:	2300      	movs	r3, #0
 8009b28:	4a09      	ldr	r2, [pc, #36]	; (8009b50 <_cbBackWin+0x64>)
 8009b2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009b2e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009b32:	4298      	cmp	r0, r3
 8009b34:	d003      	beq.n	8009b3e <_cbBackWin+0x52>
 8009b36:	f7fd ff2b 	bl	8007990 <GUI_SetBkColor>
 8009b3a:	f7fd fdfb 	bl	8007734 <GUI_Clear>
 8009b3e:	4620      	mov	r0, r4
 8009b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b44:	f7ff bfae 	b.w	8009aa4 <WM_DefaultProc>
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200038c0 	.word	0x200038c0
 8009b50:	200038f4 	.word	0x200038f4

08009b54 <WM_Init>:
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	4b2b      	ldr	r3, [pc, #172]	; (8009c04 <WM_Init+0xb0>)
 8009b58:	7818      	ldrb	r0, [r3, #0]
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	461d      	mov	r5, r3
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d14d      	bne.n	8009bfe <WM_Init+0xaa>
 8009b62:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <WM_Init+0xb4>)
 8009b64:	6018      	str	r0, [r3, #0]
 8009b66:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <WM_Init+0xb8>)
 8009b68:	6018      	str	r0, [r3, #0]
 8009b6a:	4b29      	ldr	r3, [pc, #164]	; (8009c10 <WM_Init+0xbc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6458      	str	r0, [r3, #68]	; 0x44
 8009b70:	4b28      	ldr	r3, [pc, #160]	; (8009c14 <WM_Init+0xc0>)
 8009b72:	8018      	strh	r0, [r3, #0]
 8009b74:	4b28      	ldr	r3, [pc, #160]	; (8009c18 <WM_Init+0xc4>)
 8009b76:	4604      	mov	r4, r0
 8009b78:	8018      	strh	r0, [r3, #0]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7fd fc90 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 8009b80:	b1c0      	cbz	r0, 8009bb4 <WM_Init+0x60>
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295
 8009b86:	2302      	movs	r3, #2
 8009b88:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009b92:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <WM_Init+0xc8>)
 8009b94:	9302      	str	r3, [sp, #8]
 8009b96:	9003      	str	r0, [sp, #12]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	f7ff fd90 	bl	80096c0 <WM_CreateWindowAsChild>
 8009ba0:	4b1f      	ldr	r3, [pc, #124]	; (8009c20 <WM_Init+0xcc>)
 8009ba2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009ba6:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <WM_Init+0xd0>)
 8009ba8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009bac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009bb0:	f7ff fd58 	bl	8009664 <WM_InvalidateWindow>
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	2c02      	cmp	r4, #2
 8009bb8:	d1df      	bne.n	8009b7a <WM_Init+0x26>
 8009bba:	481b      	ldr	r0, [pc, #108]	; (8009c28 <WM_Init+0xd4>)
 8009bbc:	f001 fb44 	bl	800b248 <WM__AddCriticalHandle>
 8009bc0:	481a      	ldr	r0, [pc, #104]	; (8009c2c <WM_Init+0xd8>)
 8009bc2:	f001 fb41 	bl	800b248 <WM__AddCriticalHandle>
 8009bc6:	481a      	ldr	r0, [pc, #104]	; (8009c30 <WM_Init+0xdc>)
 8009bc8:	f001 fb3e 	bl	800b248 <WM__AddCriticalHandle>
 8009bcc:	4819      	ldr	r0, [pc, #100]	; (8009c34 <WM_Init+0xe0>)
 8009bce:	f001 fb3b 	bl	800b248 <WM__AddCriticalHandle>
 8009bd2:	4819      	ldr	r0, [pc, #100]	; (8009c38 <WM_Init+0xe4>)
 8009bd4:	f001 fb38 	bl	800b248 <WM__AddCriticalHandle>
 8009bd8:	4818      	ldr	r0, [pc, #96]	; (8009c3c <WM_Init+0xe8>)
 8009bda:	f001 fb35 	bl	800b248 <WM__AddCriticalHandle>
 8009bde:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <WM_Init+0xcc>)
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	f7ff fd4d 	bl	8009680 <WM_SelectWindow>
 8009be6:	f7ff ff55 	bl	8009a94 <WM_Activate>
 8009bea:	2301      	movs	r3, #1
 8009bec:	702b      	strb	r3, [r5, #0]
 8009bee:	4814      	ldr	r0, [pc, #80]	; (8009c40 <WM_Init+0xec>)
 8009bf0:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <WM_Init+0xf0>)
 8009bf2:	6003      	str	r3, [r0, #0]
 8009bf4:	b005      	add	sp, #20
 8009bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bfa:	f7fd bdab 	b.w	8007754 <GUI__RegisterExit>
 8009bfe:	b005      	add	sp, #20
 8009c00:	bd30      	pop	{r4, r5, pc}
 8009c02:	bf00      	nop
 8009c04:	200029d8 	.word	0x200029d8
 8009c08:	200038dc 	.word	0x200038dc
 8009c0c:	200029d4 	.word	0x200029d4
 8009c10:	20000044 	.word	0x20000044
 8009c14:	200038d8 	.word	0x200038d8
 8009c18:	200038b8 	.word	0x200038b8
 8009c1c:	08009aed 	.word	0x08009aed
 8009c20:	200038c0 	.word	0x200038c0
 8009c24:	200038f4 	.word	0x200038f4
 8009c28:	20003938 	.word	0x20003938
 8009c2c:	20003928 	.word	0x20003928
 8009c30:	20003918 	.word	0x20003918
 8009c34:	20003940 	.word	0x20003940
 8009c38:	20003930 	.word	0x20003930
 8009c3c:	20003920 	.word	0x20003920
 8009c40:	200029b0 	.word	0x200029b0
 8009c44:	08008f9d 	.word	0x08008f9d

08009c48 <GUI_MEMDEV_GetDataPtr>:
 8009c48:	b513      	push	{r0, r1, r4, lr}
 8009c4a:	b150      	cbz	r0, 8009c62 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009c4c:	f7fe fee0 	bl	8008a10 <GUI_ALLOC_LockH>
 8009c50:	4604      	mov	r4, r0
 8009c52:	a802      	add	r0, sp, #8
 8009c54:	f840 4d04 	str.w	r4, [r0, #-4]!
 8009c58:	f7fe fee8 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009c5c:	f104 0018 	add.w	r0, r4, #24
 8009c60:	e7ff      	b.n	8009c62 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009c62:	b002      	add	sp, #8
 8009c64:	bd10      	pop	{r4, pc}
	...

08009c68 <_GetDevData>:
 8009c68:	4802      	ldr	r0, [pc, #8]	; (8009c74 <_GetDevData+0xc>)
 8009c6a:	2901      	cmp	r1, #1
 8009c6c:	bf18      	it	ne
 8009c6e:	2000      	movne	r0, #0
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	0800c974 	.word	0x0800c974

08009c78 <_GetDevFunc>:
 8009c78:	4802      	ldr	r0, [pc, #8]	; (8009c84 <_GetDevFunc+0xc>)
 8009c7a:	2916      	cmp	r1, #22
 8009c7c:	bf18      	it	ne
 8009c7e:	2000      	movne	r0, #0
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	0800b2fd 	.word	0x0800b2fd

08009c88 <_SetOrg>:
 8009c88:	6800      	ldr	r0, [r0, #0]
 8009c8a:	b508      	push	{r3, lr}
 8009c8c:	b110      	cbz	r0, 8009c94 <_SetOrg+0xc>
 8009c8e:	68c3      	ldr	r3, [r0, #12]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	4798      	blx	r3
 8009c94:	bd08      	pop	{r3, pc}

08009c96 <_GetRect>:
 8009c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c98:	6880      	ldr	r0, [r0, #8]
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f7fe feb8 	bl	8008a10 <GUI_ALLOC_LockH>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	a802      	add	r0, sp, #8
 8009ca4:	8899      	ldrh	r1, [r3, #4]
 8009ca6:	88da      	ldrh	r2, [r3, #6]
 8009ca8:	891d      	ldrh	r5, [r3, #8]
 8009caa:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009cae:	895b      	ldrh	r3, [r3, #10]
 8009cb0:	8021      	strh	r1, [r4, #0]
 8009cb2:	8062      	strh	r2, [r4, #2]
 8009cb4:	4429      	add	r1, r5
 8009cb6:	441a      	add	r2, r3
 8009cb8:	3901      	subs	r1, #1
 8009cba:	3a01      	subs	r2, #1
 8009cbc:	80a1      	strh	r1, [r4, #4]
 8009cbe:	80e2      	strh	r2, [r4, #6]
 8009cc0:	f7fe feb4 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009cc4:	b003      	add	sp, #12
 8009cc6:	bd30      	pop	{r4, r5, pc}

08009cc8 <_XY2PTR>:
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <_XY2PTR+0x3c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cce:	4605      	mov	r5, r0
 8009cd0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009cd2:	460e      	mov	r6, r1
 8009cd4:	f7fe fe9c 	bl	8008a10 <GUI_ALLOC_LockH>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	a802      	add	r0, sp, #8
 8009cdc:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8009ce0:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009ce4:	f103 0118 	add.w	r1, r3, #24
 8009ce8:	1b36      	subs	r6, r6, r4
 8009cea:	68dc      	ldr	r4, [r3, #12]
 8009cec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009cf0:	fb04 1406 	mla	r4, r4, r6, r1
 8009cf4:	1aed      	subs	r5, r5, r3
 8009cf6:	f7fe fe99 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009cfa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009cfe:	4620      	mov	r0, r4
 8009d00:	b002      	add	sp, #8
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	20000044 	.word	0x20000044

08009d08 <_GetPixelIndex>:
 8009d08:	b508      	push	{r3, lr}
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	f7ff ffdb 	bl	8009cc8 <_XY2PTR>
 8009d12:	8800      	ldrh	r0, [r0, #0]
 8009d14:	bd08      	pop	{r3, pc}
	...

08009d18 <_XorPixel>:
 8009d18:	4b14      	ldr	r3, [pc, #80]	; (8009d6c <_XorPixel+0x54>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d1e:	4607      	mov	r7, r0
 8009d20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009d22:	4615      	mov	r5, r2
 8009d24:	460e      	mov	r6, r1
 8009d26:	f7fe fe73 	bl	8008a10 <GUI_ALLOC_LockH>
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	9000      	str	r0, [sp, #0]
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7ff ffca 	bl	8009cc8 <_XY2PTR>
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4604      	mov	r4, r0
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	4798      	blx	r3
 8009d3c:	8823      	ldrh	r3, [r4, #0]
 8009d3e:	4058      	eors	r0, r3
 8009d40:	9b00      	ldr	r3, [sp, #0]
 8009d42:	8020      	strh	r0, [r4, #0]
 8009d44:	6958      	ldr	r0, [r3, #20]
 8009d46:	b160      	cbz	r0, 8009d62 <_XorPixel+0x4a>
 8009d48:	f7fe fe62 	bl	8008a10 <GUI_ALLOC_LockH>
 8009d4c:	ac02      	add	r4, sp, #8
 8009d4e:	6883      	ldr	r3, [r0, #8]
 8009d50:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4631      	mov	r1, r6
 8009d58:	462a      	mov	r2, r5
 8009d5a:	4798      	blx	r3
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7fe fe65 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009d62:	4668      	mov	r0, sp
 8009d64:	f7fe fe62 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009d68:	b003      	add	sp, #12
 8009d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6c:	20000044 	.word	0x20000044

08009d70 <_SetPixelIndex>:
 8009d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d72:	461c      	mov	r4, r3
 8009d74:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <_SetPixelIndex+0x48>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009d7a:	460e      	mov	r6, r1
 8009d7c:	4615      	mov	r5, r2
 8009d7e:	f7fe fe47 	bl	8008a10 <GUI_ALLOC_LockH>
 8009d82:	4629      	mov	r1, r5
 8009d84:	9000      	str	r0, [sp, #0]
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7ff ff9e 	bl	8009cc8 <_XY2PTR>
 8009d8c:	9b00      	ldr	r3, [sp, #0]
 8009d8e:	8004      	strh	r4, [r0, #0]
 8009d90:	6958      	ldr	r0, [r3, #20]
 8009d92:	b160      	cbz	r0, 8009dae <_SetPixelIndex+0x3e>
 8009d94:	f7fe fe3c 	bl	8008a10 <GUI_ALLOC_LockH>
 8009d98:	ac02      	add	r4, sp, #8
 8009d9a:	6883      	ldr	r3, [r0, #8]
 8009d9c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4631      	mov	r1, r6
 8009da4:	462a      	mov	r2, r5
 8009da6:	4798      	blx	r3
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7fe fe3f 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009dae:	4668      	mov	r0, sp
 8009db0:	f7fe fe3c 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009db4:	b002      	add	sp, #8
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	20000044 	.word	0x20000044

08009dbc <_DrawVLine>:
 8009dbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	4d2c      	ldr	r5, [pc, #176]	; (8009e74 <_DrawVLine+0xb8>)
 8009dc2:	461e      	mov	r6, r3
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	4681      	mov	r9, r0
 8009dc8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009dca:	460f      	mov	r7, r1
 8009dcc:	4614      	mov	r4, r2
 8009dce:	f7fe fe1f 	bl	8008a10 <GUI_ALLOC_LockH>
 8009dd2:	9000      	str	r0, [sp, #0]
 8009dd4:	6940      	ldr	r0, [r0, #20]
 8009dd6:	46aa      	mov	sl, r5
 8009dd8:	b108      	cbz	r0, 8009dde <_DrawVLine+0x22>
 8009dda:	f7fe fe19 	bl	8008a10 <GUI_ALLOC_LockH>
 8009dde:	9001      	str	r0, [sp, #4]
 8009de0:	4621      	mov	r1, r4
 8009de2:	4638      	mov	r0, r7
 8009de4:	f7ff ff70 	bl	8009cc8 <_XY2PTR>
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009dee:	f8da 3000 	ldr.w	r3, [sl]
 8009df2:	7c1a      	ldrb	r2, [r3, #16]
 8009df4:	07d2      	lsls	r2, r2, #31
 8009df6:	4605      	mov	r5, r0
 8009df8:	d51f      	bpl.n	8009e3a <_DrawVLine+0x7e>
 8009dfa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	4798      	blx	r3
 8009e02:	fa1f f880 	uxth.w	r8, r0
 8009e06:	9801      	ldr	r0, [sp, #4]
 8009e08:	b120      	cbz	r0, 8009e14 <_DrawVLine+0x58>
 8009e0a:	6883      	ldr	r3, [r0, #8]
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4622      	mov	r2, r4
 8009e12:	4798      	blx	r3
 8009e14:	882b      	ldrh	r3, [r5, #0]
 8009e16:	ea88 0303 	eor.w	r3, r8, r3
 8009e1a:	802b      	strh	r3, [r5, #0]
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	3401      	adds	r4, #1
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	42b4      	cmp	r4, r6
 8009e24:	441d      	add	r5, r3
 8009e26:	ddee      	ble.n	8009e06 <_DrawVLine+0x4a>
 8009e28:	4668      	mov	r0, sp
 8009e2a:	f7fe fdff 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	b1eb      	cbz	r3, 8009e6e <_DrawVLine+0xb2>
 8009e32:	a801      	add	r0, sp, #4
 8009e34:	f7fe fdfa 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009e38:	e019      	b.n	8009e6e <_DrawVLine+0xb2>
 8009e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3c:	f8d3 9000 	ldr.w	r9, [r3]
 8009e40:	9b01      	ldr	r3, [sp, #4]
 8009e42:	b163      	cbz	r3, 8009e5e <_DrawVLine+0xa2>
 8009e44:	9801      	ldr	r0, [sp, #4]
 8009e46:	6883      	ldr	r3, [r0, #8]
 8009e48:	4622      	mov	r2, r4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	3401      	adds	r4, #1
 8009e50:	4798      	blx	r3
 8009e52:	42b4      	cmp	r4, r6
 8009e54:	f8a5 9000 	strh.w	r9, [r5]
 8009e58:	4445      	add	r5, r8
 8009e5a:	ddf3      	ble.n	8009e44 <_DrawVLine+0x88>
 8009e5c:	e7e4      	b.n	8009e28 <_DrawVLine+0x6c>
 8009e5e:	1b34      	subs	r4, r6, r4
 8009e60:	3401      	adds	r4, #1
 8009e62:	3c01      	subs	r4, #1
 8009e64:	f8a5 9000 	strh.w	r9, [r5]
 8009e68:	4445      	add	r5, r8
 8009e6a:	d1fa      	bne.n	8009e62 <_DrawVLine+0xa6>
 8009e6c:	e7dc      	b.n	8009e28 <_DrawVLine+0x6c>
 8009e6e:	b002      	add	sp, #8
 8009e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e74:	20000044 	.word	0x20000044

08009e78 <_FillRect>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	4f2a      	ldr	r7, [pc, #168]	; (8009f28 <_FillRect+0xb0>)
 8009e7e:	4614      	mov	r4, r2
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	4698      	mov	r8, r3
 8009e84:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009e86:	b087      	sub	sp, #28
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	9302      	str	r3, [sp, #8]
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8009e90:	460e      	mov	r6, r1
 8009e92:	f7fe fdbd 	bl	8008a10 <GUI_ALLOC_LockH>
 8009e96:	4621      	mov	r1, r4
 8009e98:	9004      	str	r0, [sp, #16]
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f7ff ff14 	bl	8009cc8 <_XY2PTR>
 8009ea0:	9a04      	ldr	r2, [sp, #16]
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	6950      	ldr	r0, [r2, #20]
 8009ea6:	68d3      	ldr	r3, [r2, #12]
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	ebc6 0908 	rsb	r9, r6, r8
 8009eae:	f109 0801 	add.w	r8, r9, #1
 8009eb2:	46bb      	mov	fp, r7
 8009eb4:	b180      	cbz	r0, 8009ed8 <_FillRect+0x60>
 8009eb6:	f7fe fdab 	bl	8008a10 <GUI_ALLOC_LockH>
 8009eba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ebc:	af06      	add	r7, sp, #24
 8009ebe:	1b13      	subs	r3, r2, r4
 8009ec0:	f847 0d04 	str.w	r0, [r7, #-4]!
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4643      	mov	r3, r8
 8009ece:	f001 fdbb 	bl	800ba48 <GUI_USAGE_AddRect>
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f7fe fdaa 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009ed8:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8009edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ede:	429c      	cmp	r4, r3
 8009ee0:	dc1c      	bgt.n	8009f1c <_FillRect+0xa4>
 8009ee2:	f8db 3000 	ldr.w	r3, [fp]
 8009ee6:	7c1b      	ldrb	r3, [r3, #16]
 8009ee8:	07db      	lsls	r3, r3, #31
 8009eea:	d50d      	bpl.n	8009f08 <_FillRect+0x90>
 8009eec:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	4798      	blx	r3
 8009ef4:	19aa      	adds	r2, r5, r6
 8009ef6:	b280      	uxth	r0, r0
 8009ef8:	1eab      	subs	r3, r5, #2
 8009efa:	8859      	ldrh	r1, [r3, #2]
 8009efc:	4041      	eors	r1, r0
 8009efe:	f823 1f02 	strh.w	r1, [r3, #2]!
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d1f9      	bne.n	8009efa <_FillRect+0x82>
 8009f06:	e005      	b.n	8009f14 <_FillRect+0x9c>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	b299      	uxth	r1, r3
 8009f0e:	4642      	mov	r2, r8
 8009f10:	f7fd fa80 	bl	8007414 <GUI__memset16>
 8009f14:	9a03      	ldr	r2, [sp, #12]
 8009f16:	3401      	adds	r4, #1
 8009f18:	4415      	add	r5, r2
 8009f1a:	e7df      	b.n	8009edc <_FillRect+0x64>
 8009f1c:	a804      	add	r0, sp, #16
 8009f1e:	f7fe fd85 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009f22:	b007      	add	sp, #28
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	20000044 	.word	0x20000044

08009f2c <_DrawHLine>:
 8009f2c:	b507      	push	{r0, r1, r2, lr}
 8009f2e:	9200      	str	r2, [sp, #0]
 8009f30:	f7ff ffa2 	bl	8009e78 <_FillRect>
 8009f34:	b003      	add	sp, #12
 8009f36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009f3c <_DrawBitmap>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	4c8b      	ldr	r4, [pc, #556]	; (800a170 <_DrawBitmap+0x234>)
 8009f42:	b093      	sub	sp, #76	; 0x4c
 8009f44:	469b      	mov	fp, r3
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	900d      	str	r0, [sp, #52]	; 0x34
 8009f4a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009f4c:	9207      	str	r2, [sp, #28]
 8009f4e:	460d      	mov	r5, r1
 8009f50:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8009f54:	f7fe fd5c 	bl	8008a10 <GUI_ALLOC_LockH>
 8009f58:	9010      	str	r0, [sp, #64]	; 0x40
 8009f5a:	6940      	ldr	r0, [r0, #20]
 8009f5c:	b108      	cbz	r0, 8009f62 <_DrawBitmap+0x26>
 8009f5e:	f7fe fd57 	bl	8008a10 <GUI_ALLOC_LockH>
 8009f62:	9011      	str	r0, [sp, #68]	; 0x44
 8009f64:	a812      	add	r0, sp, #72	; 0x48
 8009f66:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	9308      	str	r3, [sp, #32]
 8009f6e:	f7fe fd5d 	bl	8008a2c <GUI_ALLOC_UnlockH>
 8009f72:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8009f74:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009f76:	442e      	add	r6, r5
 8009f78:	9604      	str	r6, [sp, #16]
 8009f7a:	b150      	cbz	r0, 8009f92 <_DrawBitmap+0x56>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	7c1b      	ldrb	r3, [r3, #16]
 8009f80:	0799      	lsls	r1, r3, #30
 8009f82:	d106      	bne.n	8009f92 <_DrawBitmap+0x56>
 8009f84:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009f86:	9700      	str	r7, [sp, #0]
 8009f88:	4631      	mov	r1, r6
 8009f8a:	9a07      	ldr	r2, [sp, #28]
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	f001 fd5b 	bl	800ba48 <GUI_USAGE_AddRect>
 8009f92:	9804      	ldr	r0, [sp, #16]
 8009f94:	9907      	ldr	r1, [sp, #28]
 8009f96:	f7ff fe97 	bl	8009cc8 <_XY2PTR>
 8009f9a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009f9c:	2e10      	cmp	r6, #16
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	d13a      	bne.n	800a018 <_DrawBitmap+0xdc>
 8009fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fa4:	b11b      	cbz	r3, 8009fae <_DrawBitmap+0x72>
 8009fa6:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8009faa:	2500      	movs	r5, #0
 8009fac:	e014      	b.n	8009fd8 <_DrawBitmap+0x9c>
 8009fae:	4b71      	ldr	r3, [pc, #452]	; (800a174 <_DrawBitmap+0x238>)
 8009fb0:	681d      	ldr	r5, [r3, #0]
 8009fb2:	2d00      	cmp	r5, #0
 8009fb4:	d0f7      	beq.n	8009fa6 <_DrawBitmap+0x6a>
 8009fb6:	9e08      	ldr	r6, [sp, #32]
 8009fb8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009fba:	9600      	str	r6, [sp, #0]
 8009fbc:	9701      	str	r7, [sp, #4]
 8009fbe:	4651      	mov	r1, sl
 8009fc0:	465a      	mov	r2, fp
 8009fc2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009fc4:	47a8      	blx	r5
 8009fc6:	e349      	b.n	800a65c <_DrawBitmap+0x720>
 8009fc8:	f1ba 0f00 	cmp.w	sl, #0
 8009fcc:	d10a      	bne.n	8009fe4 <_DrawBitmap+0xa8>
 8009fce:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009fd0:	44ba      	add	sl, r7
 8009fd2:	9f08      	ldr	r7, [sp, #32]
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	443c      	add	r4, r7
 8009fd8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009fda:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8009fde:	42bd      	cmp	r5, r7
 8009fe0:	dbf2      	blt.n	8009fc8 <_DrawBitmap+0x8c>
 8009fe2:	e014      	b.n	800a00e <_DrawBitmap+0xd2>
 8009fe4:	2c00      	cmp	r4, #0
 8009fe6:	d0f2      	beq.n	8009fce <_DrawBitmap+0x92>
 8009fe8:	4b63      	ldr	r3, [pc, #396]	; (800a178 <_DrawBitmap+0x23c>)
 8009fea:	4620      	mov	r0, r4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4651      	mov	r1, sl
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	4798      	blx	r3
 8009ff4:	f1b8 0f00 	cmp.w	r8, #0
 8009ff8:	d0e9      	beq.n	8009fce <_DrawBitmap+0x92>
 8009ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ffe:	9a07      	ldr	r2, [sp, #28]
 800a000:	685f      	ldr	r7, [r3, #4]
 800a002:	9904      	ldr	r1, [sp, #16]
 800a004:	4640      	mov	r0, r8
 800a006:	442a      	add	r2, r5
 800a008:	465b      	mov	r3, fp
 800a00a:	47b8      	blx	r7
 800a00c:	e7df      	b.n	8009fce <_DrawBitmap+0x92>
 800a00e:	f1b8 0f00 	cmp.w	r8, #0
 800a012:	f040 8320 	bne.w	800a656 <_DrawBitmap+0x71a>
 800a016:	e321      	b.n	800a65c <_DrawBitmap+0x720>
 800a018:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a01a:	2e17      	cmp	r6, #23
 800a01c:	dd38      	ble.n	800a090 <_DrawBitmap+0x154>
 800a01e:	2600      	movs	r6, #0
 800a020:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a022:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a024:	42be      	cmp	r6, r7
 800a026:	f280 809e 	bge.w	800a166 <_DrawBitmap+0x22a>
 800a02a:	9f07      	ldr	r7, [sp, #28]
 800a02c:	4437      	add	r7, r6
 800a02e:	f1ba 0f00 	cmp.w	sl, #0
 800a032:	d027      	beq.n	800a084 <_DrawBitmap+0x148>
 800a034:	b334      	cbz	r4, 800a084 <_DrawBitmap+0x148>
 800a036:	b13d      	cbz	r5, 800a048 <_DrawBitmap+0x10c>
 800a038:	68ab      	ldr	r3, [r5, #8]
 800a03a:	9904      	ldr	r1, [sp, #16]
 800a03c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a040:	4628      	mov	r0, r5
 800a042:	463a      	mov	r2, r7
 800a044:	465b      	mov	r3, fp
 800a046:	47e0      	blx	ip
 800a048:	1ea3      	subs	r3, r4, #2
 800a04a:	f1aa 0904 	sub.w	r9, sl, #4
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	46d8      	mov	r8, fp
 800a052:	9b04      	ldr	r3, [sp, #16]
 800a054:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a056:	445b      	add	r3, fp
 800a058:	ebc8 0103 	rsb	r1, r8, r3
 800a05c:	6903      	ldr	r3, [r0, #16]
 800a05e:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	9102      	str	r1, [sp, #8]
 800a066:	4798      	blx	r3
 800a068:	9b03      	ldr	r3, [sp, #12]
 800a06a:	9902      	ldr	r1, [sp, #8]
 800a06c:	f823 0f02 	strh.w	r0, [r3, #2]!
 800a070:	9303      	str	r3, [sp, #12]
 800a072:	b125      	cbz	r5, 800a07e <_DrawBitmap+0x142>
 800a074:	68ab      	ldr	r3, [r5, #8]
 800a076:	4628      	mov	r0, r5
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	463a      	mov	r2, r7
 800a07c:	4798      	blx	r3
 800a07e:	f1b8 0801 	subs.w	r8, r8, #1
 800a082:	d1e6      	bne.n	800a052 <_DrawBitmap+0x116>
 800a084:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a086:	44ba      	add	sl, r7
 800a088:	9f08      	ldr	r7, [sp, #32]
 800a08a:	3601      	adds	r6, #1
 800a08c:	443c      	add	r4, r7
 800a08e:	e7c7      	b.n	800a020 <_DrawBitmap+0xe4>
 800a090:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a092:	2e08      	cmp	r6, #8
 800a094:	f100 0402 	add.w	r4, r0, #2
 800a098:	d170      	bne.n	800a17c <_DrawBitmap+0x240>
 800a09a:	9e07      	ldr	r6, [sp, #28]
 800a09c:	9f07      	ldr	r7, [sp, #28]
 800a09e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a0a0:	1bf3      	subs	r3, r6, r7
 800a0a2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a0a4:	42bb      	cmp	r3, r7
 800a0a6:	f1a4 0002 	sub.w	r0, r4, #2
 800a0aa:	da5c      	bge.n	800a166 <_DrawBitmap+0x22a>
 800a0ac:	4b30      	ldr	r3, [pc, #192]	; (800a170 <_DrawBitmap+0x234>)
 800a0ae:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	7c1b      	ldrb	r3, [r3, #16]
 800a0b4:	b367      	cbz	r7, 800a110 <_DrawBitmap+0x1d4>
 800a0b6:	f013 0303 	ands.w	r3, r3, #3
 800a0ba:	d004      	beq.n	800a0c6 <_DrawBitmap+0x18a>
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d14c      	bne.n	800a15a <_DrawBitmap+0x21e>
 800a0c0:	46a0      	mov	r8, r4
 800a0c2:	9f04      	ldr	r7, [sp, #16]
 800a0c4:	e01d      	b.n	800a102 <_DrawBitmap+0x1c6>
 800a0c6:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a0ca:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a0cc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a0d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	455b      	cmp	r3, fp
 800a0d8:	d1f5      	bne.n	800a0c6 <_DrawBitmap+0x18a>
 800a0da:	e03e      	b.n	800a15a <_DrawBitmap+0x21e>
 800a0dc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a0de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a0e2:	f828 3c02 	strh.w	r3, [r8, #-2]
 800a0e6:	b12d      	cbz	r5, 800a0f4 <_DrawBitmap+0x1b8>
 800a0e8:	68ab      	ldr	r3, [r5, #8]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	4798      	blx	r3
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	3701      	adds	r7, #1
 800a0f8:	445b      	add	r3, fp
 800a0fa:	42bb      	cmp	r3, r7
 800a0fc:	f108 0802 	add.w	r8, r8, #2
 800a100:	d02b      	beq.n	800a15a <_DrawBitmap+0x21e>
 800a102:	9804      	ldr	r0, [sp, #16]
 800a104:	ebc0 030a 	rsb	r3, r0, sl
 800a108:	5ddb      	ldrb	r3, [r3, r7]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0f2      	beq.n	800a0f4 <_DrawBitmap+0x1b8>
 800a10e:	e7e5      	b.n	800a0dc <_DrawBitmap+0x1a0>
 800a110:	f013 0303 	ands.w	r3, r3, #3
 800a114:	d004      	beq.n	800a120 <_DrawBitmap+0x1e4>
 800a116:	2b02      	cmp	r3, #2
 800a118:	d11f      	bne.n	800a15a <_DrawBitmap+0x21e>
 800a11a:	46a0      	mov	r8, r4
 800a11c:	9f04      	ldr	r7, [sp, #16]
 800a11e:	e015      	b.n	800a14c <_DrawBitmap+0x210>
 800a120:	4b15      	ldr	r3, [pc, #84]	; (800a178 <_DrawBitmap+0x23c>)
 800a122:	4651      	mov	r1, sl
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	465a      	mov	r2, fp
 800a128:	4798      	blx	r3
 800a12a:	e016      	b.n	800a15a <_DrawBitmap+0x21e>
 800a12c:	f828 3c02 	strh.w	r3, [r8, #-2]
 800a130:	b12d      	cbz	r5, 800a13e <_DrawBitmap+0x202>
 800a132:	68ab      	ldr	r3, [r5, #8]
 800a134:	4628      	mov	r0, r5
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4639      	mov	r1, r7
 800a13a:	4632      	mov	r2, r6
 800a13c:	4798      	blx	r3
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	3701      	adds	r7, #1
 800a142:	445b      	add	r3, fp
 800a144:	42bb      	cmp	r3, r7
 800a146:	f108 0802 	add.w	r8, r8, #2
 800a14a:	d006      	beq.n	800a15a <_DrawBitmap+0x21e>
 800a14c:	9a04      	ldr	r2, [sp, #16]
 800a14e:	ebc2 030a 	rsb	r3, r2, sl
 800a152:	5ddb      	ldrb	r3, [r3, r7]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0f2      	beq.n	800a13e <_DrawBitmap+0x202>
 800a158:	e7e8      	b.n	800a12c <_DrawBitmap+0x1f0>
 800a15a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a15c:	44ba      	add	sl, r7
 800a15e:	9f08      	ldr	r7, [sp, #32]
 800a160:	3601      	adds	r6, #1
 800a162:	443c      	add	r4, r7
 800a164:	e79a      	b.n	800a09c <_DrawBitmap+0x160>
 800a166:	2d00      	cmp	r5, #0
 800a168:	f040 8275 	bne.w	800a656 <_DrawBitmap+0x71a>
 800a16c:	e276      	b.n	800a65c <_DrawBitmap+0x720>
 800a16e:	bf00      	nop
 800a170:	20000044 	.word	0x20000044
 800a174:	200029dc 	.word	0x200029dc
 800a178:	20000040 	.word	0x20000040
 800a17c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800a17e:	4bab      	ldr	r3, [pc, #684]	; (800a42c <_DrawBitmap+0x4f0>)
 800a180:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800a182:	9409      	str	r4, [sp, #36]	; 0x24
 800a184:	2e00      	cmp	r6, #0
 800a186:	bf08      	it	eq
 800a188:	461e      	moveq	r6, r3
 800a18a:	9621      	str	r6, [sp, #132]	; 0x84
 800a18c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a18e:	0076      	lsls	r6, r6, #1
 800a190:	960e      	str	r6, [sp, #56]	; 0x38
 800a192:	00bf      	lsls	r7, r7, #2
 800a194:	9e07      	ldr	r6, [sp, #28]
 800a196:	970f      	str	r7, [sp, #60]	; 0x3c
 800a198:	9605      	str	r6, [sp, #20]
 800a19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19c:	9e05      	ldr	r6, [sp, #20]
 800a19e:	9f07      	ldr	r7, [sp, #28]
 800a1a0:	1e9c      	subs	r4, r3, #2
 800a1a2:	1bf3      	subs	r3, r6, r7
 800a1a4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800a1a6:	42b3      	cmp	r3, r6
 800a1a8:	f280 8253 	bge.w	800a652 <_DrawBitmap+0x716>
 800a1ac:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800a1ae:	2f02      	cmp	r7, #2
 800a1b0:	f000 80d9 	beq.w	800a366 <_DrawBitmap+0x42a>
 800a1b4:	2f04      	cmp	r7, #4
 800a1b6:	f000 8178 	beq.w	800a4aa <_DrawBitmap+0x56e>
 800a1ba:	2f01      	cmp	r7, #1
 800a1bc:	f040 823f 	bne.w	800a63e <_DrawBitmap+0x702>
 800a1c0:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800a434 <_DrawBitmap+0x4f8>
 800a1c4:	f8d9 3000 	ldr.w	r3, [r9]
 800a1c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800a1ca:	f7fe fc21 	bl	8008a10 <GUI_ALLOC_LockH>
 800a1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d2:	4a97      	ldr	r2, [pc, #604]	; (800a430 <_DrawBitmap+0x4f4>)
 800a1d4:	9010      	str	r0, [sp, #64]	; 0x40
 800a1d6:	5cd5      	ldrb	r5, [r2, r3]
 800a1d8:	f8d9 3000 	ldr.w	r3, [r9]
 800a1dc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800a1de:	7c1b      	ldrb	r3, [r3, #16]
 800a1e0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a1e2:	f003 0303 	and.w	r3, r3, #3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	465e      	mov	r6, fp
 800a1ea:	f1c0 0808 	rsb	r8, r0, #8
 800a1ee:	fa45 f500 	asr.w	r5, r5, r0
 800a1f2:	d022      	beq.n	800a23a <_DrawBitmap+0x2fe>
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d062      	beq.n	800a2be <_DrawBitmap+0x382>
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d060      	beq.n	800a2be <_DrawBitmap+0x382>
 800a1fc:	4652      	mov	r2, sl
 800a1fe:	4546      	cmp	r6, r8
 800a200:	bf38      	it	cc
 800a202:	46b0      	movcc	r8, r6
 800a204:	ebc8 0606 	rsb	r6, r8, r6
 800a208:	4643      	mov	r3, r8
 800a20a:	4621      	mov	r1, r4
 800a20c:	f005 0001 	and.w	r0, r5, #1
 800a210:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a212:	3b01      	subs	r3, #1
 800a214:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a218:	f821 0b02 	strh.w	r0, [r1], #2
 800a21c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800a220:	d1f4      	bne.n	800a20c <_DrawBitmap+0x2d0>
 800a222:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800a226:	2e00      	cmp	r6, #0
 800a228:	f000 8099 	beq.w	800a35e <_DrawBitmap+0x422>
 800a22c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a230:	497f      	ldr	r1, [pc, #508]	; (800a430 <_DrawBitmap+0x4f4>)
 800a232:	f04f 0808 	mov.w	r8, #8
 800a236:	5ccd      	ldrb	r5, [r1, r3]
 800a238:	e7e1      	b.n	800a1fe <_DrawBitmap+0x2c2>
 800a23a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a23c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a240:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800a244:	f8cd a018 	str.w	sl, [sp, #24]
 800a248:	4546      	cmp	r6, r8
 800a24a:	bf38      	it	cc
 800a24c:	46b0      	movcc	r8, r6
 800a24e:	ebc8 0606 	rsb	r6, r8, r6
 800a252:	b32f      	cbz	r7, 800a2a0 <_DrawBitmap+0x364>
 800a254:	b91d      	cbnz	r5, 800a25e <_DrawBitmap+0x322>
 800a256:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800a25a:	44c1      	add	r9, r8
 800a25c:	e024      	b.n	800a2a8 <_DrawBitmap+0x36c>
 800a25e:	07ea      	lsls	r2, r5, #31
 800a260:	d50b      	bpl.n	800a27a <_DrawBitmap+0x33e>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	9a05      	ldr	r2, [sp, #20]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8cd c008 	str.w	ip, [sp, #8]
 800a26c:	4638      	mov	r0, r7
 800a26e:	4649      	mov	r1, r9
 800a270:	4798      	blx	r3
 800a272:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a276:	f8a4 c000 	strh.w	ip, [r4]
 800a27a:	f1b8 0801 	subs.w	r8, r8, #1
 800a27e:	f109 0901 	add.w	r9, r9, #1
 800a282:	f104 0402 	add.w	r4, r4, #2
 800a286:	d00f      	beq.n	800a2a8 <_DrawBitmap+0x36c>
 800a288:	086d      	lsrs	r5, r5, #1
 800a28a:	e7e3      	b.n	800a254 <_DrawBitmap+0x318>
 800a28c:	07eb      	lsls	r3, r5, #31
 800a28e:	bf48      	it	mi
 800a290:	f8a4 c000 	strhmi.w	ip, [r4]
 800a294:	f1b8 0801 	subs.w	r8, r8, #1
 800a298:	f104 0402 	add.w	r4, r4, #2
 800a29c:	d004      	beq.n	800a2a8 <_DrawBitmap+0x36c>
 800a29e:	086d      	lsrs	r5, r5, #1
 800a2a0:	2d00      	cmp	r5, #0
 800a2a2:	d1f3      	bne.n	800a28c <_DrawBitmap+0x350>
 800a2a4:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	d058      	beq.n	800a35e <_DrawBitmap+0x422>
 800a2ac:	9906      	ldr	r1, [sp, #24]
 800a2ae:	4a60      	ldr	r2, [pc, #384]	; (800a430 <_DrawBitmap+0x4f4>)
 800a2b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2b4:	9106      	str	r1, [sp, #24]
 800a2b6:	5cd5      	ldrb	r5, [r2, r3]
 800a2b8:	f04f 0808 	mov.w	r8, #8
 800a2bc:	e7c4      	b.n	800a248 <_DrawBitmap+0x30c>
 800a2be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2c0:	6913      	ldr	r3, [r2, #16]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	4798      	blx	r3
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ca:	b280      	uxth	r0, r0
 800a2cc:	900a      	str	r0, [sp, #40]	; 0x28
 800a2ce:	f10a 0901 	add.w	r9, sl, #1
 800a2d2:	4546      	cmp	r6, r8
 800a2d4:	bf38      	it	cc
 800a2d6:	46b0      	movcc	r8, r6
 800a2d8:	ebc8 0606 	rsb	r6, r8, r6
 800a2dc:	1ca3      	adds	r3, r4, #2
 800a2de:	b31f      	cbz	r7, 800a328 <_DrawBitmap+0x3ec>
 800a2e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2e6:	9a06      	ldr	r2, [sp, #24]
 800a2e8:	4440      	add	r0, r8
 800a2ea:	900c      	str	r0, [sp, #48]	; 0x30
 800a2ec:	1a81      	subs	r1, r0, r2
 800a2ee:	07e8      	lsls	r0, r5, #31
 800a2f0:	d50d      	bpl.n	800a30e <_DrawBitmap+0x3d2>
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f8d2 c000 	ldr.w	ip, [r2]
 800a2fa:	9a05      	ldr	r2, [sp, #20]
 800a2fc:	9302      	str	r3, [sp, #8]
 800a2fe:	47e0      	blx	ip
 800a300:	9b02      	ldr	r3, [sp, #8]
 800a302:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a304:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800a308:	4042      	eors	r2, r0
 800a30a:	f823 2c02 	strh.w	r2, [r3, #-2]
 800a30e:	9906      	ldr	r1, [sp, #24]
 800a310:	3901      	subs	r1, #1
 800a312:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800a316:	f103 0302 	add.w	r3, r3, #2
 800a31a:	9106      	str	r1, [sp, #24]
 800a31c:	d1e2      	bne.n	800a2e4 <_DrawBitmap+0x3a8>
 800a31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a320:	930b      	str	r3, [sp, #44]	; 0x2c
 800a322:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800a326:	e010      	b.n	800a34a <_DrawBitmap+0x40e>
 800a328:	4642      	mov	r2, r8
 800a32a:	07e9      	lsls	r1, r5, #31
 800a32c:	d505      	bpl.n	800a33a <_DrawBitmap+0x3fe>
 800a32e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800a332:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a334:	4041      	eors	r1, r0
 800a336:	f823 1c02 	strh.w	r1, [r3, #-2]
 800a33a:	3a01      	subs	r2, #1
 800a33c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800a340:	f103 0302 	add.w	r3, r3, #2
 800a344:	d1f1      	bne.n	800a32a <_DrawBitmap+0x3ee>
 800a346:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800a34a:	b146      	cbz	r6, 800a35e <_DrawBitmap+0x422>
 800a34c:	f899 3000 	ldrb.w	r3, [r9]
 800a350:	4a37      	ldr	r2, [pc, #220]	; (800a430 <_DrawBitmap+0x4f4>)
 800a352:	f109 0901 	add.w	r9, r9, #1
 800a356:	5cd5      	ldrb	r5, [r2, r3]
 800a358:	f04f 0808 	mov.w	r8, #8
 800a35c:	e7b9      	b.n	800a2d2 <_DrawBitmap+0x396>
 800a35e:	a810      	add	r0, sp, #64	; 0x40
 800a360:	f7fe fb64 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800a364:	e16b      	b.n	800a63e <_DrawBitmap+0x702>
 800a366:	4b33      	ldr	r3, [pc, #204]	; (800a434 <_DrawBitmap+0x4f8>)
 800a368:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a36e:	7c1b      	ldrb	r3, [r3, #16]
 800a370:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800a374:	f1c6 0504 	rsb	r5, r6, #4
 800a378:	f89a 6000 	ldrb.w	r6, [sl]
 800a37c:	f003 0303 	and.w	r3, r3, #3
 800a380:	40be      	lsls	r6, r7
 800a382:	2b01      	cmp	r3, #1
 800a384:	b2ed      	uxtb	r5, r5
 800a386:	b2f6      	uxtb	r6, r6
 800a388:	d06a      	beq.n	800a460 <_DrawBitmap+0x524>
 800a38a:	d308      	bcc.n	800a39e <_DrawBitmap+0x462>
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	f040 8156 	bne.w	800a63e <_DrawBitmap+0x702>
 800a392:	f8cd a018 	str.w	sl, [sp, #24]
 800a396:	465f      	mov	r7, fp
 800a398:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a39c:	e03e      	b.n	800a41c <_DrawBitmap+0x4e0>
 800a39e:	4652      	mov	r2, sl
 800a3a0:	465b      	mov	r3, fp
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	bfc8      	it	gt
 800a3a6:	b2dd      	uxtbgt	r5, r3
 800a3a8:	1b5b      	subs	r3, r3, r5
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800a3b2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a3b4:	3901      	subs	r1, #1
 800a3b6:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800a3ba:	f820 cb02 	strh.w	ip, [r0], #2
 800a3be:	00b6      	lsls	r6, r6, #2
 800a3c0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a3c4:	b2f6      	uxtb	r6, r6
 800a3c6:	d1f2      	bne.n	800a3ae <_DrawBitmap+0x472>
 800a3c8:	3d01      	subs	r5, #1
 800a3ca:	b2ed      	uxtb	r5, r5
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8133 	beq.w	800a63e <_DrawBitmap+0x702>
 800a3d8:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800a3dc:	2504      	movs	r5, #4
 800a3de:	e7e0      	b.n	800a3a2 <_DrawBitmap+0x466>
 800a3e0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800a3e4:	eb08 010c 	add.w	r1, r8, ip
 800a3e8:	d126      	bne.n	800a438 <_DrawBitmap+0x4fc>
 800a3ea:	f108 0801 	add.w	r8, r8, #1
 800a3ee:	fa5f f388 	uxtb.w	r3, r8
 800a3f2:	00b6      	lsls	r6, r6, #2
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	b2f6      	uxtb	r6, r6
 800a3f8:	d1f2      	bne.n	800a3e0 <_DrawBitmap+0x4a4>
 800a3fa:	3d01      	subs	r5, #1
 800a3fc:	b2ed      	uxtb	r5, r5
 800a3fe:	1c6b      	adds	r3, r5, #1
 800a400:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800a404:	f10c 0301 	add.w	r3, ip, #1
 800a408:	eb03 0c05 	add.w	ip, r3, r5
 800a40c:	2f00      	cmp	r7, #0
 800a40e:	f000 8116 	beq.w	800a63e <_DrawBitmap+0x702>
 800a412:	9b06      	ldr	r3, [sp, #24]
 800a414:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800a418:	9306      	str	r3, [sp, #24]
 800a41a:	2504      	movs	r5, #4
 800a41c:	42bd      	cmp	r5, r7
 800a41e:	bfc8      	it	gt
 800a420:	b2fd      	uxtbgt	r5, r7
 800a422:	1b7f      	subs	r7, r7, r5
 800a424:	f04f 0800 	mov.w	r8, #0
 800a428:	e7da      	b.n	800a3e0 <_DrawBitmap+0x4a4>
 800a42a:	bf00      	nop
 800a42c:	0800c934 	.word	0x0800c934
 800a430:	0800c9a8 	.word	0x0800c9a8
 800a434:	20000044 	.word	0x20000044
 800a438:	09b3      	lsrs	r3, r6, #6
 800a43a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a43c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a440:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800a444:	f1b9 0f00 	cmp.w	r9, #0
 800a448:	d0cf      	beq.n	800a3ea <_DrawBitmap+0x4ae>
 800a44a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a44e:	9a05      	ldr	r2, [sp, #20]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8cd c008 	str.w	ip, [sp, #8]
 800a456:	4648      	mov	r0, r9
 800a458:	4798      	blx	r3
 800a45a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a45e:	e7c4      	b.n	800a3ea <_DrawBitmap+0x4ae>
 800a460:	4651      	mov	r1, sl
 800a462:	465b      	mov	r3, fp
 800a464:	429d      	cmp	r5, r3
 800a466:	bfc8      	it	gt
 800a468:	b2dd      	uxtbgt	r5, r3
 800a46a:	1b5b      	subs	r3, r3, r5
 800a46c:	1ca2      	adds	r2, r4, #2
 800a46e:	4628      	mov	r0, r5
 800a470:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800a474:	d005      	beq.n	800a482 <_DrawBitmap+0x546>
 800a476:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800a47a:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800a47e:	f822 7c02 	strh.w	r7, [r2, #-2]
 800a482:	3801      	subs	r0, #1
 800a484:	00b6      	lsls	r6, r6, #2
 800a486:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800a48a:	b2f6      	uxtb	r6, r6
 800a48c:	f102 0202 	add.w	r2, r2, #2
 800a490:	d1ee      	bne.n	800a470 <_DrawBitmap+0x534>
 800a492:	3d01      	subs	r5, #1
 800a494:	b2ed      	uxtb	r5, r5
 800a496:	3501      	adds	r5, #1
 800a498:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80ce 	beq.w	800a63e <_DrawBitmap+0x702>
 800a4a2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800a4a6:	2504      	movs	r5, #4
 800a4a8:	e7dc      	b.n	800a464 <_DrawBitmap+0x528>
 800a4aa:	4a6e      	ldr	r2, [pc, #440]	; (800a664 <_DrawBitmap+0x728>)
 800a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a4b4:	7c12      	ldrb	r2, [r2, #16]
 800a4b6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a4b8:	f002 0203 	and.w	r2, r2, #3
 800a4bc:	40bb      	lsls	r3, r7
 800a4be:	2a01      	cmp	r2, #1
 800a4c0:	b2dd      	uxtb	r5, r3
 800a4c2:	f000 8095 	beq.w	800a5f0 <_DrawBitmap+0x6b4>
 800a4c6:	d302      	bcc.n	800a4ce <_DrawBitmap+0x592>
 800a4c8:	2a02      	cmp	r2, #2
 800a4ca:	d036      	beq.n	800a53a <_DrawBitmap+0x5fe>
 800a4cc:	e0b7      	b.n	800a63e <_DrawBitmap+0x702>
 800a4ce:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a4d0:	b166      	cbz	r6, 800a4ec <_DrawBitmap+0x5b0>
 800a4d2:	092d      	lsrs	r5, r5, #4
 800a4d4:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a4d6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800a4da:	8023      	strh	r3, [r4, #0]
 800a4dc:	f10a 0201 	add.w	r2, sl, #1
 800a4e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a4e2:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800a4e6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a4ea:	e001      	b.n	800a4f0 <_DrawBitmap+0x5b4>
 800a4ec:	465b      	mov	r3, fp
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	dd19      	ble.n	800a528 <_DrawBitmap+0x5ec>
 800a4f4:	1058      	asrs	r0, r3, #1
 800a4f6:	1d21      	adds	r1, r4, #4
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	eb02 0c00 	add.w	ip, r2, r0
 800a500:	092f      	lsrs	r7, r5, #4
 800a502:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800a504:	f005 050f 	and.w	r5, r5, #15
 800a508:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800a50c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a510:	f821 7c04 	strh.w	r7, [r1, #-4]
 800a514:	f821 5c02 	strh.w	r5, [r1, #-2]
 800a518:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a51c:	4562      	cmp	r2, ip
 800a51e:	f101 0104 	add.w	r1, r1, #4
 800a522:	d1ed      	bne.n	800a500 <_DrawBitmap+0x5c4>
 800a524:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 8088 	beq.w	800a63e <_DrawBitmap+0x702>
 800a52e:	092d      	lsrs	r5, r5, #4
 800a530:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a532:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800a536:	8023      	strh	r3, [r4, #0]
 800a538:	e081      	b.n	800a63e <_DrawBitmap+0x702>
 800a53a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800a53c:	b1c7      	cbz	r7, 800a570 <_DrawBitmap+0x634>
 800a53e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a542:	d00b      	beq.n	800a55c <_DrawBitmap+0x620>
 800a544:	092d      	lsrs	r5, r5, #4
 800a546:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a548:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800a54c:	8023      	strh	r3, [r4, #0]
 800a54e:	b12e      	cbz	r6, 800a55c <_DrawBitmap+0x620>
 800a550:	68b3      	ldr	r3, [r6, #8]
 800a552:	9904      	ldr	r1, [sp, #16]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	9a05      	ldr	r2, [sp, #20]
 800a558:	4630      	mov	r0, r6
 800a55a:	4798      	blx	r3
 800a55c:	9804      	ldr	r0, [sp, #16]
 800a55e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a560:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800a564:	1c47      	adds	r7, r0, #1
 800a566:	f10b 39ff 	add.w	r9, fp, #4294967295
 800a56a:	f10a 0801 	add.w	r8, sl, #1
 800a56e:	e00f      	b.n	800a590 <_DrawBitmap+0x654>
 800a570:	46d9      	mov	r9, fp
 800a572:	46d0      	mov	r8, sl
 800a574:	9f04      	ldr	r7, [sp, #16]
 800a576:	e00b      	b.n	800a590 <_DrawBitmap+0x654>
 800a578:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800a57c:	d10c      	bne.n	800a598 <_DrawBitmap+0x65c>
 800a57e:	f015 050f 	ands.w	r5, r5, #15
 800a582:	d117      	bne.n	800a5b4 <_DrawBitmap+0x678>
 800a584:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800a588:	3404      	adds	r4, #4
 800a58a:	3702      	adds	r7, #2
 800a58c:	f1a9 0902 	sub.w	r9, r9, #2
 800a590:	f1b9 0f01 	cmp.w	r9, #1
 800a594:	dcf0      	bgt.n	800a578 <_DrawBitmap+0x63c>
 800a596:	e01a      	b.n	800a5ce <_DrawBitmap+0x692>
 800a598:	092b      	lsrs	r3, r5, #4
 800a59a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a59c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a5a0:	8023      	strh	r3, [r4, #0]
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	d0eb      	beq.n	800a57e <_DrawBitmap+0x642>
 800a5a6:	68b3      	ldr	r3, [r6, #8]
 800a5a8:	9a05      	ldr	r2, [sp, #20]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	4798      	blx	r3
 800a5b2:	e7e4      	b.n	800a57e <_DrawBitmap+0x642>
 800a5b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5b6:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800a5ba:	8063      	strh	r3, [r4, #2]
 800a5bc:	2e00      	cmp	r6, #0
 800a5be:	d0e1      	beq.n	800a584 <_DrawBitmap+0x648>
 800a5c0:	68b3      	ldr	r3, [r6, #8]
 800a5c2:	9a05      	ldr	r2, [sp, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	1c79      	adds	r1, r7, #1
 800a5ca:	4798      	blx	r3
 800a5cc:	e7da      	b.n	800a584 <_DrawBitmap+0x648>
 800a5ce:	f1b9 0f00 	cmp.w	r9, #0
 800a5d2:	d034      	beq.n	800a63e <_DrawBitmap+0x702>
 800a5d4:	092d      	lsrs	r5, r5, #4
 800a5d6:	d032      	beq.n	800a63e <_DrawBitmap+0x702>
 800a5d8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a5da:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800a5de:	8023      	strh	r3, [r4, #0]
 800a5e0:	b36e      	cbz	r6, 800a63e <_DrawBitmap+0x702>
 800a5e2:	68b3      	ldr	r3, [r6, #8]
 800a5e4:	9a05      	ldr	r2, [sp, #20]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	4798      	blx	r3
 800a5ee:	e026      	b.n	800a63e <_DrawBitmap+0x702>
 800a5f0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800a5f2:	f1c6 0302 	rsb	r3, r6, #2
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	465a      	mov	r2, fp
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	bfc8      	it	gt
 800a600:	b2d3      	uxtbgt	r3, r2
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	1ca1      	adds	r1, r4, #2
 800a606:	461e      	mov	r6, r3
 800a608:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800a60c:	d005      	beq.n	800a61a <_DrawBitmap+0x6de>
 800a60e:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800a612:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800a616:	f821 7c02 	strh.w	r7, [r1, #-2]
 800a61a:	3e01      	subs	r6, #1
 800a61c:	012d      	lsls	r5, r5, #4
 800a61e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800a622:	b2ed      	uxtb	r5, r5
 800a624:	f101 0102 	add.w	r1, r1, #2
 800a628:	d1ee      	bne.n	800a608 <_DrawBitmap+0x6cc>
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	3301      	adds	r3, #1
 800a630:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800a634:	b11a      	cbz	r2, 800a63e <_DrawBitmap+0x702>
 800a636:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a63a:	2302      	movs	r3, #2
 800a63c:	e7de      	b.n	800a5fc <_DrawBitmap+0x6c0>
 800a63e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a640:	9b05      	ldr	r3, [sp, #20]
 800a642:	9e08      	ldr	r6, [sp, #32]
 800a644:	44ba      	add	sl, r7
 800a646:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a648:	3301      	adds	r3, #1
 800a64a:	4437      	add	r7, r6
 800a64c:	9305      	str	r3, [sp, #20]
 800a64e:	9709      	str	r7, [sp, #36]	; 0x24
 800a650:	e5a3      	b.n	800a19a <_DrawBitmap+0x25e>
 800a652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a654:	b113      	cbz	r3, 800a65c <_DrawBitmap+0x720>
 800a656:	a811      	add	r0, sp, #68	; 0x44
 800a658:	f7fe f9e8 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800a65c:	b013      	add	sp, #76	; 0x4c
 800a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a662:	bf00      	nop
 800a664:	20000044 	.word	0x20000044

0800a668 <_GetDevProp>:
 800a668:	2908      	cmp	r1, #8
 800a66a:	b508      	push	{r3, lr}
 800a66c:	d008      	beq.n	800a680 <_GetDevProp+0x18>
 800a66e:	6800      	ldr	r0, [r0, #0]
 800a670:	b118      	cbz	r0, 800a67a <_GetDevProp+0x12>
 800a672:	68c3      	ldr	r3, [r0, #12]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	4798      	blx	r3
 800a678:	bd08      	pop	{r3, pc}
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295
 800a67e:	bd08      	pop	{r3, pc}
 800a680:	2010      	movs	r0, #16
 800a682:	bd08      	pop	{r3, pc}

0800a684 <GUI_MEMDEV_GetBitsPerPixel>:
 800a684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a686:	4605      	mov	r5, r0
 800a688:	b170      	cbz	r0, 800a6a8 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800a68a:	f7fe f9c1 	bl	8008a10 <GUI_ALLOC_LockH>
 800a68e:	6803      	ldr	r3, [r0, #0]
 800a690:	ac02      	add	r4, sp, #8
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	4798      	blx	r3
 800a69c:	f000 f933 	bl	800a906 <LCD__GetBPPDevice>
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7fe f9c2 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	b003      	add	sp, #12
 800a6ac:	bd30      	pop	{r4, r5, pc}
	...

0800a6b0 <GUI_MEMDEV_Delete>:
 800a6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	b1d0      	cbz	r0, 800a6ec <GUI_MEMDEV_Delete+0x3c>
 800a6b6:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <GUI_MEMDEV_Delete+0x40>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6bc:	4283      	cmp	r3, r0
 800a6be:	d101      	bne.n	800a6c4 <GUI_MEMDEV_Delete+0x14>
 800a6c0:	f7fd f95d 	bl	800797e <GUI_SelectLCD>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7fe f9a3 	bl	8008a10 <GUI_ALLOC_LockH>
 800a6ca:	9001      	str	r0, [sp, #4]
 800a6cc:	6940      	ldr	r0, [r0, #20]
 800a6ce:	b108      	cbz	r0, 800a6d4 <GUI_MEMDEV_Delete+0x24>
 800a6d0:	f001 f9a6 	bl	800ba20 <GUI_USAGE_DecUseCnt>
 800a6d4:	ad02      	add	r5, sp, #8
 800a6d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	f7fc fef0 	bl	80074c0 <GUI_DEVICE_Delete>
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f7fe f9a3 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7fe f9c0 	bl	8008a6c <GUI_ALLOC_Free>
 800a6ec:	b003      	add	sp, #12
 800a6ee:	bd30      	pop	{r4, r5, pc}
 800a6f0:	20000044 	.word	0x20000044

0800a6f4 <LCD_UpdateColorIndices>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	4c07      	ldr	r4, [pc, #28]	; (800a714 <LCD_UpdateColorIndices+0x20>)
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6fc:	f000 fc6a 	bl	800afd4 <LCD_Color2Index>
 800a700:	f000 fc88 	bl	800b014 <LCD_SetColorIndex>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a708:	f000 fc64 	bl	800afd4 <LCD_Color2Index>
 800a70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a710:	f000 bc9c 	b.w	800b04c <LCD_SetBkColorIndex>
 800a714:	20000044 	.word	0x20000044

0800a718 <LCD_SetClipRectEx>:
 800a718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a71a:	4c09      	ldr	r4, [pc, #36]	; (800a740 <LCD_SetClipRectEx+0x28>)
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	7c5a      	ldrb	r2, [r3, #17]
 800a720:	4b08      	ldr	r3, [pc, #32]	; (800a744 <LCD_SetClipRectEx+0x2c>)
 800a722:	4605      	mov	r5, r0
 800a724:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a728:	68c2      	ldr	r2, [r0, #12]
 800a72a:	4669      	mov	r1, sp
 800a72c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a72e:	4790      	blx	r2
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	4629      	mov	r1, r5
 800a734:	466a      	mov	r2, sp
 800a736:	3008      	adds	r0, #8
 800a738:	f7fc fe3a 	bl	80073b0 <GUI__IntersectRects>
 800a73c:	b003      	add	sp, #12
 800a73e:	bd30      	pop	{r4, r5, pc}
 800a740:	20000044 	.word	0x20000044
 800a744:	200037e8 	.word	0x200037e8

0800a748 <LCD_SelectLCD>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <LCD_SelectLCD+0x38>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	7c51      	ldrb	r1, [r2, #17]
 800a750:	4a0c      	ldr	r2, [pc, #48]	; (800a784 <LCD_SelectLCD+0x3c>)
 800a752:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800a756:	461c      	mov	r4, r3
 800a758:	b140      	cbz	r0, 800a76c <LCD_SelectLCD+0x24>
 800a75a:	68c3      	ldr	r3, [r0, #12]
 800a75c:	b113      	cbz	r3, 800a764 <LCD_SelectLCD+0x1c>
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b04      	cmp	r3, #4
 800a762:	d001      	beq.n	800a768 <LCD_SelectLCD+0x20>
 800a764:	6800      	ldr	r0, [r0, #0]
 800a766:	e7f7      	b.n	800a758 <LCD_SelectLCD+0x10>
 800a768:	f7fc fed2 	bl	8007510 <GUI_DEVICE_Unlink>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	2200      	movs	r2, #0
 800a770:	661a      	str	r2, [r3, #96]	; 0x60
 800a772:	f103 0208 	add.w	r2, r3, #8
 800a776:	615a      	str	r2, [r3, #20]
 800a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a77c:	f000 bbc6 	b.w	800af0c <LCD_SetClipRectMax>
 800a780:	20000044 	.word	0x20000044
 800a784:	200037e8 	.word	0x200037e8

0800a788 <_GetDevProp>:
 800a788:	2801      	cmp	r0, #1
 800a78a:	b510      	push	{r4, lr}
 800a78c:	460c      	mov	r4, r1
 800a78e:	dc08      	bgt.n	800a7a2 <_GetDevProp+0x1a>
 800a790:	f7fc fe86 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800a794:	b120      	cbz	r0, 800a7a0 <_GetDevProp+0x18>
 800a796:	68c3      	ldr	r3, [r0, #12]
 800a798:	4621      	mov	r1, r4
 800a79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79c:	4798      	blx	r3
 800a79e:	bd10      	pop	{r4, pc}
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	bd10      	pop	{r4, pc}

0800a7a6 <_GetMaxValue>:
 800a7a6:	b538      	push	{r3, r4, r5, lr}
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	f7ff ffeb 	bl	800a788 <_GetDevProp>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	f7ff ffe6 	bl	800a788 <_GetDevProp>
 800a7bc:	42a8      	cmp	r0, r5
 800a7be:	bfb8      	it	lt
 800a7c0:	4628      	movlt	r0, r5
 800a7c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}

0800a7c8 <LCD_GetBitsPerPixelEx>:
 800a7c8:	2108      	movs	r1, #8
 800a7ca:	f7ff bfdd 	b.w	800a788 <_GetDevProp>

0800a7ce <LCD_GetNumColorsEx>:
 800a7ce:	2109      	movs	r1, #9
 800a7d0:	f7ff bfda 	b.w	800a788 <_GetDevProp>

0800a7d4 <LCD_GetNumColors>:
 800a7d4:	4b02      	ldr	r3, [pc, #8]	; (800a7e0 <LCD_GetNumColors+0xc>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	7c58      	ldrb	r0, [r3, #17]
 800a7da:	f7ff bff8 	b.w	800a7ce <LCD_GetNumColorsEx>
 800a7de:	bf00      	nop
 800a7e0:	20000044 	.word	0x20000044

0800a7e4 <GUI_GetBitsPerPixelEx>:
 800a7e4:	b508      	push	{r3, lr}
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <GUI_GetBitsPerPixelEx+0x14>)
 800a7e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a7ec:	68c3      	ldr	r3, [r0, #12]
 800a7ee:	2108      	movs	r1, #8
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	4798      	blx	r3
 800a7f4:	bd08      	pop	{r3, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200037e8 	.word	0x200037e8

0800a7fc <LCD_GetPaletteEx>:
 800a7fc:	b508      	push	{r3, lr}
 800a7fe:	f7fc fe4f 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800a802:	b120      	cbz	r0, 800a80e <LCD_GetPaletteEx+0x12>
 800a804:	68c3      	ldr	r3, [r0, #12]
 800a806:	2102      	movs	r1, #2
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	4798      	blx	r3
 800a80c:	bd08      	pop	{r3, pc}
 800a80e:	bd08      	pop	{r3, pc}

0800a810 <LCD_GetPalette>:
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <LCD_GetPalette+0xc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	7c58      	ldrb	r0, [r3, #17]
 800a816:	f7ff bff1 	b.w	800a7fc <LCD_GetPaletteEx>
 800a81a:	bf00      	nop
 800a81c:	20000044 	.word	0x20000044

0800a820 <GUI_GetpfIndex2ColorEx>:
 800a820:	4b02      	ldr	r3, [pc, #8]	; (800a82c <GUI_GetpfIndex2ColorEx+0xc>)
 800a822:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	6858      	ldr	r0, [r3, #4]
 800a82a:	4770      	bx	lr
 800a82c:	200037e8 	.word	0x200037e8

0800a830 <LCD_GetpfColor2IndexEx>:
 800a830:	b508      	push	{r3, lr}
 800a832:	f7fc fe35 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800a836:	b108      	cbz	r0, 800a83c <LCD_GetpfColor2IndexEx+0xc>
 800a838:	6903      	ldr	r3, [r0, #16]
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	bd08      	pop	{r3, pc}
	...

0800a840 <GUI_GetpfColor2IndexEx>:
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <GUI_GetpfColor2IndexEx+0xc>)
 800a842:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	4770      	bx	lr
 800a84c:	200037e8 	.word	0x200037e8

0800a850 <LCD_GetXSizeMax>:
 800a850:	2001      	movs	r0, #1
 800a852:	f7ff bfa8 	b.w	800a7a6 <_GetMaxValue>

0800a856 <LCD_GetYSizeMax>:
 800a856:	2002      	movs	r0, #2
 800a858:	f7ff bfa5 	b.w	800a7a6 <_GetMaxValue>

0800a85c <LCD_SetDisplaySize>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <LCD_SetDisplaySize+0xc>)
 800a85e:	6018      	str	r0, [r3, #0]
 800a860:	4b02      	ldr	r3, [pc, #8]	; (800a86c <LCD_SetDisplaySize+0x10>)
 800a862:	6019      	str	r1, [r3, #0]
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	200029e4 	.word	0x200029e4
 800a86c:	200029e0 	.word	0x200029e0

0800a870 <LCD_GetXSizeDisplay>:
 800a870:	4b01      	ldr	r3, [pc, #4]	; (800a878 <LCD_GetXSizeDisplay+0x8>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	200029e4 	.word	0x200029e4

0800a87c <LCD_GetYSizeDisplay>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	; (800a884 <LCD_GetYSizeDisplay+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	200029e0 	.word	0x200029e0

0800a888 <LCD__GetBPP>:
 800a888:	2800      	cmp	r0, #0
 800a88a:	d03b      	beq.n	800a904 <LCD__GetBPP+0x7c>
 800a88c:	f030 0301 	bics.w	r3, r0, #1
 800a890:	d029      	beq.n	800a8e6 <LCD__GetBPP+0x5e>
 800a892:	f030 0303 	bics.w	r3, r0, #3
 800a896:	d028      	beq.n	800a8ea <LCD__GetBPP+0x62>
 800a898:	f030 0307 	bics.w	r3, r0, #7
 800a89c:	d027      	beq.n	800a8ee <LCD__GetBPP+0x66>
 800a89e:	f030 030f 	bics.w	r3, r0, #15
 800a8a2:	d026      	beq.n	800a8f2 <LCD__GetBPP+0x6a>
 800a8a4:	f030 031f 	bics.w	r3, r0, #31
 800a8a8:	d025      	beq.n	800a8f6 <LCD__GetBPP+0x6e>
 800a8aa:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800a8ae:	d024      	beq.n	800a8fa <LCD__GetBPP+0x72>
 800a8b0:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	b30b      	cbz	r3, 800a8fe <LCD__GetBPP+0x76>
 800a8ba:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800a8be:	f023 030f 	bic.w	r3, r3, #15
 800a8c2:	b1e3      	cbz	r3, 800a8fe <LCD__GetBPP+0x76>
 800a8c4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800a8c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8cc:	b1bb      	cbz	r3, 800a8fe <LCD__GetBPP+0x76>
 800a8ce:	0c03      	lsrs	r3, r0, #16
 800a8d0:	041b      	lsls	r3, r3, #16
 800a8d2:	b1a3      	cbz	r3, 800a8fe <LCD__GetBPP+0x76>
 800a8d4:	0c83      	lsrs	r3, r0, #18
 800a8d6:	049b      	lsls	r3, r3, #18
 800a8d8:	b19b      	cbz	r3, 800a902 <LCD__GetBPP+0x7a>
 800a8da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8de:	bf0c      	ite	eq
 800a8e0:	2018      	moveq	r0, #24
 800a8e2:	2020      	movne	r0, #32
 800a8e4:	4770      	bx	lr
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	4770      	bx	lr
 800a8ea:	2002      	movs	r0, #2
 800a8ec:	4770      	bx	lr
 800a8ee:	2003      	movs	r0, #3
 800a8f0:	4770      	bx	lr
 800a8f2:	2004      	movs	r0, #4
 800a8f4:	4770      	bx	lr
 800a8f6:	2005      	movs	r0, #5
 800a8f8:	4770      	bx	lr
 800a8fa:	2008      	movs	r0, #8
 800a8fc:	4770      	bx	lr
 800a8fe:	2010      	movs	r0, #16
 800a900:	4770      	bx	lr
 800a902:	2012      	movs	r0, #18
 800a904:	4770      	bx	lr

0800a906 <LCD__GetBPPDevice>:
 800a906:	b508      	push	{r3, lr}
 800a908:	f7ff ffbe 	bl	800a888 <LCD__GetBPP>
 800a90c:	2801      	cmp	r0, #1
 800a90e:	d00f      	beq.n	800a930 <LCD__GetBPPDevice+0x2a>
 800a910:	1e83      	subs	r3, r0, #2
 800a912:	2b06      	cmp	r3, #6
 800a914:	d909      	bls.n	800a92a <LCD__GetBPPDevice+0x24>
 800a916:	f1a0 0309 	sub.w	r3, r0, #9
 800a91a:	2b07      	cmp	r3, #7
 800a91c:	d907      	bls.n	800a92e <LCD__GetBPPDevice+0x28>
 800a91e:	3811      	subs	r0, #17
 800a920:	2810      	cmp	r0, #16
 800a922:	bf34      	ite	cc
 800a924:	2020      	movcc	r0, #32
 800a926:	2000      	movcs	r0, #0
 800a928:	bd08      	pop	{r3, pc}
 800a92a:	2008      	movs	r0, #8
 800a92c:	bd08      	pop	{r3, pc}
 800a92e:	2010      	movs	r0, #16
 800a930:	bd08      	pop	{r3, pc}
	...

0800a934 <_OnExit>:
 800a934:	b510      	push	{r4, lr}
 800a936:	4c04      	ldr	r4, [pc, #16]	; (800a948 <_OnExit+0x14>)
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	f7fe f855 	bl	80089e8 <GUI_ALLOC_FreeFixedBlock>
 800a93e:	4a03      	ldr	r2, [pc, #12]	; (800a94c <_OnExit+0x18>)
 800a940:	2300      	movs	r3, #0
 800a942:	6023      	str	r3, [r4, #0]
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	bd10      	pop	{r4, pc}
 800a948:	20003914 	.word	0x20003914
 800a94c:	200029e8 	.word	0x200029e8

0800a950 <LCD_InitColors>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d09      	ldr	r5, [pc, #36]	; (800a978 <LCD_InitColors+0x28>)
 800a954:	682c      	ldr	r4, [r5, #0]
 800a956:	b95c      	cbnz	r4, 800a970 <LCD_InitColors+0x20>
 800a958:	4b08      	ldr	r3, [pc, #32]	; (800a97c <LCD_InitColors+0x2c>)
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	0080      	lsls	r0, r0, #2
 800a95e:	f7fe f91b 	bl	8008b98 <GUI_ALLOC_GetFixedBlock>
 800a962:	6028      	str	r0, [r5, #0]
 800a964:	b130      	cbz	r0, 800a974 <LCD_InitColors+0x24>
 800a966:	4806      	ldr	r0, [pc, #24]	; (800a980 <LCD_InitColors+0x30>)
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <LCD_InitColors+0x34>)
 800a96a:	6003      	str	r3, [r0, #0]
 800a96c:	f7fc fef2 	bl	8007754 <GUI__RegisterExit>
 800a970:	2000      	movs	r0, #0
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	2001      	movs	r0, #1
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	20003914 	.word	0x20003914
 800a97c:	20000064 	.word	0x20000064
 800a980:	200029ec 	.word	0x200029ec
 800a984:	0800a935 	.word	0x0800a935

0800a988 <LCD_InitLUT>:
 800a988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98c:	f001 f871 	bl	800ba72 <LCD_GetNumLayers>
 800a990:	2400      	movs	r4, #0
 800a992:	4680      	mov	r8, r0
 800a994:	4544      	cmp	r4, r8
 800a996:	da2c      	bge.n	800a9f2 <LCD_InitLUT+0x6a>
 800a998:	4620      	mov	r0, r4
 800a99a:	f7fc fd81 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800a99e:	b330      	cbz	r0, 800a9ee <LCD_InitLUT+0x66>
 800a9a0:	4e15      	ldr	r6, [pc, #84]	; (800a9f8 <LCD_InitLUT+0x70>)
 800a9a2:	6833      	ldr	r3, [r6, #0]
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f893 9011 	ldrb.w	r9, [r3, #17]
 800a9aa:	745c      	strb	r4, [r3, #17]
 800a9ac:	f7ff ff0c 	bl	800a7c8 <LCD_GetBitsPerPixelEx>
 800a9b0:	2808      	cmp	r0, #8
 800a9b2:	dd03      	ble.n	800a9bc <LCD_InitLUT+0x34>
 800a9b4:	6833      	ldr	r3, [r6, #0]
 800a9b6:	f883 9011 	strb.w	r9, [r3, #17]
 800a9ba:	e018      	b.n	800a9ee <LCD_InitLUT+0x66>
 800a9bc:	4b0f      	ldr	r3, [pc, #60]	; (800a9fc <LCD_InitLUT+0x74>)
 800a9be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a9c2:	691a      	ldr	r2, [r3, #16]
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <LCD_InitLUT+0x78>)
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d0f4      	beq.n	800a9b4 <LCD_InitLUT+0x2c>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f7ff feff 	bl	800a7ce <LCD_GetNumColorsEx>
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	4555      	cmp	r5, sl
 800a9d6:	daed      	bge.n	800a9b4 <LCD_InitLUT+0x2c>
 800a9d8:	b2ef      	uxtb	r7, r5
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f000 fb0a 	bl	800aff4 <LCD_Index2Color>
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7fc fcad 	bl	8007344 <LCD_SetLUTEntryEx>
 800a9ea:	3501      	adds	r5, #1
 800a9ec:	e7f2      	b.n	800a9d4 <LCD_InitLUT+0x4c>
 800a9ee:	3401      	adds	r4, #1
 800a9f0:	e7d0      	b.n	800a994 <LCD_InitLUT+0xc>
 800a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20000044 	.word	0x20000044
 800a9fc:	200037e8 	.word	0x200037e8
 800aa00:	0800cd24 	.word	0x0800cd24

0800aa04 <_SetDrawMode>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	4b08      	ldr	r3, [pc, #32]	; (800aa28 <_SetDrawMode+0x24>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	7c1a      	ldrb	r2, [r3, #16]
 800aa0c:	ea80 0102 	eor.w	r1, r0, r2
 800aa10:	0749      	lsls	r1, r1, #29
 800aa12:	d505      	bpl.n	800aa20 <_SetDrawMode+0x1c>
 800aa14:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800aa16:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800aa18:	6826      	ldr	r6, [r4, #0]
 800aa1a:	680d      	ldr	r5, [r1, #0]
 800aa1c:	6025      	str	r5, [r4, #0]
 800aa1e:	600e      	str	r6, [r1, #0]
 800aa20:	7418      	strb	r0, [r3, #16]
 800aa22:	4610      	mov	r0, r2
 800aa24:	bd70      	pop	{r4, r5, r6, pc}
 800aa26:	bf00      	nop
 800aa28:	20000044 	.word	0x20000044

0800aa2c <LCD_SetDrawMode>:
 800aa2c:	b508      	push	{r3, lr}
 800aa2e:	4b02      	ldr	r3, [pc, #8]	; (800aa38 <LCD_SetDrawMode+0xc>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	4798      	blx	r3
 800aa36:	bd08      	pop	{r3, pc}
 800aa38:	20000068 	.word	0x20000068

0800aa3c <LCD_DrawPixel>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <LCD_DrawPixel+0x54>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	460a      	mov	r2, r1
 800aa44:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800aa48:	428a      	cmp	r2, r1
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	db1e      	blt.n	800aa8c <LCD_DrawPixel+0x50>
 800aa4e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800aa52:	428a      	cmp	r2, r1
 800aa54:	dc1a      	bgt.n	800aa8c <LCD_DrawPixel+0x50>
 800aa56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800aa5a:	4288      	cmp	r0, r1
 800aa5c:	db16      	blt.n	800aa8c <LCD_DrawPixel+0x50>
 800aa5e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800aa62:	4288      	cmp	r0, r1
 800aa64:	dc12      	bgt.n	800aa8c <LCD_DrawPixel+0x50>
 800aa66:	7c19      	ldrb	r1, [r3, #16]
 800aa68:	7c58      	ldrb	r0, [r3, #17]
 800aa6a:	f011 0f01 	tst.w	r1, #1
 800aa6e:	4909      	ldr	r1, [pc, #36]	; (800aa94 <LCD_DrawPixel+0x58>)
 800aa70:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800aa74:	d004      	beq.n	800aa80 <LCD_DrawPixel+0x44>
 800aa76:	68c3      	ldr	r3, [r0, #12]
 800aa78:	4621      	mov	r1, r4
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	4798      	blx	r3
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	68c1      	ldr	r1, [r0, #12]
 800aa82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa84:	698d      	ldr	r5, [r1, #24]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4621      	mov	r1, r4
 800aa8a:	47a8      	blx	r5
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000044 	.word	0x20000044
 800aa94:	200037e8 	.word	0x200037e8

0800aa98 <LCD_DrawHLine>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4b10      	ldr	r3, [pc, #64]	; (800aadc <LCD_DrawHLine+0x44>)
 800aa9c:	681c      	ldr	r4, [r3, #0]
 800aa9e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800aaa2:	4299      	cmp	r1, r3
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	db17      	blt.n	800aad8 <LCD_DrawHLine+0x40>
 800aaa8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800aaac:	4299      	cmp	r1, r3
 800aaae:	dc13      	bgt.n	800aad8 <LCD_DrawHLine+0x40>
 800aab0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800aab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab8:	4288      	cmp	r0, r1
 800aaba:	bfa8      	it	ge
 800aabc:	4601      	movge	r1, r0
 800aabe:	429a      	cmp	r2, r3
 800aac0:	bfb8      	it	lt
 800aac2:	4613      	movlt	r3, r2
 800aac4:	428b      	cmp	r3, r1
 800aac6:	db07      	blt.n	800aad8 <LCD_DrawHLine+0x40>
 800aac8:	7c60      	ldrb	r0, [r4, #17]
 800aaca:	4a05      	ldr	r2, [pc, #20]	; (800aae0 <LCD_DrawHLine+0x48>)
 800aacc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800aad0:	68c2      	ldr	r2, [r0, #12]
 800aad2:	6894      	ldr	r4, [r2, #8]
 800aad4:	462a      	mov	r2, r5
 800aad6:	47a0      	blx	r4
 800aad8:	bd38      	pop	{r3, r4, r5, pc}
 800aada:	bf00      	nop
 800aadc:	20000044 	.word	0x20000044
 800aae0:	200037e8 	.word	0x200037e8

0800aae4 <LCD_FillRect>:
 800aae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aae6:	460e      	mov	r6, r1
 800aae8:	4912      	ldr	r1, [pc, #72]	; (800ab34 <LCD_FillRect+0x50>)
 800aaea:	680c      	ldr	r4, [r1, #0]
 800aaec:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800aaf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aaf4:	4288      	cmp	r0, r1
 800aaf6:	bfa8      	it	ge
 800aaf8:	4601      	movge	r1, r0
 800aafa:	42aa      	cmp	r2, r5
 800aafc:	bfb8      	it	lt
 800aafe:	4615      	movlt	r5, r2
 800ab00:	428d      	cmp	r5, r1
 800ab02:	db14      	blt.n	800ab2e <LCD_FillRect+0x4a>
 800ab04:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800ab08:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800ab0c:	4296      	cmp	r6, r2
 800ab0e:	bfa8      	it	ge
 800ab10:	4632      	movge	r2, r6
 800ab12:	4283      	cmp	r3, r0
 800ab14:	bfa8      	it	ge
 800ab16:	4603      	movge	r3, r0
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	db08      	blt.n	800ab2e <LCD_FillRect+0x4a>
 800ab1c:	7c64      	ldrb	r4, [r4, #17]
 800ab1e:	4806      	ldr	r0, [pc, #24]	; (800ab38 <LCD_FillRect+0x54>)
 800ab20:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ab24:	68c4      	ldr	r4, [r0, #12]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	6924      	ldr	r4, [r4, #16]
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	47a0      	blx	r4
 800ab2e:	b002      	add	sp, #8
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	bf00      	nop
 800ab34:	20000044 	.word	0x20000044
 800ab38:	200037e8 	.word	0x200037e8

0800ab3c <LCD__DrawBitmap_1bpp>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800acf0 <LCD__DrawBitmap_1bpp+0x1b4>
 800ab44:	b08f      	sub	sp, #60	; 0x3c
 800ab46:	f8dc c000 	ldr.w	ip, [ip]
 800ab4a:	9009      	str	r0, [sp, #36]	; 0x24
 800ab4c:	460e      	mov	r6, r1
 800ab4e:	4615      	mov	r5, r2
 800ab50:	469b      	mov	fp, r3
 800ab52:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ab54:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ab58:	f1bc 0f00 	cmp.w	ip, #0
 800ab5c:	d00d      	beq.n	800ab7a <LCD__DrawBitmap_1bpp+0x3e>
 800ab5e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ab60:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ab62:	9500      	str	r5, [sp, #0]
 800ab64:	9601      	str	r6, [sp, #4]
 800ab66:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ab68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ab6a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ab6c:	9702      	str	r7, [sp, #8]
 800ab6e:	9503      	str	r5, [sp, #12]
 800ab70:	9404      	str	r4, [sp, #16]
 800ab72:	9605      	str	r6, [sp, #20]
 800ab74:	f8dc 4000 	ldr.w	r4, [ip]
 800ab78:	e053      	b.n	800ac22 <LCD__DrawBitmap_1bpp+0xe6>
 800ab7a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800ab7c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ab7e:	ea47 0300 	orr.w	r3, r7, r0
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d14f      	bne.n	800ac26 <LCD__DrawBitmap_1bpp+0xea>
 800ab86:	4b58      	ldr	r3, [pc, #352]	; (800ace8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ab8e:	1a51      	subs	r1, r2, r1
 800ab90:	2900      	cmp	r1, #0
 800ab92:	dd08      	ble.n	800aba6 <LCD__DrawBitmap_1bpp+0x6a>
 800ab94:	ebc1 030b 	rsb	r3, r1, fp
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f340 80a2 	ble.w	800ace2 <LCD__DrawBitmap_1bpp+0x1a6>
 800ab9e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800aba0:	fb07 4401 	mla	r4, r7, r1, r4
 800aba4:	e001      	b.n	800abaa <LCD__DrawBitmap_1bpp+0x6e>
 800aba6:	465b      	mov	r3, fp
 800aba8:	4632      	mov	r2, r6
 800abaa:	445e      	add	r6, fp
 800abac:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800abb0:	3e01      	subs	r6, #1
 800abb2:	1a76      	subs	r6, r6, r1
 800abb4:	2e00      	cmp	r6, #0
 800abb6:	dd03      	ble.n	800abc0 <LCD__DrawBitmap_1bpp+0x84>
 800abb8:	1b9b      	subs	r3, r3, r6
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f340 8091 	ble.w	800ace2 <LCD__DrawBitmap_1bpp+0x1a6>
 800abc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abc2:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800abc6:	4429      	add	r1, r5
 800abc8:	3901      	subs	r1, #1
 800abca:	1b89      	subs	r1, r1, r6
 800abcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800abce:	2900      	cmp	r1, #0
 800abd0:	bfc8      	it	gt
 800abd2:	ebc1 0505 	rsbgt	r5, r1, r5
 800abd6:	ebc8 0106 	rsb	r1, r8, r6
 800abda:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800abde:	42b1      	cmp	r1, r6
 800abe0:	da0c      	bge.n	800abfc <LCD__DrawBitmap_1bpp+0xc0>
 800abe2:	ebc1 0c06 	rsb	ip, r1, r6
 800abe6:	eb08 070c 	add.w	r7, r8, ip
 800abea:	1b8e      	subs	r6, r1, r6
 800abec:	f02c 0c07 	bic.w	ip, ip, #7
 800abf0:	4435      	add	r5, r6
 800abf2:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800abf6:	4461      	add	r1, ip
 800abf8:	f007 0807 	and.w	r8, r7, #7
 800abfc:	2d00      	cmp	r5, #0
 800abfe:	dd70      	ble.n	800ace2 <LCD__DrawBitmap_1bpp+0x1a6>
 800ac00:	7c46      	ldrb	r6, [r0, #17]
 800ac02:	483a      	ldr	r0, [pc, #232]	; (800acec <LCD__DrawBitmap_1bpp+0x1b0>)
 800ac04:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ac06:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800ac0a:	68c6      	ldr	r6, [r0, #12]
 800ac0c:	9701      	str	r7, [sp, #4]
 800ac0e:	9403      	str	r4, [sp, #12]
 800ac10:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ac12:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	9702      	str	r7, [sp, #8]
 800ac18:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac1c:	9405      	str	r4, [sp, #20]
 800ac1e:	6874      	ldr	r4, [r6, #4]
 800ac20:	462b      	mov	r3, r5
 800ac22:	47a0      	blx	r4
 800ac24:	e05d      	b.n	800ace2 <LCD__DrawBitmap_1bpp+0x1a6>
 800ac26:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ac28:	f1c7 0708 	rsb	r7, r7, #8
 800ac2c:	970c      	str	r7, [sp, #48]	; 0x30
 800ac2e:	4667      	mov	r7, ip
 800ac30:	45dc      	cmp	ip, fp
 800ac32:	da56      	bge.n	800ace2 <LCD__DrawBitmap_1bpp+0x1a6>
 800ac34:	4b2c      	ldr	r3, [pc, #176]	; (800ace8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800ac36:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4430      	add	r0, r6
 800ac3c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800ac40:	900a      	str	r0, [sp, #40]	; 0x28
 800ac42:	1e41      	subs	r1, r0, #1
 800ac44:	4291      	cmp	r1, r2
 800ac46:	910b      	str	r1, [sp, #44]	; 0x2c
 800ac48:	db45      	blt.n	800acd6 <LCD__DrawBitmap_1bpp+0x19a>
 800ac4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ac4e:	429e      	cmp	r6, r3
 800ac50:	dc41      	bgt.n	800acd6 <LCD__DrawBitmap_1bpp+0x19a>
 800ac52:	f04f 0800 	mov.w	r8, #0
 800ac56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac5a:	9408      	str	r4, [sp, #32]
 800ac5c:	46c2      	mov	sl, r8
 800ac5e:	45aa      	cmp	sl, r5
 800ac60:	da39      	bge.n	800acd6 <LCD__DrawBitmap_1bpp+0x19a>
 800ac62:	f1b8 0f00 	cmp.w	r8, #0
 800ac66:	d105      	bne.n	800ac74 <LCD__DrawBitmap_1bpp+0x138>
 800ac68:	9a08      	ldr	r2, [sp, #32]
 800ac6a:	7817      	ldrb	r7, [r2, #0]
 800ac6c:	3201      	adds	r2, #1
 800ac6e:	9208      	str	r2, [sp, #32]
 800ac70:	f04f 0808 	mov.w	r8, #8
 800ac74:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac76:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac78:	4a1b      	ldr	r2, [pc, #108]	; (800ace8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800ac7a:	fa47 f300 	asr.w	r3, r7, r0
 800ac7e:	ebc1 0808 	rsb	r8, r1, r8
 800ac82:	408f      	lsls	r7, r1
 800ac84:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800ac88:	b2ff      	uxtb	r7, r7
 800ac8a:	d103      	bne.n	800ac94 <LCD__DrawBitmap_1bpp+0x158>
 800ac8c:	6810      	ldr	r0, [r2, #0]
 800ac8e:	7c00      	ldrb	r0, [r0, #16]
 800ac90:	0780      	lsls	r0, r0, #30
 800ac92:	d41b      	bmi.n	800accc <LCD__DrawBitmap_1bpp+0x190>
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ac98:	6810      	ldr	r0, [r2, #0]
 800ac9a:	900d      	str	r0, [sp, #52]	; 0x34
 800ac9c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ac9e:	b110      	cbz	r0, 800aca6 <LCD__DrawBitmap_1bpp+0x16a>
 800aca0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800aca4:	e000      	b.n	800aca8 <LCD__DrawBitmap_1bpp+0x16c>
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	1e4a      	subs	r2, r1, #1
 800acae:	444a      	add	r2, r9
 800acb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb2:	f8cd c01c 	str.w	ip, [sp, #28]
 800acb6:	4648      	mov	r0, r9
 800acb8:	4631      	mov	r1, r6
 800acba:	f7ff ff13 	bl	800aae4 <LCD_FillRect>
 800acbe:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <LCD__DrawBitmap_1bpp+0x1ac>)
 800acc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800acc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800acce:	f10a 0a01 	add.w	sl, sl, #1
 800acd2:	4499      	add	r9, r3
 800acd4:	e7c3      	b.n	800ac5e <LCD__DrawBitmap_1bpp+0x122>
 800acd6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800acd8:	f10c 0c01 	add.w	ip, ip, #1
 800acdc:	4434      	add	r4, r6
 800acde:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ace0:	e7a6      	b.n	800ac30 <LCD__DrawBitmap_1bpp+0xf4>
 800ace2:	b00f      	add	sp, #60	; 0x3c
 800ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	20000044 	.word	0x20000044
 800acec:	200037e8 	.word	0x200037e8
 800acf0:	200037a0 	.word	0x200037a0

0800acf4 <LCD_DrawBitmap>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800af08 <LCD_DrawBitmap+0x214>
 800acfc:	b091      	sub	sp, #68	; 0x44
 800acfe:	f8dc 9000 	ldr.w	r9, [ip]
 800ad02:	9207      	str	r2, [sp, #28]
 800ad04:	4605      	mov	r5, r0
 800ad06:	4688      	mov	r8, r1
 800ad08:	469b      	mov	fp, r3
 800ad0a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ad0c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	d00c      	beq.n	800ad2e <LCD_DrawBitmap+0x3a>
 800ad14:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ad16:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ad18:	9500      	str	r5, [sp, #0]
 800ad1a:	9701      	str	r7, [sp, #4]
 800ad1c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ad1e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ad20:	9602      	str	r6, [sp, #8]
 800ad22:	9503      	str	r5, [sp, #12]
 800ad24:	9404      	str	r4, [sp, #16]
 800ad26:	9705      	str	r7, [sp, #20]
 800ad28:	f8d9 4000 	ldr.w	r4, [r9]
 800ad2c:	e081      	b.n	800ae32 <LCD_DrawBitmap+0x13e>
 800ad2e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ad30:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ad32:	ea47 0300 	orr.w	r3, r7, r0
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d17d      	bne.n	800ae36 <LCD_DrawBitmap+0x142>
 800ad3a:	4b71      	ldr	r3, [pc, #452]	; (800af00 <LCD_DrawBitmap+0x20c>)
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ad42:	1a53      	subs	r3, r2, r1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dd08      	ble.n	800ad5a <LCD_DrawBitmap+0x66>
 800ad48:	ebc3 010b 	rsb	r1, r3, fp
 800ad4c:	2900      	cmp	r1, #0
 800ad4e:	f340 80d4 	ble.w	800aefa <LCD_DrawBitmap+0x206>
 800ad52:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ad54:	fb07 4403 	mla	r4, r7, r3, r4
 800ad58:	e001      	b.n	800ad5e <LCD_DrawBitmap+0x6a>
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	44d8      	add	r8, fp
 800ad60:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800ad64:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad68:	ebc3 0808 	rsb	r8, r3, r8
 800ad6c:	f1b8 0f00 	cmp.w	r8, #0
 800ad70:	dd04      	ble.n	800ad7c <LCD_DrawBitmap+0x88>
 800ad72:	ebc8 0101 	rsb	r1, r8, r1
 800ad76:	2900      	cmp	r1, #0
 800ad78:	f340 80bf 	ble.w	800aefa <LCD_DrawBitmap+0x206>
 800ad7c:	9b07      	ldr	r3, [sp, #28]
 800ad7e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800ad82:	442b      	add	r3, r5
 800ad84:	3b01      	subs	r3, #1
 800ad86:	ebcc 0303 	rsb	r3, ip, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dd02      	ble.n	800ad94 <LCD_DrawBitmap+0xa0>
 800ad8e:	9f07      	ldr	r7, [sp, #28]
 800ad90:	1aff      	subs	r7, r7, r3
 800ad92:	9707      	str	r7, [sp, #28]
 800ad94:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800ad98:	4565      	cmp	r5, ip
 800ad9a:	da33      	bge.n	800ae04 <LCD_DrawBitmap+0x110>
 800ad9c:	9f07      	ldr	r7, [sp, #28]
 800ad9e:	ebc5 030c 	rsb	r3, r5, ip
 800ada2:	1aff      	subs	r7, r7, r3
 800ada4:	2e08      	cmp	r6, #8
 800ada6:	9707      	str	r7, [sp, #28]
 800ada8:	d027      	beq.n	800adfa <LCD_DrawBitmap+0x106>
 800adaa:	dc0d      	bgt.n	800adc8 <LCD_DrawBitmap+0xd4>
 800adac:	2e02      	cmp	r6, #2
 800adae:	d014      	beq.n	800adda <LCD_DrawBitmap+0xe6>
 800adb0:	2e04      	cmp	r6, #4
 800adb2:	d01a      	beq.n	800adea <LCD_DrawBitmap+0xf6>
 800adb4:	2e01      	cmp	r6, #1
 800adb6:	d126      	bne.n	800ae06 <LCD_DrawBitmap+0x112>
 800adb8:	f023 0c07 	bic.w	ip, r3, #7
 800adbc:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800adc0:	4465      	add	r5, ip
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	e01e      	b.n	800ae06 <LCD_DrawBitmap+0x112>
 800adc8:	2e18      	cmp	r6, #24
 800adca:	d018      	beq.n	800adfe <LCD_DrawBitmap+0x10a>
 800adcc:	2e20      	cmp	r6, #32
 800adce:	d016      	beq.n	800adfe <LCD_DrawBitmap+0x10a>
 800add0:	2e10      	cmp	r6, #16
 800add2:	d118      	bne.n	800ae06 <LCD_DrawBitmap+0x112>
 800add4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800add8:	e013      	b.n	800ae02 <LCD_DrawBitmap+0x10e>
 800adda:	f023 0c03 	bic.w	ip, r3, #3
 800adde:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800ade2:	4465      	add	r5, ip
 800ade4:	f003 0303 	and.w	r3, r3, #3
 800ade8:	e00d      	b.n	800ae06 <LCD_DrawBitmap+0x112>
 800adea:	f023 0c01 	bic.w	ip, r3, #1
 800adee:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800adf2:	4465      	add	r5, ip
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	e005      	b.n	800ae06 <LCD_DrawBitmap+0x112>
 800adfa:	441c      	add	r4, r3
 800adfc:	e001      	b.n	800ae02 <LCD_DrawBitmap+0x10e>
 800adfe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ae02:	4665      	mov	r5, ip
 800ae04:	2300      	movs	r3, #0
 800ae06:	9f07      	ldr	r7, [sp, #28]
 800ae08:	2f00      	cmp	r7, #0
 800ae0a:	dd76      	ble.n	800aefa <LCD_DrawBitmap+0x206>
 800ae0c:	f890 e011 	ldrb.w	lr, [r0, #17]
 800ae10:	483c      	ldr	r0, [pc, #240]	; (800af04 <LCD_DrawBitmap+0x210>)
 800ae12:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ae14:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800ae18:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800ae1c:	9403      	str	r4, [sp, #12]
 800ae1e:	e88d 0042 	stmia.w	sp, {r1, r6}
 800ae22:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	9702      	str	r7, [sp, #8]
 800ae28:	9405      	str	r4, [sp, #20]
 800ae2a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800ae2e:	9b07      	ldr	r3, [sp, #28]
 800ae30:	4629      	mov	r1, r5
 800ae32:	47a0      	blx	r4
 800ae34:	e061      	b.n	800aefa <LCD_DrawBitmap+0x206>
 800ae36:	f1c6 0708 	rsb	r7, r6, #8
 800ae3a:	970e      	str	r7, [sp, #56]	; 0x38
 800ae3c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800ae40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ae42:	455f      	cmp	r7, fp
 800ae44:	da59      	bge.n	800aefa <LCD_DrawBitmap+0x206>
 800ae46:	4b2e      	ldr	r3, [pc, #184]	; (800af00 <LCD_DrawBitmap+0x20c>)
 800ae48:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4447      	add	r7, r8
 800ae4e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800ae52:	970c      	str	r7, [sp, #48]	; 0x30
 800ae54:	3f01      	subs	r7, #1
 800ae56:	4297      	cmp	r7, r2
 800ae58:	970d      	str	r7, [sp, #52]	; 0x34
 800ae5a:	db46      	blt.n	800aeea <LCD_DrawBitmap+0x1f6>
 800ae5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ae60:	4598      	cmp	r8, r3
 800ae62:	dc42      	bgt.n	800aeea <LCD_DrawBitmap+0x1f6>
 800ae64:	f04f 0a00 	mov.w	sl, #0
 800ae68:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae6a:	46ac      	mov	ip, r5
 800ae6c:	4657      	mov	r7, sl
 800ae6e:	9807      	ldr	r0, [sp, #28]
 800ae70:	4287      	cmp	r7, r0
 800ae72:	da3a      	bge.n	800aeea <LCD_DrawBitmap+0x1f6>
 800ae74:	f1ba 0f00 	cmp.w	sl, #0
 800ae78:	d106      	bne.n	800ae88 <LCD_DrawBitmap+0x194>
 800ae7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae7c:	f890 9000 	ldrb.w	r9, [r0]
 800ae80:	3001      	adds	r0, #1
 800ae82:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae84:	f04f 0a08 	mov.w	sl, #8
 800ae88:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ae8a:	4a1d      	ldr	r2, [pc, #116]	; (800af00 <LCD_DrawBitmap+0x20c>)
 800ae8c:	fa49 f301 	asr.w	r3, r9, r1
 800ae90:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800ae94:	fa09 f906 	lsl.w	r9, r9, r6
 800ae98:	fa5f f989 	uxtb.w	r9, r9
 800ae9c:	ebc6 0a0a 	rsb	sl, r6, sl
 800aea0:	d103      	bne.n	800aeaa <LCD_DrawBitmap+0x1b6>
 800aea2:	6810      	ldr	r0, [r2, #0]
 800aea4:	7c00      	ldrb	r0, [r0, #16]
 800aea6:	0780      	lsls	r0, r0, #30
 800aea8:	d41b      	bmi.n	800aee2 <LCD_DrawBitmap+0x1ee>
 800aeaa:	6812      	ldr	r2, [r2, #0]
 800aeac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aeae:	6810      	ldr	r0, [r2, #0]
 800aeb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800aeb2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800aeb4:	b110      	cbz	r0, 800aebc <LCD_DrawBitmap+0x1c8>
 800aeb6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800aeba:	e000      	b.n	800aebe <LCD_DrawBitmap+0x1ca>
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	1e4a      	subs	r2, r1, #1
 800aec4:	4462      	add	r2, ip
 800aec6:	4660      	mov	r0, ip
 800aec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeca:	f8cd c020 	str.w	ip, [sp, #32]
 800aece:	4641      	mov	r1, r8
 800aed0:	f7ff fe08 	bl	800aae4 <LCD_FillRect>
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <LCD_DrawBitmap+0x20c>)
 800aed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aee4:	3701      	adds	r7, #1
 800aee6:	449c      	add	ip, r3
 800aee8:	e7c1      	b.n	800ae6e <LCD_DrawBitmap+0x17a>
 800aeea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aeec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800aef0:	3701      	adds	r7, #1
 800aef2:	970a      	str	r7, [sp, #40]	; 0x28
 800aef4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800aef6:	443c      	add	r4, r7
 800aef8:	e7a2      	b.n	800ae40 <LCD_DrawBitmap+0x14c>
 800aefa:	b011      	add	sp, #68	; 0x44
 800aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af00:	20000044 	.word	0x20000044
 800af04:	200037e8 	.word	0x200037e8
 800af08:	200037a0 	.word	0x200037a0

0800af0c <LCD_SetClipRectMax>:
 800af0c:	b508      	push	{r3, lr}
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <LCD_SetClipRectMax+0x18>)
 800af10:	6819      	ldr	r1, [r3, #0]
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <LCD_SetClipRectMax+0x1c>)
 800af14:	7c4a      	ldrb	r2, [r1, #17]
 800af16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af1a:	68c3      	ldr	r3, [r0, #12]
 800af1c:	3108      	adds	r1, #8
 800af1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af20:	4798      	blx	r3
 800af22:	bd08      	pop	{r3, pc}
 800af24:	20000044 	.word	0x20000044
 800af28:	200037e8 	.word	0x200037e8

0800af2c <emWin_LCD_Init>:
 800af2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af2e:	f7ff ffed 	bl	800af0c <LCD_SetClipRectMax>
 800af32:	f7ff fd0d 	bl	800a950 <LCD_InitColors>
 800af36:	4604      	mov	r4, r0
 800af38:	2800      	cmp	r0, #0
 800af3a:	d145      	bne.n	800afc8 <emWin_LCD_Init+0x9c>
 800af3c:	4605      	mov	r5, r0
 800af3e:	4628      	mov	r0, r5
 800af40:	f7fc faae 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800af44:	9001      	str	r0, [sp, #4]
 800af46:	b150      	cbz	r0, 800af5e <emWin_LCD_Init+0x32>
 800af48:	68c3      	ldr	r3, [r0, #12]
 800af4a:	210c      	movs	r1, #12
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	a801      	add	r0, sp, #4
 800af50:	4798      	blx	r3
 800af52:	4603      	mov	r3, r0
 800af54:	2800      	cmp	r0, #0
 800af56:	d035      	beq.n	800afc4 <emWin_LCD_Init+0x98>
 800af58:	9801      	ldr	r0, [sp, #4]
 800af5a:	4798      	blx	r3
 800af5c:	4304      	orrs	r4, r0
 800af5e:	3501      	adds	r5, #1
 800af60:	2d02      	cmp	r5, #2
 800af62:	d1ec      	bne.n	800af3e <emWin_LCD_Init+0x12>
 800af64:	bb84      	cbnz	r4, 800afc8 <emWin_LCD_Init+0x9c>
 800af66:	f7ff fd0f 	bl	800a988 <LCD_InitLUT>
 800af6a:	4b19      	ldr	r3, [pc, #100]	; (800afd0 <emWin_LCD_Init+0xa4>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800af72:	429a      	cmp	r2, r3
 800af74:	d101      	bne.n	800af7a <emWin_LCD_Init+0x4e>
 800af76:	2000      	movs	r0, #0
 800af78:	e027      	b.n	800afca <emWin_LCD_Init+0x9e>
 800af7a:	2401      	movs	r4, #1
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7fc fa8f 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800af82:	9001      	str	r0, [sp, #4]
 800af84:	b1d0      	cbz	r0, 800afbc <emWin_LCD_Init+0x90>
 800af86:	4620      	mov	r0, r4
 800af88:	f000 f89e 	bl	800b0c8 <GUI_SelectLayer>
 800af8c:	2004      	movs	r0, #4
 800af8e:	f7ff fd4d 	bl	800aa2c <LCD_SetDrawMode>
 800af92:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800af96:	2000      	movs	r0, #0
 800af98:	4601      	mov	r1, r0
 800af9a:	4613      	mov	r3, r2
 800af9c:	f7ff fda2 	bl	800aae4 <LCD_FillRect>
 800afa0:	2000      	movs	r0, #0
 800afa2:	f7ff fd43 	bl	800aa2c <LCD_SetDrawMode>
 800afa6:	a802      	add	r0, sp, #8
 800afa8:	210e      	movs	r1, #14
 800afaa:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	4798      	blx	r3
 800afb4:	4603      	mov	r3, r0
 800afb6:	b108      	cbz	r0, 800afbc <emWin_LCD_Init+0x90>
 800afb8:	9801      	ldr	r0, [sp, #4]
 800afba:	4798      	blx	r3
 800afbc:	f114 34ff 	adds.w	r4, r4, #4294967295
 800afc0:	d2dc      	bcs.n	800af7c <emWin_LCD_Init+0x50>
 800afc2:	e7d8      	b.n	800af76 <emWin_LCD_Init+0x4a>
 800afc4:	2001      	movs	r0, #1
 800afc6:	e000      	b.n	800afca <emWin_LCD_Init+0x9e>
 800afc8:	4620      	mov	r0, r4
 800afca:	b003      	add	sp, #12
 800afcc:	bd30      	pop	{r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	200028d0 	.word	0x200028d0

0800afd4 <LCD_Color2Index>:
 800afd4:	b508      	push	{r3, lr}
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <LCD_Color2Index+0x18>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	7c5a      	ldrb	r2, [r3, #17]
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <LCD_Color2Index+0x1c>)
 800afde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4798      	blx	r3
 800afe8:	bd08      	pop	{r3, pc}
 800afea:	bf00      	nop
 800afec:	20000044 	.word	0x20000044
 800aff0:	200037e8 	.word	0x200037e8

0800aff4 <LCD_Index2Color>:
 800aff4:	b508      	push	{r3, lr}
 800aff6:	4b05      	ldr	r3, [pc, #20]	; (800b00c <LCD_Index2Color+0x18>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	7c5a      	ldrb	r2, [r3, #17]
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <LCD_Index2Color+0x1c>)
 800affe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	4798      	blx	r3
 800b008:	bd08      	pop	{r3, pc}
 800b00a:	bf00      	nop
 800b00c:	20000044 	.word	0x20000044
 800b010:	200037e8 	.word	0x200037e8

0800b014 <LCD_SetColorIndex>:
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <LCD_SetColorIndex+0x14>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	7c1a      	ldrb	r2, [r3, #16]
 800b01a:	0752      	lsls	r2, r2, #29
 800b01c:	bf4c      	ite	mi
 800b01e:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800b020:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800b022:	6018      	str	r0, [r3, #0]
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	20000044 	.word	0x20000044

0800b02c <_SetColor>:
 800b02c:	b508      	push	{r3, lr}
 800b02e:	4b06      	ldr	r3, [pc, #24]	; (800b048 <_SetColor+0x1c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b034:	4281      	cmp	r1, r0
 800b036:	d006      	beq.n	800b046 <_SetColor+0x1a>
 800b038:	6318      	str	r0, [r3, #48]	; 0x30
 800b03a:	f7ff ffcb 	bl	800afd4 <LCD_Color2Index>
 800b03e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b042:	f7ff bfe7 	b.w	800b014 <LCD_SetColorIndex>
 800b046:	bd08      	pop	{r3, pc}
 800b048:	20000044 	.word	0x20000044

0800b04c <LCD_SetBkColorIndex>:
 800b04c:	4b04      	ldr	r3, [pc, #16]	; (800b060 <LCD_SetBkColorIndex+0x14>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	7c1a      	ldrb	r2, [r3, #16]
 800b052:	0752      	lsls	r2, r2, #29
 800b054:	bf4c      	ite	mi
 800b056:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800b058:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800b05a:	6018      	str	r0, [r3, #0]
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	20000044 	.word	0x20000044

0800b064 <_SetBkColor>:
 800b064:	b508      	push	{r3, lr}
 800b066:	4b06      	ldr	r3, [pc, #24]	; (800b080 <_SetBkColor+0x1c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b06c:	4281      	cmp	r1, r0
 800b06e:	d006      	beq.n	800b07e <_SetBkColor+0x1a>
 800b070:	6358      	str	r0, [r3, #52]	; 0x34
 800b072:	f7ff ffaf 	bl	800afd4 <LCD_Color2Index>
 800b076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b07a:	f7ff bfe7 	b.w	800b04c <LCD_SetBkColorIndex>
 800b07e:	bd08      	pop	{r3, pc}
 800b080:	20000044 	.word	0x20000044

0800b084 <LCD_SetBkColor>:
 800b084:	b508      	push	{r3, lr}
 800b086:	4b02      	ldr	r3, [pc, #8]	; (800b090 <LCD_SetBkColor+0xc>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4798      	blx	r3
 800b08e:	bd08      	pop	{r3, pc}
 800b090:	20000068 	.word	0x20000068

0800b094 <LCD_SetColor>:
 800b094:	b508      	push	{r3, lr}
 800b096:	4b02      	ldr	r3, [pc, #8]	; (800b0a0 <LCD_SetColor+0xc>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4798      	blx	r3
 800b09e:	bd08      	pop	{r3, pc}
 800b0a0:	20000068 	.word	0x20000068

0800b0a4 <GUI_SignalEvent>:
 800b0a4:	b508      	push	{r3, lr}
 800b0a6:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <GUI_SignalEvent+0xc>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <GUI_SignalEvent+0xa>
 800b0ac:	4798      	blx	r3
 800b0ae:	bd08      	pop	{r3, pc}
 800b0b0:	200029f4 	.word	0x200029f4

0800b0b4 <_GetCharCode>:
 800b0b4:	7800      	ldrb	r0, [r0, #0]
 800b0b6:	4770      	bx	lr

0800b0b8 <_GetCharSize>:
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	4770      	bx	lr

0800b0bc <_CalcSizeOfChar>:
 800b0bc:	2001      	movs	r0, #1
 800b0be:	4770      	bx	lr

0800b0c0 <_Encode>:
 800b0c0:	7001      	strb	r1, [r0, #0]
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	4770      	bx	lr
	...

0800b0c8 <GUI_SelectLayer>:
 800b0c8:	b570      	push	{r4, r5, r6, lr}
 800b0ca:	4d08      	ldr	r5, [pc, #32]	; (800b0ec <GUI_SelectLayer+0x24>)
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	2801      	cmp	r0, #1
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	7c5e      	ldrb	r6, [r3, #17]
 800b0d4:	d808      	bhi.n	800b0e8 <GUI_SelectLayer+0x20>
 800b0d6:	f7fc f9e3 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800b0da:	b128      	cbz	r0, 800b0e8 <GUI_SelectLayer+0x20>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	745c      	strb	r4, [r3, #17]
 800b0e0:	f7fc fc4d 	bl	800797e <GUI_SelectLCD>
 800b0e4:	4b02      	ldr	r3, [pc, #8]	; (800b0f0 <GUI_SelectLayer+0x28>)
 800b0e6:	601c      	str	r4, [r3, #0]
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}
 800b0ec:	20000044 	.word	0x20000044
 800b0f0:	200038e0 	.word	0x200038e0

0800b0f4 <GUI_StoreKey>:
 800b0f4:	4b02      	ldr	r3, [pc, #8]	; (800b100 <GUI_StoreKey+0xc>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	b902      	cbnz	r2, 800b0fc <GUI_StoreKey+0x8>
 800b0fa:	6018      	str	r0, [r3, #0]
 800b0fc:	f7ff bfd2 	b.w	800b0a4 <GUI_SignalEvent>
 800b100:	200029f8 	.word	0x200029f8

0800b104 <_GetIndexMask_0>:
 800b104:	b508      	push	{r3, lr}
 800b106:	f7ff fb65 	bl	800a7d4 <LCD_GetNumColors>
 800b10a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b10e:	d010      	beq.n	800b132 <_GetIndexMask_0+0x2e>
 800b110:	287f      	cmp	r0, #127	; 0x7f
 800b112:	d810      	bhi.n	800b136 <_GetIndexMask_0+0x32>
 800b114:	283f      	cmp	r0, #63	; 0x3f
 800b116:	d810      	bhi.n	800b13a <_GetIndexMask_0+0x36>
 800b118:	281f      	cmp	r0, #31
 800b11a:	d810      	bhi.n	800b13e <_GetIndexMask_0+0x3a>
 800b11c:	280f      	cmp	r0, #15
 800b11e:	d810      	bhi.n	800b142 <_GetIndexMask_0+0x3e>
 800b120:	2807      	cmp	r0, #7
 800b122:	d810      	bhi.n	800b146 <_GetIndexMask_0+0x42>
 800b124:	2803      	cmp	r0, #3
 800b126:	d810      	bhi.n	800b14a <_GetIndexMask_0+0x46>
 800b128:	2801      	cmp	r0, #1
 800b12a:	bf94      	ite	ls
 800b12c:	2000      	movls	r0, #0
 800b12e:	2001      	movhi	r0, #1
 800b130:	e00c      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b132:	2008      	movs	r0, #8
 800b134:	e00a      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b136:	2007      	movs	r0, #7
 800b138:	e008      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b13a:	2006      	movs	r0, #6
 800b13c:	e006      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b13e:	2005      	movs	r0, #5
 800b140:	e004      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b142:	2004      	movs	r0, #4
 800b144:	e002      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b146:	2003      	movs	r0, #3
 800b148:	e000      	b.n	800b14c <_GetIndexMask_0+0x48>
 800b14a:	2002      	movs	r0, #2
 800b14c:	2301      	movs	r3, #1
 800b14e:	fa03 f000 	lsl.w	r0, r3, r0
 800b152:	3801      	subs	r0, #1
 800b154:	bd08      	pop	{r3, pc}

0800b156 <_Index2Color_0>:
 800b156:	b538      	push	{r3, r4, r5, lr}
 800b158:	4604      	mov	r4, r0
 800b15a:	f7ff fb3b 	bl	800a7d4 <LCD_GetNumColors>
 800b15e:	4605      	mov	r5, r0
 800b160:	f7ff fb56 	bl	800a810 <LCD_GetPalette>
 800b164:	42ac      	cmp	r4, r5
 800b166:	d203      	bcs.n	800b170 <_Index2Color_0+0x1a>
 800b168:	b118      	cbz	r0, 800b172 <_Index2Color_0+0x1c>
 800b16a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	2000      	movs	r0, #0
 800b172:	bd38      	pop	{r3, r4, r5, pc}

0800b174 <_Color2Index_0>:
 800b174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b178:	4682      	mov	sl, r0
 800b17a:	f7ff fb2b 	bl	800a7d4 <LCD_GetNumColors>
 800b17e:	4681      	mov	r9, r0
 800b180:	f7ff fb46 	bl	800a810 <LCD_GetPalette>
 800b184:	4605      	mov	r5, r0
 800b186:	b1e0      	cbz	r0, 800b1c2 <_Color2Index_0+0x4e>
 800b188:	2300      	movs	r3, #0
 800b18a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800b18e:	4592      	cmp	sl, r2
 800b190:	d019      	beq.n	800b1c6 <_Color2Index_0+0x52>
 800b192:	3301      	adds	r3, #1
 800b194:	454b      	cmp	r3, r9
 800b196:	dbf8      	blt.n	800b18a <_Color2Index_0+0x16>
 800b198:	2700      	movs	r7, #0
 800b19a:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800b19e:	463c      	mov	r4, r7
 800b1a0:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 800b1a4:	4650      	mov	r0, sl
 800b1a6:	f7fc fb61 	bl	800786c <GUI_CalcColorDist>
 800b1aa:	4626      	mov	r6, r4
 800b1ac:	4540      	cmp	r0, r8
 800b1ae:	f104 0401 	add.w	r4, r4, #1
 800b1b2:	bf24      	itt	cs
 800b1b4:	4640      	movcs	r0, r8
 800b1b6:	463e      	movcs	r6, r7
 800b1b8:	454c      	cmp	r4, r9
 800b1ba:	da07      	bge.n	800b1cc <_Color2Index_0+0x58>
 800b1bc:	4680      	mov	r8, r0
 800b1be:	4637      	mov	r7, r6
 800b1c0:	e7ee      	b.n	800b1a0 <_Color2Index_0+0x2c>
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b1d2 <WM__GetFirstSibling>:
 800b1d2:	b508      	push	{r3, lr}
 800b1d4:	f7fd fe88 	bl	8008ee8 <WM_GetParent>
 800b1d8:	b118      	cbz	r0, 800b1e2 <WM__GetFirstSibling+0x10>
 800b1da:	f7fd fc0f 	bl	80089fc <GUI_ALLOC_h2p>
 800b1de:	69c0      	ldr	r0, [r0, #28]
 800b1e0:	bd08      	pop	{r3, pc}
 800b1e2:	bd08      	pop	{r3, pc}

0800b1e4 <WM__GetPrevSibling>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	f7ff fff3 	bl	800b1d2 <WM__GetFirstSibling>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	b154      	cbz	r4, 800b206 <WM__GetPrevSibling+0x22>
 800b1f0:	42ac      	cmp	r4, r5
 800b1f2:	d007      	beq.n	800b204 <WM__GetPrevSibling+0x20>
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f7fd fc01 	bl	80089fc <GUI_ALLOC_h2p>
 800b1fa:	6a03      	ldr	r3, [r0, #32]
 800b1fc:	42ab      	cmp	r3, r5
 800b1fe:	d002      	beq.n	800b206 <WM__GetPrevSibling+0x22>
 800b200:	461c      	mov	r4, r3
 800b202:	e7f4      	b.n	800b1ee <WM__GetPrevSibling+0xa>
 800b204:	2400      	movs	r4, #0
 800b206:	4620      	mov	r0, r4
 800b208:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b20c <WM__SendMessage>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4c0d      	ldr	r4, [pc, #52]	; (800b244 <WM__SendMessage+0x38>)
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	2b13      	cmp	r3, #19
 800b214:	4606      	mov	r6, r0
 800b216:	460d      	mov	r5, r1
 800b218:	dc12      	bgt.n	800b240 <WM__SendMessage+0x34>
 800b21a:	f7fd fbef 	bl	80089fc <GUI_ALLOC_h2p>
 800b21e:	6903      	ldr	r3, [r0, #16]
 800b220:	606e      	str	r6, [r5, #4]
 800b222:	b143      	cbz	r3, 800b236 <WM__SendMessage+0x2a>
 800b224:	6822      	ldr	r2, [r4, #0]
 800b226:	4628      	mov	r0, r5
 800b228:	3201      	adds	r2, #1
 800b22a:	6022      	str	r2, [r4, #0]
 800b22c:	4798      	blx	r3
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	3b01      	subs	r3, #1
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	bd70      	pop	{r4, r5, r6, pc}
 800b236:	4628      	mov	r0, r5
 800b238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b23c:	f7fe bc32 	b.w	8009aa4 <WM_DefaultProc>
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	bf00      	nop
 800b244:	200029fc 	.word	0x200029fc

0800b248 <WM__AddCriticalHandle>:
 800b248:	4b02      	ldr	r3, [pc, #8]	; (800b254 <WM__AddCriticalHandle+0xc>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6002      	str	r2, [r0, #0]
 800b24e:	6018      	str	r0, [r3, #0]
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	200038fc 	.word	0x200038fc

0800b258 <WM__GetClientRectEx>:
 800b258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b25a:	460d      	mov	r5, r1
 800b25c:	b158      	cbz	r0, 800b276 <WM__GetClientRectEx+0x1e>
 800b25e:	b151      	cbz	r1, 800b276 <WM__GetClientRectEx+0x1e>
 800b260:	f7fd fbd6 	bl	8008a10 <GUI_ALLOC_LockH>
 800b264:	ac02      	add	r4, sp, #8
 800b266:	4629      	mov	r1, r5
 800b268:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b26c:	f7fe f8da 	bl	8009424 <WM__GetClientRectWin>
 800b270:	4620      	mov	r0, r4
 800b272:	f7fd fbdb 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b276:	b003      	add	sp, #12
 800b278:	bd30      	pop	{r4, r5, pc}

0800b27a <_Convert16>:
 800b27a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b282:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800b286:	4605      	mov	r5, r0
 800b288:	460e      	mov	r6, r1
 800b28a:	4690      	mov	r8, r2
 800b28c:	461f      	mov	r7, r3
 800b28e:	4614      	mov	r4, r2
 800b290:	4689      	mov	r9, r1
 800b292:	f835 0b02 	ldrh.w	r0, [r5], #2
 800b296:	47d8      	blx	fp
 800b298:	47d0      	blx	sl
 800b29a:	3c01      	subs	r4, #1
 800b29c:	f849 0b04 	str.w	r0, [r9], #4
 800b2a0:	d1f7      	bne.n	800b292 <_Convert16+0x18>
 800b2a2:	2f1f      	cmp	r7, #31
 800b2a4:	d806      	bhi.n	800b2b4 <_Convert16+0x3a>
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	463a      	mov	r2, r7
 800b2ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	f000 bbee 	b.w	800ba90 <GUI__CompactPixelIndices>
 800b2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2b8 <_Convert8>:
 800b2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b2c0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	460e      	mov	r6, r1
 800b2c8:	4690      	mov	r8, r2
 800b2ca:	461f      	mov	r7, r3
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b2d4:	47d8      	blx	fp
 800b2d6:	47d0      	blx	sl
 800b2d8:	1b2b      	subs	r3, r5, r4
 800b2da:	4443      	add	r3, r8
 800b2dc:	f849 0b04 	str.w	r0, [r9], #4
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1f5      	bne.n	800b2d0 <_Convert8+0x18>
 800b2e4:	2f1f      	cmp	r7, #31
 800b2e6:	d806      	bhi.n	800b2f6 <_Convert8+0x3e>
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4641      	mov	r1, r8
 800b2ec:	463a      	mov	r2, r7
 800b2ee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f2:	f000 bbcd 	b.w	800ba90 <GUI__CompactPixelIndices>
 800b2f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b2fc <GUI_MEMDEV__WriteToActiveOpaque>:
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	b09d      	sub	sp, #116	; 0x74
 800b302:	4606      	mov	r6, r0
 800b304:	910f      	str	r1, [sp, #60]	; 0x3c
 800b306:	920d      	str	r2, [sp, #52]	; 0x34
 800b308:	2800      	cmp	r0, #0
 800b30a:	f000 8386 	beq.w	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b30e:	f7fd fb7f 	bl	8008a10 <GUI_ALLOC_LockH>
 800b312:	ab1c      	add	r3, sp, #112	; 0x70
 800b314:	6944      	ldr	r4, [r0, #20]
 800b316:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fd fb86 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff f9af 	bl	800a684 <GUI_MEMDEV_GetBitsPerPixel>
 800b326:	2808      	cmp	r0, #8
 800b328:	4601      	mov	r1, r0
 800b32a:	dd02      	ble.n	800b332 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800b32c:	2c00      	cmp	r4, #0
 800b32e:	f000 81c3 	beq.w	800b6b8 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800b332:	2201      	movs	r2, #1
 800b334:	f04f 0800 	mov.w	r8, #0
 800b338:	4630      	mov	r0, r6
 800b33a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b33c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b33e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b342:	f7fd fb65 	bl	8008a10 <GUI_ALLOC_LockH>
 800b346:	6803      	ldr	r3, [r0, #0]
 800b348:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800b958 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	930e      	str	r3, [sp, #56]	; 0x38
 800b356:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800b35a:	f8da 3000 	ldr.w	r3, [sl]
 800b35e:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800b362:	6904      	ldr	r4, [r0, #16]
 800b364:	6945      	ldr	r5, [r0, #20]
 800b366:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800b36a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800b36e:	7c58      	ldrb	r0, [r3, #17]
 800b370:	9112      	str	r1, [sp, #72]	; 0x48
 800b372:	f7ff fa37 	bl	800a7e4 <GUI_GetBitsPerPixelEx>
 800b376:	f8da 3000 	ldr.w	r3, [sl]
 800b37a:	9010      	str	r0, [sp, #64]	; 0x40
 800b37c:	7c58      	ldrb	r0, [r3, #17]
 800b37e:	f7ff fa4f 	bl	800a820 <GUI_GetpfIndex2ColorEx>
 800b382:	4603      	mov	r3, r0
 800b384:	4658      	mov	r0, fp
 800b386:	9309      	str	r3, [sp, #36]	; 0x24
 800b388:	f7fd fb50 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b38c:	2c08      	cmp	r4, #8
 800b38e:	4651      	mov	r1, sl
 800b390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	d904      	bls.n	800b3a0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800b396:	2c10      	cmp	r4, #16
 800b398:	bf8c      	ite	hi
 800b39a:	2204      	movhi	r2, #4
 800b39c:	2202      	movls	r2, #2
 800b39e:	e005      	b.n	800b3ac <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800b3a0:	2c01      	cmp	r4, #1
 800b3a2:	d103      	bne.n	800b3ac <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800b3a4:	9411      	str	r4, [sp, #68]	; 0x44
 800b3a6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800b3aa:	e000      	b.n	800b3ae <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800b3ac:	9211      	str	r2, [sp, #68]	; 0x44
 800b3ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b3b0:	4298      	cmp	r0, r3
 800b3b2:	f000 80e2 	beq.w	800b57a <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800b3b6:	680b      	ldr	r3, [r1, #0]
 800b3b8:	7c58      	ldrb	r0, [r3, #17]
 800b3ba:	f7ff fa41 	bl	800a840 <GUI_GetpfColor2IndexEx>
 800b3be:	9013      	str	r0, [sp, #76]	; 0x4c
 800b3c0:	00b8      	lsls	r0, r7, #2
 800b3c2:	f7fd fccf 	bl	8008d64 <GUI_ALLOC_AllocNoInit>
 800b3c6:	900c      	str	r0, [sp, #48]	; 0x30
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f000 8326 	beq.w	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7fe fc3a 	bl	8009c48 <GUI_MEMDEV_GetDataPtr>
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	f000 80be 	beq.w	800b558 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f7fd fb17 	bl	8008a10 <GUI_ALLOC_LockH>
 800b3e2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800b3e6:	9018      	str	r0, [sp, #96]	; 0x60
 800b3e8:	f04f 0a00 	mov.w	sl, #0
 800b3ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3ee:	4592      	cmp	sl, r2
 800b3f0:	f280 80ae 	bge.w	800b550 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800b3f4:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9319      	str	r3, [sp, #100]	; 0x64
 800b3fa:	6883      	ldr	r3, [r0, #8]
 800b3fc:	a919      	add	r1, sp, #100	; 0x64
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	4652      	mov	r2, sl
 800b402:	4798      	blx	r3
 800b404:	42b8      	cmp	r0, r7
 800b406:	4605      	mov	r5, r0
 800b408:	d12f      	bne.n	800b46a <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800b40a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b40c:	f7fd fb00 	bl	8008a10 <GUI_ALLOC_LockH>
 800b410:	2c08      	cmp	r4, #8
 800b412:	4601      	mov	r1, r0
 800b414:	9016      	str	r0, [sp, #88]	; 0x58
 800b416:	d909      	bls.n	800b42c <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800b418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b41a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b41c:	9200      	str	r2, [sp, #0]
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	4630      	mov	r0, r6
 800b422:	463a      	mov	r2, r7
 800b424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b426:	f7ff ff28 	bl	800b27a <_Convert16>
 800b42a:	e008      	b.n	800b43e <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800b42c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b42e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b430:	9000      	str	r0, [sp, #0]
 800b432:	9201      	str	r2, [sp, #4]
 800b434:	4630      	mov	r0, r6
 800b436:	463a      	mov	r2, r7
 800b438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b43a:	f7ff ff3d 	bl	800b2b8 <_Convert8>
 800b43e:	2301      	movs	r3, #1
 800b440:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b442:	9002      	str	r0, [sp, #8]
 800b444:	ad1c      	add	r5, sp, #112	; 0x70
 800b446:	2200      	movs	r2, #0
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	9203      	str	r2, [sp, #12]
 800b44e:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800b452:	9204      	str	r2, [sp, #16]
 800b454:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b456:	f8cd 8014 	str.w	r8, [sp, #20]
 800b45a:	4659      	mov	r1, fp
 800b45c:	463a      	mov	r2, r7
 800b45e:	f7ff fc49 	bl	800acf4 <LCD_DrawBitmap>
 800b462:	4628      	mov	r0, r5
 800b464:	f7fd fae2 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b468:	e060      	b.n	800b52c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800b46a:	2c01      	cmp	r4, #1
 800b46c:	d15c      	bne.n	800b528 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800b46e:	2d00      	cmp	r5, #0
 800b470:	d05c      	beq.n	800b52c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800b472:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b474:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b476:	f8cd 900c 	str.w	r9, [sp, #12]
 800b47a:	2208      	movs	r2, #8
 800b47c:	fb90 f2f2 	sdiv	r2, r0, r2
 800b480:	4432      	add	r2, r6
 800b482:	2301      	movs	r3, #1
 800b484:	9204      	str	r2, [sp, #16]
 800b486:	f000 0207 	and.w	r2, r0, #7
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	4408      	add	r0, r1
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	9302      	str	r3, [sp, #8]
 800b492:	9206      	str	r2, [sp, #24]
 800b494:	4659      	mov	r1, fp
 800b496:	462a      	mov	r2, r5
 800b498:	f8cd 8014 	str.w	r8, [sp, #20]
 800b49c:	f7ff fb4e 	bl	800ab3c <LCD__DrawBitmap_1bpp>
 800b4a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4a2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b4a4:	441d      	add	r5, r3
 800b4a6:	6883      	ldr	r3, [r0, #8]
 800b4a8:	9519      	str	r5, [sp, #100]	; 0x64
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	a919      	add	r1, sp, #100	; 0x64
 800b4ae:	4652      	mov	r2, sl
 800b4b0:	4798      	blx	r3
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	e7db      	b.n	800b46e <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800b4b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b4b8:	f7fd faaa 	bl	8008a10 <GUI_ALLOC_LockH>
 800b4bc:	2c08      	cmp	r4, #8
 800b4be:	4601      	mov	r1, r0
 800b4c0:	9016      	str	r0, [sp, #88]	; 0x58
 800b4c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b4c4:	d938      	bls.n	800b538 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800b4c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4c8:	9200      	str	r2, [sp, #0]
 800b4ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b4cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	fb00 6002 	mla	r0, r0, r2, r6
 800b4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	f7ff fecf 	bl	800b27a <_Convert16>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800b4e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	9002      	str	r0, [sp, #8]
 800b4ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4ee:	9203      	str	r2, [sp, #12]
 800b4f0:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b4f2:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800b4f6:	9204      	str	r2, [sp, #16]
 800b4f8:	4408      	add	r0, r1
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	4659      	mov	r1, fp
 800b4fe:	f8cd 8014 	str.w	r8, [sp, #20]
 800b502:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800b506:	f7ff fbf5 	bl	800acf4 <LCD_DrawBitmap>
 800b50a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800b50e:	4660      	mov	r0, ip
 800b510:	f7fd fa8c 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b514:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b516:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b518:	441d      	add	r5, r3
 800b51a:	6883      	ldr	r3, [r0, #8]
 800b51c:	9519      	str	r5, [sp, #100]	; 0x64
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	a919      	add	r1, sp, #100	; 0x64
 800b522:	4652      	mov	r2, sl
 800b524:	4798      	blx	r3
 800b526:	4605      	mov	r5, r0
 800b528:	2d00      	cmp	r5, #0
 800b52a:	d1c4      	bne.n	800b4b6 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800b52c:	444e      	add	r6, r9
 800b52e:	f10a 0a01 	add.w	sl, sl, #1
 800b532:	f10b 0b01 	add.w	fp, fp, #1
 800b536:	e759      	b.n	800b3ec <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800b538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b53e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b540:	9201      	str	r2, [sp, #4]
 800b542:	fb00 6003 	mla	r0, r0, r3, r6
 800b546:	462a      	mov	r2, r5
 800b548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b54a:	f7ff feb5 	bl	800b2b8 <_Convert8>
 800b54e:	e7c5      	b.n	800b4dc <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800b550:	a818      	add	r0, sp, #96	; 0x60
 800b552:	f7fd fa6b 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b556:	e00e      	b.n	800b576 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800b558:	2301      	movs	r3, #1
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	9004      	str	r0, [sp, #16]
 800b560:	9402      	str	r4, [sp, #8]
 800b562:	f8cd 900c 	str.w	r9, [sp, #12]
 800b566:	f8cd 8014 	str.w	r8, [sp, #20]
 800b56a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b56c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b56e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b570:	463a      	mov	r2, r7
 800b572:	f7ff fbbf 	bl	800acf4 <LCD_DrawBitmap>
 800b576:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b578:	e24d      	b.n	800ba16 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7fe fb64 	bl	8009c48 <GUI_MEMDEV_GetDataPtr>
 800b580:	4606      	mov	r6, r0
 800b582:	2d00      	cmp	r5, #0
 800b584:	f000 808a 	beq.w	800b69c <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800b588:	4628      	mov	r0, r5
 800b58a:	f7fd fa41 	bl	8008a10 <GUI_ALLOC_LockH>
 800b58e:	2500      	movs	r5, #0
 800b590:	9018      	str	r0, [sp, #96]	; 0x60
 800b592:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b594:	429d      	cmp	r5, r3
 800b596:	da7d      	bge.n	800b694 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800b598:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b59a:	2300      	movs	r3, #0
 800b59c:	9319      	str	r3, [sp, #100]	; 0x64
 800b59e:	6883      	ldr	r3, [r0, #8]
 800b5a0:	a919      	add	r1, sp, #100	; 0x64
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	462a      	mov	r2, r5
 800b5a6:	4798      	blx	r3
 800b5a8:	42b8      	cmp	r0, r7
 800b5aa:	4682      	mov	sl, r0
 800b5ac:	d124      	bne.n	800b5f8 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800b5ae:	46aa      	mov	sl, r5
 800b5b0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b5b2:	6883      	ldr	r3, [r0, #8]
 800b5b4:	f10a 0b01 	add.w	fp, sl, #1
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	a919      	add	r1, sp, #100	; 0x64
 800b5bc:	465a      	mov	r2, fp
 800b5be:	4798      	blx	r3
 800b5c0:	42b8      	cmp	r0, r7
 800b5c2:	d101      	bne.n	800b5c8 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800b5c4:	46da      	mov	sl, fp
 800b5c6:	e7f3      	b.n	800b5b0 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800b5c8:	ebc5 0b0a 	rsb	fp, r5, sl
 800b5cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b5ce:	9604      	str	r6, [sp, #16]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f10b 0b01 	add.w	fp, fp, #1
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	4429      	add	r1, r5
 800b5dc:	9402      	str	r4, [sp, #8]
 800b5de:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5e2:	f8cd 8014 	str.w	r8, [sp, #20]
 800b5e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b5e8:	463a      	mov	r2, r7
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	f7ff fb82 	bl	800acf4 <LCD_DrawBitmap>
 800b5f0:	fb09 660b 	mla	r6, r9, fp, r6
 800b5f4:	4655      	mov	r5, sl
 800b5f6:	e04b      	b.n	800b690 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800b5f8:	2c01      	cmp	r4, #1
 800b5fa:	d127      	bne.n	800b64c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800b5fc:	f1ba 0f00 	cmp.w	sl, #0
 800b600:	d022      	beq.n	800b648 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800b602:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b604:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b606:	f8cd 900c 	str.w	r9, [sp, #12]
 800b60a:	2208      	movs	r2, #8
 800b60c:	fb90 f2f2 	sdiv	r2, r0, r2
 800b610:	4432      	add	r2, r6
 800b612:	9204      	str	r2, [sp, #16]
 800b614:	f000 0207 	and.w	r2, r0, #7
 800b618:	4408      	add	r0, r1
 800b61a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b61c:	9206      	str	r2, [sp, #24]
 800b61e:	2301      	movs	r3, #1
 800b620:	4652      	mov	r2, sl
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	9302      	str	r3, [sp, #8]
 800b628:	4429      	add	r1, r5
 800b62a:	f8cd 8014 	str.w	r8, [sp, #20]
 800b62e:	f7ff fa85 	bl	800ab3c <LCD__DrawBitmap_1bpp>
 800b632:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b634:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b636:	4453      	add	r3, sl
 800b638:	9319      	str	r3, [sp, #100]	; 0x64
 800b63a:	6883      	ldr	r3, [r0, #8]
 800b63c:	a919      	add	r1, sp, #100	; 0x64
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	462a      	mov	r2, r5
 800b642:	4798      	blx	r3
 800b644:	4682      	mov	sl, r0
 800b646:	e7d9      	b.n	800b5fc <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800b648:	444e      	add	r6, r9
 800b64a:	e021      	b.n	800b690 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800b64c:	f1ba 0f00 	cmp.w	sl, #0
 800b650:	d0fa      	beq.n	800b648 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800b652:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b654:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b656:	9402      	str	r4, [sp, #8]
 800b658:	fb00 6201 	mla	r2, r0, r1, r6
 800b65c:	9204      	str	r2, [sp, #16]
 800b65e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b662:	f8cd 900c 	str.w	r9, [sp, #12]
 800b666:	2301      	movs	r3, #1
 800b668:	4410      	add	r0, r2
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	4652      	mov	r2, sl
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	4429      	add	r1, r5
 800b672:	f8cd 8014 	str.w	r8, [sp, #20]
 800b676:	f7ff fb3d 	bl	800acf4 <LCD_DrawBitmap>
 800b67a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b67c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b67e:	4453      	add	r3, sl
 800b680:	9319      	str	r3, [sp, #100]	; 0x64
 800b682:	6883      	ldr	r3, [r0, #8]
 800b684:	a919      	add	r1, sp, #100	; 0x64
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	462a      	mov	r2, r5
 800b68a:	4798      	blx	r3
 800b68c:	4682      	mov	sl, r0
 800b68e:	e7dd      	b.n	800b64c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800b690:	3501      	adds	r5, #1
 800b692:	e77e      	b.n	800b592 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800b694:	a818      	add	r0, sp, #96	; 0x60
 800b696:	f7fd f9c9 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b69a:	e1be      	b.n	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b69c:	2301      	movs	r3, #1
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	9301      	str	r3, [sp, #4]
 800b6a2:	9004      	str	r0, [sp, #16]
 800b6a4:	9402      	str	r4, [sp, #8]
 800b6a6:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6aa:	f8cd 8014 	str.w	r8, [sp, #20]
 800b6ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b6b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6b4:	463a      	mov	r2, r7
 800b6b6:	e041      	b.n	800b73c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	910a      	str	r1, [sp, #40]	; 0x28
 800b6bc:	f7fd f9a8 	bl	8008a10 <GUI_ALLOC_LockH>
 800b6c0:	4682      	mov	sl, r0
 800b6c2:	a81c      	add	r0, sp, #112	; 0x70
 800b6c4:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800b6c8:	f840 ad10 	str.w	sl, [r0, #-16]!
 800b6cc:	f8da 4000 	ldr.w	r4, [sl]
 800b6d0:	9210      	str	r2, [sp, #64]	; 0x40
 800b6d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b6d6:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800b6da:	4c9e      	ldr	r4, [pc, #632]	; (800b954 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800b6dc:	b213      	sxth	r3, r2
 800b6de:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b6e2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e6:	f7fd f9a1 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b6ea:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b6ee:	900e      	str	r0, [sp, #56]	; 0x38
 800b6f0:	4899      	ldr	r0, [pc, #612]	; (800b958 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800b6f2:	6800      	ldr	r0, [r0, #0]
 800b6f4:	7c40      	ldrb	r0, [r0, #17]
 800b6f6:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800b6fa:	6925      	ldr	r5, [r4, #16]
 800b6fc:	f8d5 8000 	ldr.w	r8, [r5]
 800b700:	f7ff f870 	bl	800a7e4 <GUI_GetBitsPerPixelEx>
 800b704:	2808      	cmp	r0, #8
 800b706:	fa0f fb87 	sxth.w	fp, r7
 800b70a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b70c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b710:	d904      	bls.n	800b71c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800b712:	2810      	cmp	r0, #16
 800b714:	bf8c      	ite	hi
 800b716:	2404      	movhi	r4, #4
 800b718:	2402      	movls	r4, #2
 800b71a:	e000      	b.n	800b71e <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800b71c:	2401      	movs	r4, #1
 800b71e:	45a9      	cmp	r9, r5
 800b720:	d10f      	bne.n	800b742 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800b722:	2001      	movs	r0, #1
 800b724:	9203      	str	r2, [sp, #12]
 800b726:	f10a 0218 	add.w	r2, sl, #24
 800b72a:	9000      	str	r0, [sp, #0]
 800b72c:	9001      	str	r0, [sp, #4]
 800b72e:	9102      	str	r1, [sp, #8]
 800b730:	9204      	str	r2, [sp, #16]
 800b732:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b734:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b736:	2200      	movs	r2, #0
 800b738:	9205      	str	r2, [sp, #20]
 800b73a:	465a      	mov	r2, fp
 800b73c:	f7ff fada 	bl	800acf4 <LCD_DrawBitmap>
 800b740:	e16b      	b.n	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b742:	2920      	cmp	r1, #32
 800b744:	f040 808e 	bne.w	800b864 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800b748:	fb0b f004 	mul.w	r0, fp, r4
 800b74c:	f7fd fb0a 	bl	8008d64 <GUI_ALLOC_AllocNoInit>
 800b750:	900e      	str	r0, [sp, #56]	; 0x38
 800b752:	2800      	cmp	r0, #0
 800b754:	f000 8161 	beq.w	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b758:	f7fd f95a 	bl	8008a10 <GUI_ALLOC_LockH>
 800b75c:	901a      	str	r0, [sp, #104]	; 0x68
 800b75e:	4630      	mov	r0, r6
 800b760:	f7fd f956 	bl	8008a10 <GUI_ALLOC_LockH>
 800b764:	9018      	str	r0, [sp, #96]	; 0x60
 800b766:	692b      	ldr	r3, [r5, #16]
 800b768:	f100 0a18 	add.w	sl, r0, #24
 800b76c:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800b770:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800b774:	2b00      	cmp	r3, #0
 800b776:	d02f      	beq.n	800b7d8 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800b778:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b77c:	2c02      	cmp	r4, #2
 800b77e:	d003      	beq.n	800b788 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800b780:	2c04      	cmp	r4, #4
 800b782:	d001      	beq.n	800b788 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800b784:	2c01      	cmp	r4, #1
 800b786:	d106      	bne.n	800b796 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800b788:	4650      	mov	r0, sl
 800b78a:	692f      	ldr	r7, [r5, #16]
 800b78c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b78e:	465a      	mov	r2, fp
 800b790:	4623      	mov	r3, r4
 800b792:	47b8      	blx	r7
 800b794:	44b2      	add	sl, r6
 800b796:	2301      	movs	r3, #1
 800b798:	2200      	movs	r2, #0
 800b79a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	9203      	str	r2, [sp, #12]
 800b7a2:	9104      	str	r1, [sp, #16]
 800b7a4:	9205      	str	r2, [sp, #20]
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	465a      	mov	r2, fp
 800b7aa:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b7b0:	f7ff faa0 	bl	800acf4 <LCD_DrawBitmap>
 800b7b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b7b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7b8:	f108 0701 	add.w	r7, r8, #1
 800b7bc:	fa02 f381 	sxtah	r3, r2, r1
 800b7c0:	42bb      	cmp	r3, r7
 800b7c2:	d107      	bne.n	800b7d4 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800b7c4:	a818      	add	r0, sp, #96	; 0x60
 800b7c6:	f7fd f931 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b7ca:	a81a      	add	r0, sp, #104	; 0x68
 800b7cc:	f7fd f92e 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b7d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b7d2:	e120      	b.n	800ba16 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800b7d4:	46b8      	mov	r8, r7
 800b7d6:	e7d1      	b.n	800b77c <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800b7d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b7da:	2c02      	cmp	r4, #2
 800b7dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b7de:	d00e      	beq.n	800b7fe <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800b7e0:	2c04      	cmp	r4, #4
 800b7e2:	d018      	beq.n	800b816 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800b7e4:	2c01      	cmp	r4, #1
 800b7e6:	d125      	bne.n	800b834 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800b7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f0:	47c0      	blx	r8
 800b7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f4:	54f8      	strb	r0, [r7, r3]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	459b      	cmp	fp, r3
 800b7fa:	d1f6      	bne.n	800b7ea <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800b7fc:	e019      	b.n	800b832 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800b7fe:	2300      	movs	r3, #0
 800b800:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	47c0      	blx	r8
 800b808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800b80e:	3301      	adds	r3, #1
 800b810:	459b      	cmp	fp, r3
 800b812:	d1f5      	bne.n	800b800 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800b814:	e00d      	b.n	800b832 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800b816:	465a      	mov	r2, fp
 800b818:	2300      	movs	r3, #0
 800b81a:	f85a 0003 	ldr.w	r0, [sl, r3]
 800b81e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b820:	9309      	str	r3, [sp, #36]	; 0x24
 800b822:	47c0      	blx	r8
 800b824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	3a01      	subs	r2, #1
 800b82a:	50f8      	str	r0, [r7, r3]
 800b82c:	f103 0304 	add.w	r3, r3, #4
 800b830:	d1f3      	bne.n	800b81a <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800b832:	44b2      	add	sl, r6
 800b834:	2301      	movs	r3, #1
 800b836:	2200      	movs	r2, #0
 800b838:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	9203      	str	r2, [sp, #12]
 800b840:	9104      	str	r1, [sp, #16]
 800b842:	9205      	str	r2, [sp, #20]
 800b844:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b846:	f8cd 9008 	str.w	r9, [sp, #8]
 800b84a:	4629      	mov	r1, r5
 800b84c:	465a      	mov	r2, fp
 800b84e:	f7ff fa51 	bl	800acf4 <LCD_DrawBitmap>
 800b852:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b854:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b856:	1c6f      	adds	r7, r5, #1
 800b858:	fa01 f380 	sxtah	r3, r1, r0
 800b85c:	42bb      	cmp	r3, r7
 800b85e:	d0b1      	beq.n	800b7c4 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800b860:	463d      	mov	r5, r7
 800b862:	e7ba      	b.n	800b7da <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800b864:	2910      	cmp	r1, #16
 800b866:	f040 80d8 	bne.w	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b86a:	fa0f fa87 	sxth.w	sl, r7
 800b86e:	fb0a f004 	mul.w	r0, sl, r4
 800b872:	f7fd fa77 	bl	8008d64 <GUI_ALLOC_AllocNoInit>
 800b876:	9012      	str	r0, [sp, #72]	; 0x48
 800b878:	2800      	cmp	r0, #0
 800b87a:	f000 80ce 	beq.w	800ba1a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b87e:	f7fd f8c7 	bl	8008a10 <GUI_ALLOC_LockH>
 800b882:	901a      	str	r0, [sp, #104]	; 0x68
 800b884:	4630      	mov	r0, r6
 800b886:	f7fd f8c3 	bl	8008a10 <GUI_ALLOC_LockH>
 800b88a:	9018      	str	r0, [sp, #96]	; 0x60
 800b88c:	692b      	ldr	r3, [r5, #16]
 800b88e:	f100 0618 	add.w	r6, r0, #24
 800b892:	b113      	cbz	r3, 800b89a <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800b894:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b898:	b92b      	cbnz	r3, 800b8a6 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800b89a:	00e2      	lsls	r2, r4, #3
 800b89c:	b23f      	sxth	r7, r7
 800b89e:	9211      	str	r2, [sp, #68]	; 0x44
 800b8a0:	007f      	lsls	r7, r7, #1
 800b8a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b8a4:	e088      	b.n	800b9b8 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800b8a6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800b8aa:	0080      	lsls	r0, r0, #2
 800b8ac:	f7fd fa5a 	bl	8008d64 <GUI_ALLOC_AllocNoInit>
 800b8b0:	9011      	str	r0, [sp, #68]	; 0x44
 800b8b2:	b118      	cbz	r0, 800b8bc <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800b8b4:	f7fd f8ac 	bl	8008a10 <GUI_ALLOC_LockH>
 800b8b8:	9019      	str	r0, [sp, #100]	; 0x64
 800b8ba:	e001      	b.n	800b8c0 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800b8bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8be:	9319      	str	r3, [sp, #100]	; 0x64
 800b8c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80a0 	beq.w	800ba08 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b8c8:	b23f      	sxth	r7, r7
 800b8ca:	007f      	lsls	r7, r7, #1
 800b8cc:	970e      	str	r7, [sp, #56]	; 0x38
 800b8ce:	00e7      	lsls	r7, r4, #3
 800b8d0:	9713      	str	r7, [sp, #76]	; 0x4c
 800b8d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b8d4:	970c      	str	r7, [sp, #48]	; 0x30
 800b8d6:	2c02      	cmp	r4, #2
 800b8d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b8dc:	d004      	beq.n	800b8e8 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800b8de:	2c04      	cmp	r4, #4
 800b8e0:	d007      	beq.n	800b8f2 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800b8e2:	2c01      	cmp	r4, #1
 800b8e4:	d114      	bne.n	800b910 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800b8e6:	e004      	b.n	800b8f2 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b8ec:	4652      	mov	r2, sl
 800b8ee:	4623      	mov	r3, r4
 800b8f0:	e003      	b.n	800b8fa <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800b8f2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	4652      	mov	r2, sl
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800b8fe:	47b8      	blx	r7
 800b900:	692f      	ldr	r7, [r5, #16]
 800b902:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b904:	4641      	mov	r1, r8
 800b906:	4652      	mov	r2, sl
 800b908:	4623      	mov	r3, r4
 800b90a:	47b8      	blx	r7
 800b90c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b90e:	443e      	add	r6, r7
 800b910:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b912:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b914:	9104      	str	r1, [sp, #16]
 800b916:	2301      	movs	r3, #1
 800b918:	2200      	movs	r2, #0
 800b91a:	f107 0801 	add.w	r8, r7, #1
 800b91e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	9702      	str	r7, [sp, #8]
 800b926:	9203      	str	r2, [sp, #12]
 800b928:	9205      	str	r2, [sp, #20]
 800b92a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b92c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b92e:	465a      	mov	r2, fp
 800b930:	f7ff f9e0 	bl	800acf4 <LCD_DrawBitmap>
 800b934:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b936:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b938:	fa00 f387 	sxtah	r3, r0, r7
 800b93c:	4543      	cmp	r3, r8
 800b93e:	d002      	beq.n	800b946 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800b940:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b944:	e7c7      	b.n	800b8d6 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800b946:	a819      	add	r0, sp, #100	; 0x64
 800b948:	f7fd f870 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800b94c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b94e:	f7fd f88d 	bl	8008a6c <GUI_ALLOC_Free>
 800b952:	e059      	b.n	800ba08 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b954:	200037e8 	.word	0x200037e8
 800b958:	20000044 	.word	0x20000044
 800b95c:	2c04      	cmp	r4, #4
 800b95e:	d041      	beq.n	800b9e4 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800b960:	2c01      	cmp	r4, #1
 800b962:	d111      	bne.n	800b988 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800b964:	464a      	mov	r2, r9
 800b966:	4631      	mov	r1, r6
 800b968:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b96c:	910a      	str	r1, [sp, #40]	; 0x28
 800b96e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b972:	4798      	blx	r3
 800b974:	47c0      	blx	r8
 800b976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b978:	f802 0b01 	strb.w	r0, [r2], #1
 800b97c:	eb09 000a 	add.w	r0, r9, sl
 800b980:	4282      	cmp	r2, r0
 800b982:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b984:	d1f0      	bne.n	800b968 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800b986:	443e      	add	r6, r7
 800b988:	2301      	movs	r3, #1
 800b98a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b98c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	9301      	str	r3, [sp, #4]
 800b994:	9002      	str	r0, [sp, #8]
 800b996:	9203      	str	r2, [sp, #12]
 800b998:	9104      	str	r1, [sp, #16]
 800b99a:	9205      	str	r2, [sp, #20]
 800b99c:	4629      	mov	r1, r5
 800b99e:	465a      	mov	r2, fp
 800b9a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b9a2:	f7ff f9a7 	bl	800acf4 <LCD_DrawBitmap>
 800b9a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b9a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9aa:	f105 0901 	add.w	r9, r5, #1
 800b9ae:	fa02 f381 	sxtah	r3, r2, r1
 800b9b2:	454b      	cmp	r3, r9
 800b9b4:	d028      	beq.n	800ba08 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b9b6:	464d      	mov	r5, r9
 800b9b8:	2c02      	cmp	r4, #2
 800b9ba:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800b9be:	d1cd      	bne.n	800b95c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800b9c0:	464b      	mov	r3, r9
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	46d9      	mov	r9, fp
 800b9c6:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b9ca:	910a      	str	r1, [sp, #40]	; 0x28
 800b9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9d0:	4790      	blx	r2
 800b9d2:	47c0      	blx	r8
 800b9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9d8:	f823 0b02 	strh.w	r0, [r3], #2
 800b9dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b9e0:	d1f1      	bne.n	800b9c6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800b9e2:	e7d0      	b.n	800b986 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800b9e4:	464b      	mov	r3, r9
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	46d9      	mov	r9, fp
 800b9ea:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b9ee:	910a      	str	r1, [sp, #40]	; 0x28
 800b9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9f4:	4790      	blx	r2
 800b9f6:	47c0      	blx	r8
 800b9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9fc:	f843 0b04 	str.w	r0, [r3], #4
 800ba00:	f1b9 0901 	subs.w	r9, r9, #1
 800ba04:	d1f1      	bne.n	800b9ea <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800ba06:	e7be      	b.n	800b986 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800ba08:	a818      	add	r0, sp, #96	; 0x60
 800ba0a:	f7fd f80f 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800ba0e:	a81a      	add	r0, sp, #104	; 0x68
 800ba10:	f7fd f80c 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800ba14:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ba16:	f7fd f829 	bl	8008a6c <GUI_ALLOC_Free>
 800ba1a:	b01d      	add	sp, #116	; 0x74
 800ba1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba20 <GUI_USAGE_DecUseCnt>:
 800ba20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba22:	4605      	mov	r5, r0
 800ba24:	f7fc fff4 	bl	8008a10 <GUI_ALLOC_LockH>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	a802      	add	r0, sp, #8
 800ba2c:	8994      	ldrh	r4, [r2, #12]
 800ba2e:	f840 2d04 	str.w	r2, [r0, #-4]!
 800ba32:	3c01      	subs	r4, #1
 800ba34:	b2a4      	uxth	r4, r4
 800ba36:	8194      	strh	r4, [r2, #12]
 800ba38:	f7fc fff8 	bl	8008a2c <GUI_ALLOC_UnlockH>
 800ba3c:	b914      	cbnz	r4, 800ba44 <GUI_USAGE_DecUseCnt+0x24>
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f7fd f814 	bl	8008a6c <GUI_ALLOC_Free>
 800ba44:	b003      	add	sp, #12
 800ba46:	bd30      	pop	{r4, r5, pc}

0800ba48 <GUI_USAGE_AddRect>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	4688      	mov	r8, r1
 800ba50:	4617      	mov	r7, r2
 800ba52:	4699      	mov	r9, r3
 800ba54:	68a8      	ldr	r0, [r5, #8]
 800ba56:	464b      	mov	r3, r9
 800ba58:	6846      	ldr	r6, [r0, #4]
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	1c54      	adds	r4, r2, #1
 800ba60:	47b0      	blx	r6
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	443b      	add	r3, r7
 800ba66:	42a3      	cmp	r3, r4
 800ba68:	d001      	beq.n	800ba6e <GUI_USAGE_AddRect+0x26>
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	e7f2      	b.n	800ba54 <GUI_USAGE_AddRect+0xc>
 800ba6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ba72 <LCD_GetNumLayers>:
 800ba72:	b510      	push	{r4, lr}
 800ba74:	2000      	movs	r0, #0
 800ba76:	f7fb fd13 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800ba7a:	1c04      	adds	r4, r0, #0
 800ba7c:	f04f 0001 	mov.w	r0, #1
 800ba80:	bf18      	it	ne
 800ba82:	2401      	movne	r4, #1
 800ba84:	f7fb fd0c 	bl	80074a0 <GUI_DEVICE__GetpDriver>
 800ba88:	b100      	cbz	r0, 800ba8c <LCD_GetNumLayers+0x1a>
 800ba8a:	3401      	adds	r4, #1
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	bd10      	pop	{r4, pc}

0800ba90 <GUI__CompactPixelIndices>:
 800ba90:	2a08      	cmp	r2, #8
 800ba92:	b510      	push	{r4, lr}
 800ba94:	dd0e      	ble.n	800bab4 <GUI__CompactPixelIndices+0x24>
 800ba96:	2a10      	cmp	r2, #16
 800ba98:	dc0a      	bgt.n	800bab0 <GUI__CompactPixelIndices+0x20>
 800ba9a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f850 2b04 	ldr.w	r2, [r0], #4
 800baa4:	f823 2b02 	strh.w	r2, [r3], #2
 800baa8:	428b      	cmp	r3, r1
 800baaa:	d1f9      	bne.n	800baa0 <GUI__CompactPixelIndices+0x10>
 800baac:	2001      	movs	r0, #1
 800baae:	bd10      	pop	{r4, pc}
 800bab0:	2000      	movs	r0, #0
 800bab2:	bd10      	pop	{r4, pc}
 800bab4:	2a02      	cmp	r2, #2
 800bab6:	d06d      	beq.n	800bb94 <GUI__CompactPixelIndices+0x104>
 800bab8:	2a04      	cmp	r2, #4
 800baba:	d054      	beq.n	800bb66 <GUI__CompactPixelIndices+0xd6>
 800babc:	2a01      	cmp	r2, #1
 800babe:	f040 8095 	bne.w	800bbec <GUI__CompactPixelIndices+0x15c>
 800bac2:	4604      	mov	r4, r0
 800bac4:	6803      	ldr	r3, [r0, #0]
 800bac6:	2901      	cmp	r1, #1
 800bac8:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	d047      	beq.n	800bb60 <GUI__CompactPixelIndices+0xd0>
 800bad0:	6842      	ldr	r2, [r0, #4]
 800bad2:	2902      	cmp	r1, #2
 800bad4:	f002 0201 	and.w	r2, r2, #1
 800bad8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800badc:	d102      	bne.n	800bae4 <GUI__CompactPixelIndices+0x54>
 800bade:	f100 0208 	add.w	r2, r0, #8
 800bae2:	e03e      	b.n	800bb62 <GUI__CompactPixelIndices+0xd2>
 800bae4:	6882      	ldr	r2, [r0, #8]
 800bae6:	2903      	cmp	r1, #3
 800bae8:	f002 0201 	and.w	r2, r2, #1
 800baec:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800baf0:	d102      	bne.n	800baf8 <GUI__CompactPixelIndices+0x68>
 800baf2:	f100 020c 	add.w	r2, r0, #12
 800baf6:	e034      	b.n	800bb62 <GUI__CompactPixelIndices+0xd2>
 800baf8:	68c2      	ldr	r2, [r0, #12]
 800bafa:	2904      	cmp	r1, #4
 800bafc:	f002 0201 	and.w	r2, r2, #1
 800bb00:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800bb04:	d102      	bne.n	800bb0c <GUI__CompactPixelIndices+0x7c>
 800bb06:	f100 0210 	add.w	r2, r0, #16
 800bb0a:	e02a      	b.n	800bb62 <GUI__CompactPixelIndices+0xd2>
 800bb0c:	6902      	ldr	r2, [r0, #16]
 800bb0e:	2905      	cmp	r1, #5
 800bb10:	f002 0201 	and.w	r2, r2, #1
 800bb14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bb18:	d102      	bne.n	800bb20 <GUI__CompactPixelIndices+0x90>
 800bb1a:	f100 0214 	add.w	r2, r0, #20
 800bb1e:	e020      	b.n	800bb62 <GUI__CompactPixelIndices+0xd2>
 800bb20:	6942      	ldr	r2, [r0, #20]
 800bb22:	2906      	cmp	r1, #6
 800bb24:	f002 0201 	and.w	r2, r2, #1
 800bb28:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800bb2c:	d102      	bne.n	800bb34 <GUI__CompactPixelIndices+0xa4>
 800bb2e:	f100 0218 	add.w	r2, r0, #24
 800bb32:	e016      	b.n	800bb62 <GUI__CompactPixelIndices+0xd2>
 800bb34:	6982      	ldr	r2, [r0, #24]
 800bb36:	3907      	subs	r1, #7
 800bb38:	f002 0201 	and.w	r2, r2, #1
 800bb3c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800bb40:	d102      	bne.n	800bb48 <GUI__CompactPixelIndices+0xb8>
 800bb42:	f100 021c 	add.w	r2, r0, #28
 800bb46:	e005      	b.n	800bb54 <GUI__CompactPixelIndices+0xc4>
 800bb48:	f100 0220 	add.w	r2, r0, #32
 800bb4c:	69c0      	ldr	r0, [r0, #28]
 800bb4e:	f000 0001 	and.w	r0, r0, #1
 800bb52:	4303      	orrs	r3, r0
 800bb54:	f804 3b01 	strb.w	r3, [r4], #1
 800bb58:	2900      	cmp	r1, #0
 800bb5a:	d0a7      	beq.n	800baac <GUI__CompactPixelIndices+0x1c>
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	e7b1      	b.n	800bac4 <GUI__CompactPixelIndices+0x34>
 800bb60:	1d02      	adds	r2, r0, #4
 800bb62:	2100      	movs	r1, #0
 800bb64:	e7f6      	b.n	800bb54 <GUI__CompactPixelIndices+0xc4>
 800bb66:	4602      	mov	r2, r0
 800bb68:	6803      	ldr	r3, [r0, #0]
 800bb6a:	2901      	cmp	r1, #1
 800bb6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	d102      	bne.n	800bb7a <GUI__CompactPixelIndices+0xea>
 800bb74:	1d04      	adds	r4, r0, #4
 800bb76:	2100      	movs	r1, #0
 800bb78:	e006      	b.n	800bb88 <GUI__CompactPixelIndices+0xf8>
 800bb7a:	f100 0408 	add.w	r4, r0, #8
 800bb7e:	6840      	ldr	r0, [r0, #4]
 800bb80:	f000 000f 	and.w	r0, r0, #15
 800bb84:	4303      	orrs	r3, r0
 800bb86:	3902      	subs	r1, #2
 800bb88:	f802 3b01 	strb.w	r3, [r2], #1
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	d08d      	beq.n	800baac <GUI__CompactPixelIndices+0x1c>
 800bb90:	4620      	mov	r0, r4
 800bb92:	e7e9      	b.n	800bb68 <GUI__CompactPixelIndices+0xd8>
 800bb94:	4604      	mov	r4, r0
 800bb96:	6803      	ldr	r3, [r0, #0]
 800bb98:	2901      	cmp	r1, #1
 800bb9a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	d021      	beq.n	800bbe6 <GUI__CompactPixelIndices+0x156>
 800bba2:	6842      	ldr	r2, [r0, #4]
 800bba4:	2902      	cmp	r1, #2
 800bba6:	f002 0203 	and.w	r2, r2, #3
 800bbaa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800bbae:	d102      	bne.n	800bbb6 <GUI__CompactPixelIndices+0x126>
 800bbb0:	f100 0208 	add.w	r2, r0, #8
 800bbb4:	e018      	b.n	800bbe8 <GUI__CompactPixelIndices+0x158>
 800bbb6:	6882      	ldr	r2, [r0, #8]
 800bbb8:	2903      	cmp	r1, #3
 800bbba:	f002 0203 	and.w	r2, r2, #3
 800bbbe:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800bbc2:	d102      	bne.n	800bbca <GUI__CompactPixelIndices+0x13a>
 800bbc4:	f100 020c 	add.w	r2, r0, #12
 800bbc8:	e00e      	b.n	800bbe8 <GUI__CompactPixelIndices+0x158>
 800bbca:	f100 0210 	add.w	r2, r0, #16
 800bbce:	68c0      	ldr	r0, [r0, #12]
 800bbd0:	f000 0003 	and.w	r0, r0, #3
 800bbd4:	4303      	orrs	r3, r0
 800bbd6:	3904      	subs	r1, #4
 800bbd8:	f804 3b01 	strb.w	r3, [r4], #1
 800bbdc:	2900      	cmp	r1, #0
 800bbde:	f43f af65 	beq.w	800baac <GUI__CompactPixelIndices+0x1c>
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	e7d7      	b.n	800bb96 <GUI__CompactPixelIndices+0x106>
 800bbe6:	1d02      	adds	r2, r0, #4
 800bbe8:	2100      	movs	r1, #0
 800bbea:	e7f5      	b.n	800bbd8 <GUI__CompactPixelIndices+0x148>
 800bbec:	2300      	movs	r3, #0
 800bbee:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800bbf2:	54c2      	strb	r2, [r0, r3]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	428b      	cmp	r3, r1
 800bbf8:	d1f9      	bne.n	800bbee <GUI__CompactPixelIndices+0x15e>
 800bbfa:	e757      	b.n	800baac <GUI__CompactPixelIndices+0x1c>

0800bbfc <__libc_init_array>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	4e0d      	ldr	r6, [pc, #52]	; (800bc34 <__libc_init_array+0x38>)
 800bc00:	4c0d      	ldr	r4, [pc, #52]	; (800bc38 <__libc_init_array+0x3c>)
 800bc02:	1ba4      	subs	r4, r4, r6
 800bc04:	10a4      	asrs	r4, r4, #2
 800bc06:	2500      	movs	r5, #0
 800bc08:	42a5      	cmp	r5, r4
 800bc0a:	d109      	bne.n	800bc20 <__libc_init_array+0x24>
 800bc0c:	4e0b      	ldr	r6, [pc, #44]	; (800bc3c <__libc_init_array+0x40>)
 800bc0e:	4c0c      	ldr	r4, [pc, #48]	; (800bc40 <__libc_init_array+0x44>)
 800bc10:	f000 f844 	bl	800bc9c <_init>
 800bc14:	1ba4      	subs	r4, r4, r6
 800bc16:	10a4      	asrs	r4, r4, #2
 800bc18:	2500      	movs	r5, #0
 800bc1a:	42a5      	cmp	r5, r4
 800bc1c:	d105      	bne.n	800bc2a <__libc_init_array+0x2e>
 800bc1e:	bd70      	pop	{r4, r5, r6, pc}
 800bc20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc24:	4798      	blx	r3
 800bc26:	3501      	adds	r5, #1
 800bc28:	e7ee      	b.n	800bc08 <__libc_init_array+0xc>
 800bc2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc2e:	4798      	blx	r3
 800bc30:	3501      	adds	r5, #1
 800bc32:	e7f2      	b.n	800bc1a <__libc_init_array+0x1e>
 800bc34:	0800cd44 	.word	0x0800cd44
 800bc38:	0800cd44 	.word	0x0800cd44
 800bc3c:	0800cd44 	.word	0x0800cd44
 800bc40:	0800cd48 	.word	0x0800cd48

0800bc44 <memcpy>:
 800bc44:	b510      	push	{r4, lr}
 800bc46:	1e43      	subs	r3, r0, #1
 800bc48:	440a      	add	r2, r1
 800bc4a:	4291      	cmp	r1, r2
 800bc4c:	d100      	bne.n	800bc50 <memcpy+0xc>
 800bc4e:	bd10      	pop	{r4, pc}
 800bc50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc58:	e7f7      	b.n	800bc4a <memcpy+0x6>

0800bc5a <memmove>:
 800bc5a:	4288      	cmp	r0, r1
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	eb01 0302 	add.w	r3, r1, r2
 800bc62:	d807      	bhi.n	800bc74 <memmove+0x1a>
 800bc64:	1e42      	subs	r2, r0, #1
 800bc66:	4299      	cmp	r1, r3
 800bc68:	d00a      	beq.n	800bc80 <memmove+0x26>
 800bc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bc72:	e7f8      	b.n	800bc66 <memmove+0xc>
 800bc74:	4283      	cmp	r3, r0
 800bc76:	d9f5      	bls.n	800bc64 <memmove+0xa>
 800bc78:	1881      	adds	r1, r0, r2
 800bc7a:	1ad2      	subs	r2, r2, r3
 800bc7c:	42d3      	cmn	r3, r2
 800bc7e:	d100      	bne.n	800bc82 <memmove+0x28>
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bc8a:	e7f7      	b.n	800bc7c <memmove+0x22>

0800bc8c <memset>:
 800bc8c:	4402      	add	r2, r0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d100      	bne.n	800bc96 <memset+0xa>
 800bc94:	4770      	bx	lr
 800bc96:	f803 1b01 	strb.w	r1, [r3], #1
 800bc9a:	e7f9      	b.n	800bc90 <memset+0x4>

0800bc9c <_init>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr

0800bca8 <_fini>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	bf00      	nop
 800bcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcae:	bc08      	pop	{r3}
 800bcb0:	469e      	mov	lr, r3
 800bcb2:	4770      	bx	lr
